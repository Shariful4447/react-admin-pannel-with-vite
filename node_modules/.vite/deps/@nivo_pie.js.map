{
  "version": 3,
  "sources": ["../../@nivo/arcs/src/arc_labels/ArcLabel.tsx", "../../@nivo/arcs/src/utils.ts", "../../@nivo/arcs/src/arcTransitionMode.ts", "../../@nivo/arcs/src/centers.ts", "../../@nivo/arcs/src/arc_labels/ArcLabelsLayer.tsx", "../../@nivo/arcs/src/arc_labels/canvas.ts", "../../@nivo/arcs/src/arc_labels/useArcLabels.ts", "../../@nivo/arcs/src/arc_labels/index.ts", "../../@nivo/arcs/src/arc_link_labels/ArcLinkLabel.tsx", "../../@nivo/arcs/src/arc_link_labels/compute.ts", "../../@nivo/arcs/src/arc_link_labels/useArcLinkLabelsTransition.ts", "../../@nivo/arcs/src/arc_link_labels/ArcLinkLabelsLayer.tsx", "../../@nivo/arcs/src/arc_link_labels/canvas.ts", "../../@nivo/arcs/src/arc_link_labels/useArcLinks.ts", "../../@nivo/arcs/src/arc_link_labels/useArcLinkLabels.ts", "../../@nivo/arcs/src/arc_link_labels/index.ts", "../../@nivo/arcs/src/ArcLine.tsx", "../../@nivo/arcs/src/ArcShape.tsx", "../../@nivo/arcs/src/interpolateArc.ts", "../../@nivo/arcs/src/useArcsTransition.ts", "../../@nivo/arcs/src/ArcsLayer.tsx", "../../@nivo/arcs/src/boundingBox.ts", "../../@nivo/arcs/src/interactivity.ts", "../../@nivo/arcs/src/useAnimatedArc.ts", "../../@nivo/arcs/src/useArcGenerator.ts", "../../@nivo/pie/src/PieLegends.tsx", "../../@nivo/pie/src/props.ts", "../../@nivo/pie/src/PieTooltip.tsx", "../../@nivo/pie/src/hooks.ts", "../../@nivo/pie/src/Arcs.tsx", "../../@nivo/pie/src/Pie.tsx", "../../@nivo/pie/src/ResponsivePie.tsx", "../../@nivo/pie/src/PieCanvas.tsx", "../../@nivo/pie/src/ResponsivePieCanvas.tsx"],
  "sourcesContent": ["import { CSSProperties } from 'react'\nimport { SpringValue, Interpolation, animated } from '@react-spring/web'\nimport { useTheme } from '@nivo/core'\nimport { DatumWithArcAndColor } from '../types'\n\nconst staticStyle: CSSProperties = {\n    pointerEvents: 'none',\n}\n\nexport interface ArcLabelProps<Datum extends DatumWithArcAndColor> {\n    datum: Datum\n    label: string\n    style: {\n        progress: SpringValue<number>\n        transform: Interpolation<string>\n        textColor: string\n    }\n}\n\nexport const ArcLabel = <Datum extends DatumWithArcAndColor>({\n    label,\n    style,\n}: ArcLabelProps<Datum>) => {\n    const theme = useTheme()\n\n    return (\n        <animated.g transform={style.transform} opacity={style.progress} style={staticStyle}>\n            <animated.text\n                textAnchor=\"middle\"\n                dominantBaseline=\"central\"\n                style={{\n                    ...theme.labels.text,\n                    fill: style.textColor,\n                }}\n            >\n                {label}\n            </animated.text>\n        </animated.g>\n    )\n}\n", "import { useMemo } from 'react'\nimport { radiansToDegrees, positionFromAngle, degreesToRadians } from '@nivo/core'\nimport { DatumWithArc } from './types'\n\n/**\n * Make sure an angle (expressed in radians)\n * always falls in the range 0~2*PI.\n */\nexport const getNormalizedAngle = (angle: number) => {\n    let normalizedAngle = angle % (Math.PI * 2)\n    if (normalizedAngle < 0) {\n        normalizedAngle += Math.PI * 2\n    }\n\n    return normalizedAngle\n}\n\n/**\n * Filter out arcs with a length below `skipAngle`.\n */\nexport const filterDataBySkipAngle = <Datum extends DatumWithArc>(\n    data: Datum[],\n    skipAngle: number\n) =>\n    data.filter(\n        datum => Math.abs(radiansToDegrees(datum.arc.endAngle - datum.arc.startAngle)) >= skipAngle\n    )\n\n/**\n * Memoized version of `filterDataBySkipAngle`.\n */\nexport const useFilteredDataBySkipAngle = <Datum extends DatumWithArc>(\n    data: Datum[],\n    skipAngle: number\n) => useMemo(() => filterDataBySkipAngle(data, skipAngle), [data, skipAngle])\n\nexport const svgEllipticalArcCommand = (\n    radius: number,\n    largeArcFlag: 0 | 1,\n    sweepFlag: 0 | 1,\n    x: number,\n    y: number\n) =>\n    [\n        'A',\n        radius,\n        radius,\n        0, // x-axis-rotation\n        largeArcFlag,\n        sweepFlag,\n        x,\n        y,\n    ].join(' ')\n\nexport const generateSvgArc = (\n    radius: number,\n    originalStartAngle: number,\n    originalEndAngle: number\n): string => {\n    const startAngle = Math.min(originalStartAngle, originalEndAngle)\n    const endAngle = Math.max(originalStartAngle, originalEndAngle)\n\n    const start = positionFromAngle(degreesToRadians(endAngle), radius)\n    const end = positionFromAngle(degreesToRadians(startAngle), radius)\n\n    // we have a full circle, we cannot use a single elliptical arc\n    // to draw it, so we use 2 in that case.\n    if (endAngle - startAngle >= 360) {\n        const mid = positionFromAngle(degreesToRadians(startAngle + 180), radius)\n\n        return [\n            `M ${start.x} ${start.y}`,\n            svgEllipticalArcCommand(radius, 1, 1, mid.x, mid.y),\n            `M ${start.x} ${start.y}`,\n            svgEllipticalArcCommand(radius, 1, 0, mid.x, mid.y),\n        ].join(' ')\n    }\n\n    const largeArcFlag = endAngle - startAngle <= 180 ? 0 : 1\n\n    return [\n        `M ${start.x} ${start.y}`,\n        svgEllipticalArcCommand(radius, largeArcFlag, 0, end.x, end.y),\n    ].join(' ')\n}\n", "import { Arc, DatumWithArc } from './types'\nimport { useMemo } from 'react'\n\nexport interface ArcTransitionModeConfig {\n    enter: (arc: Arc) => Arc\n    update: (arc: Arc) => Arc\n    leave: (arc: Arc) => Arc\n}\n\nexport const arcTransitionModes = [\n    'startAngle',\n    'middleAngle',\n    'endAngle',\n    'innerRadius',\n    'centerRadius',\n    'outerRadius',\n    'pushIn',\n    'pushOut',\n] as const\nexport type ArcTransitionMode = typeof arcTransitionModes[number]\n\nexport const arcTransitionModeById: Record<ArcTransitionMode, ArcTransitionModeConfig> = {\n    startAngle: {\n        enter: (arc: Arc) => ({\n            ...arc,\n            endAngle: arc.startAngle,\n        }),\n        update: (arc: Arc) => arc,\n        leave: (arc: Arc) => ({\n            ...arc,\n            startAngle: arc.endAngle,\n        }),\n    },\n    middleAngle: {\n        enter: (arc: Arc) => {\n            const middleAngle = arc.startAngle + (arc.endAngle - arc.startAngle) / 2\n\n            return {\n                ...arc,\n                startAngle: middleAngle,\n                endAngle: middleAngle,\n            }\n        },\n        update: (arc: Arc) => arc,\n        leave: (arc: Arc) => {\n            const middleAngle = arc.startAngle + (arc.endAngle - arc.startAngle) / 2\n\n            return {\n                ...arc,\n                startAngle: middleAngle,\n                endAngle: middleAngle,\n            }\n        },\n    },\n    endAngle: {\n        enter: (arc: Arc) => ({\n            ...arc,\n            startAngle: arc.endAngle,\n        }),\n        update: (arc: Arc) => arc,\n        leave: (arc: Arc) => ({\n            ...arc,\n            endAngle: arc.startAngle,\n        }),\n    },\n    innerRadius: {\n        enter: (arc: Arc) => ({\n            ...arc,\n            outerRadius: arc.innerRadius,\n        }),\n        update: (arc: Arc) => arc,\n        leave: (arc: Arc) => ({\n            ...arc,\n            innerRadius: arc.outerRadius,\n        }),\n    },\n    centerRadius: {\n        enter: (arc: Arc) => {\n            const centerRadius = arc.innerRadius + (arc.outerRadius - arc.innerRadius) / 2\n\n            return {\n                ...arc,\n                innerRadius: centerRadius,\n                outerRadius: centerRadius,\n            }\n        },\n        update: (arc: Arc) => arc,\n        leave: (arc: Arc) => {\n            const centerRadius = arc.innerRadius + (arc.outerRadius - arc.innerRadius) / 2\n\n            return {\n                ...arc,\n                innerRadius: centerRadius,\n                outerRadius: centerRadius,\n            }\n        },\n    },\n    outerRadius: {\n        enter: (arc: Arc) => ({\n            ...arc,\n            innerRadius: arc.outerRadius,\n        }),\n        update: (arc: Arc) => arc,\n        leave: (arc: Arc) => ({\n            ...arc,\n            outerRadius: arc.innerRadius,\n        }),\n    },\n    pushIn: {\n        enter: (arc: Arc) => ({\n            ...arc,\n            innerRadius: arc.innerRadius - arc.outerRadius + arc.innerRadius,\n            outerRadius: arc.innerRadius,\n        }),\n        update: (arc: Arc) => arc,\n        leave: (arc: Arc) => ({\n            ...arc,\n            innerRadius: arc.outerRadius,\n            outerRadius: arc.outerRadius + arc.outerRadius - arc.innerRadius,\n        }),\n    },\n    pushOut: {\n        enter: (arc: Arc) => ({\n            ...arc,\n            innerRadius: arc.outerRadius,\n            outerRadius: arc.outerRadius + arc.outerRadius - arc.innerRadius,\n        }),\n        update: (arc: Arc) => arc,\n        leave: (arc: Arc) => ({\n            ...arc,\n            innerRadius: arc.innerRadius - arc.outerRadius + arc.innerRadius,\n            outerRadius: arc.innerRadius,\n        }),\n    },\n}\n\nexport interface TransitionExtra<Datum extends DatumWithArc, ExtraProps> {\n    enter: (datum: Datum) => ExtraProps\n    update: (datum: Datum) => ExtraProps\n    leave: (datum: Datum) => ExtraProps\n}\n\nexport const useArcTransitionMode = <Datum extends DatumWithArc, ExtraProps>(\n    mode: ArcTransitionMode,\n    extraTransition?: TransitionExtra<Datum, ExtraProps>\n) =>\n    useMemo(() => {\n        const transitionMode = arcTransitionModeById[mode]\n\n        return {\n            enter: (datum: Datum) => ({\n                progress: 0,\n                ...transitionMode.enter(datum.arc),\n                ...(extraTransition ? extraTransition.enter(datum) : {}),\n            }),\n            update: (datum: Datum) => ({\n                progress: 1,\n                ...transitionMode.update(datum.arc),\n                ...(extraTransition ? extraTransition.update(datum) : {}),\n            }),\n            leave: (datum: Datum) => ({\n                progress: 0,\n                ...transitionMode.leave(datum.arc),\n                ...(extraTransition ? extraTransition.leave(datum) : {}),\n            }),\n        }\n    }, [mode, extraTransition])\n", "import { useMemo } from 'react'\nimport { useTransition, to, SpringValue } from '@react-spring/web'\nimport {\n    // @ts-ignore\n    midAngle,\n    positionFromAngle,\n    useMotionConfig,\n} from '@nivo/core'\nimport { Arc, DatumWithArc, Point } from './types'\nimport { filterDataBySkipAngle } from './utils'\nimport { ArcTransitionMode, TransitionExtra, useArcTransitionMode } from './arcTransitionMode'\n\nexport const computeArcCenter = (arc: Arc, offset: number): Point => {\n    const angle = midAngle(arc) - Math.PI / 2\n    const radius = arc.innerRadius + (arc.outerRadius - arc.innerRadius) * offset\n\n    return positionFromAngle(angle, radius)\n}\n\nexport const interpolateArcCenter =\n    (offset: number) =>\n    (\n        startAngleValue: SpringValue<number>,\n        endAngleValue: SpringValue<number>,\n        innerRadiusValue: SpringValue<number>,\n        outerRadiusValue: SpringValue<number>\n    ) =>\n        to(\n            [startAngleValue, endAngleValue, innerRadiusValue, outerRadiusValue],\n            (startAngle, endAngle, innerRadius, outerRadius) => {\n                const centroid = computeArcCenter(\n                    { startAngle, endAngle, innerRadius, outerRadius },\n                    offset\n                )\n\n                return `translate(${centroid.x},${centroid.y})`\n            }\n        )\n\nexport const useArcCentersTransition = <Datum extends DatumWithArc, ExtraProps = unknown>(\n    data: Datum[],\n    // define where the centers should be placed,\n    // 0.0: inner radius\n    // 0.5: center\n    // 1.0: outer radius\n    offset = 0.5,\n    mode: ArcTransitionMode = 'innerRadius',\n    extra?: TransitionExtra<Datum, ExtraProps>\n) => {\n    const { animate, config: springConfig } = useMotionConfig()\n\n    const phases = useArcTransitionMode<Datum, ExtraProps>(mode, extra)\n\n    const transition = useTransition<\n        Datum,\n        {\n            progress: number\n            startAngle: number\n            endAngle: number\n            innerRadius: number\n            outerRadius: number\n        } & ExtraProps\n    >(data, {\n        keys: datum => datum.id,\n        initial: phases.update,\n        from: phases.enter,\n        enter: phases.update,\n        update: phases.update,\n        leave: phases.leave,\n        config: springConfig,\n        immediate: !animate,\n    })\n\n    return {\n        transition,\n        interpolate: interpolateArcCenter(offset),\n    }\n}\n\nexport interface ArcCenter<Datum extends DatumWithArc> extends Point {\n    data: Datum\n}\n\n/**\n * Compute an array of arc centers from an array of data containing arcs.\n *\n * If you plan to animate those, you could use `useArcCentersTransition`\n * instead, you could use the returned array with react-spring `useTransition`,\n * but this would lead to cartesian transitions (x/y), while `useArcCentersTransition`\n * will generate proper transitions using radius/angle.\n */\nexport const useArcCenters = <\n    Datum extends DatumWithArc,\n    ExtraProps extends Record<string, any> = Record<string, any>\n>({\n    data,\n    offset = 0.5,\n    skipAngle = 0,\n    computeExtraProps = () => ({} as ExtraProps),\n}: {\n    data: Datum[]\n    // define where the centers should be placed,\n    // 0.0: inner radius\n    // 0.5: center\n    // 1.0: outer radius\n    offset?: number\n    // arcs with a length below this (end angle - start angle in degrees)\n    // are going to be excluded, this can typically be used to avoid having\n    // overlapping labels.\n    skipAngle?: number\n    // this can be used to append extra properties to the centers,\n    // can be used to compute a color/label for example.\n    computeExtraProps?: (datum: Datum) => ExtraProps\n}): (ArcCenter<Datum> & ExtraProps)[] =>\n    useMemo(\n        () =>\n            filterDataBySkipAngle<Datum>(data, skipAngle)\n                // compute position and extra props for each eligible datum\n                .map(datum => {\n                    const position = computeArcCenter(datum.arc, offset)\n\n                    return {\n                        ...computeExtraProps(datum),\n                        x: position.x,\n                        y: position.y,\n                        data: datum,\n                    }\n                }),\n        [data, offset, skipAngle, computeExtraProps]\n    )\n", "import { createElement, useMemo } from 'react'\nimport { PropertyAccessor, usePropertyAccessor, radiansToDegrees, useTheme } from '@nivo/core'\nimport { useInheritedColor } from '@nivo/colors'\nimport { useArcCentersTransition } from '../centers'\nimport { ArcTransitionMode } from '../arcTransitionMode'\nimport { DatumWithArcAndColor } from '../types'\nimport { ArcLabelsProps } from './props'\nimport { ArcLabel, ArcLabelProps } from './ArcLabel'\n\nexport type ArcLabelComponent<Datum extends DatumWithArcAndColor> = (\n    props: ArcLabelProps<Datum>\n) => JSX.Element\n\ninterface ArcLabelsLayerProps<Datum extends DatumWithArcAndColor> {\n    center: [number, number]\n    data: Datum[]\n    label: PropertyAccessor<Datum, string>\n    radiusOffset: ArcLabelsProps<Datum>['arcLabelsRadiusOffset']\n    skipAngle: ArcLabelsProps<Datum>['arcLabelsSkipAngle']\n    textColor: ArcLabelsProps<Datum>['arcLabelsTextColor']\n    transitionMode: ArcTransitionMode\n    component?: ArcLabelsProps<Datum>['arcLabelsComponent']\n}\n\nexport const ArcLabelsLayer = <Datum extends DatumWithArcAndColor>({\n    center,\n    data,\n    transitionMode,\n    label: labelAccessor,\n    radiusOffset,\n    skipAngle,\n    textColor,\n    component = ArcLabel,\n}: ArcLabelsLayerProps<Datum>) => {\n    const getLabel = usePropertyAccessor<Datum, string>(labelAccessor)\n    const theme = useTheme()\n    const getTextColor = useInheritedColor<Datum>(textColor, theme)\n\n    const filteredData = useMemo(\n        () =>\n            data.filter(datum => {\n                return (\n                    Math.abs(radiansToDegrees(datum.arc.endAngle - datum.arc.startAngle)) >=\n                    skipAngle\n                )\n            }),\n        [data, skipAngle]\n    )\n\n    const { transition, interpolate } = useArcCentersTransition<Datum>(\n        filteredData,\n        radiusOffset,\n        transitionMode\n    )\n\n    const Label: ArcLabelComponent<Datum> = component\n\n    return (\n        <g transform={`translate(${center[0]},${center[1]})`}>\n            {transition((transitionProps, datum) => {\n                return createElement(Label, {\n                    key: datum.id,\n                    datum,\n                    label: getLabel(datum),\n                    style: {\n                        ...transitionProps,\n                        transform: interpolate(\n                            transitionProps.startAngle,\n                            transitionProps.endAngle,\n                            transitionProps.innerRadius,\n                            transitionProps.outerRadius\n                        ),\n                        textColor: getTextColor(datum),\n                    },\n                })\n            })}\n        </g>\n    )\n}\n", "import { CompleteTheme } from '@nivo/core'\nimport { DatumWithArcAndColor } from '../types'\nimport { ArcLabel } from './useArcLabels'\n\nexport const drawCanvasArcLabels = <Datum extends DatumWithArcAndColor>(\n    ctx: CanvasRenderingContext2D,\n    labels: ArcLabel<Datum>[],\n    theme: CompleteTheme\n) => {\n    ctx.textAlign = 'center'\n    ctx.textBaseline = 'middle'\n    ctx.font = `${theme.labels.text.fontSize}px ${theme.labels.text.fontFamily}`\n\n    labels.forEach(label => {\n        ctx.fillStyle = label.textColor\n        ctx.fillText(`${label.label}`, label.x, label.y)\n    })\n}\n", "import { useCallback } from 'react'\nimport { PropertyAccessor, usePropertyAccessor, useTheme } from '@nivo/core'\nimport { InheritedColorConfig, useInheritedColor } from '@nivo/colors'\nimport { DatumWithArcAndColor } from '../types'\nimport { useArcCenters, ArcCenter } from '../centers'\n\nexport interface ArcLabel<Datum extends DatumWithArcAndColor> extends ArcCenter<Datum> {\n    label: string\n    textColor: string\n}\n\n/**\n * Compute arc labels, please note that the datum should\n * contain a color in order to be able to compute the label text color.\n *\n * Please see `useArcCenters` for a more detailed explanation\n * about the parameters.\n */\nexport const useArcLabels = <Datum extends DatumWithArcAndColor>({\n    data,\n    offset,\n    skipAngle,\n    label,\n    textColor,\n}: {\n    data: Datum[]\n    offset?: number\n    skipAngle?: number\n    label: PropertyAccessor<Datum, string>\n    textColor: InheritedColorConfig<Datum>\n}) => {\n    const getLabel = usePropertyAccessor<Datum, string>(label)\n\n    const theme = useTheme()\n    const getTextColor = useInheritedColor<Datum>(textColor, theme)\n\n    const computeExtraProps = useCallback(\n        (datum: Datum) => {\n            return {\n                label: getLabel(datum),\n                textColor: getTextColor(datum),\n            }\n        },\n        [getLabel, getTextColor]\n    )\n\n    return useArcCenters<Datum, Omit<ArcLabel<Datum>, keyof ArcCenter<Datum>>>({\n        data,\n        offset,\n        skipAngle,\n        computeExtraProps,\n    })\n}\n", "import { ArcLabel } from './ArcLabel'\n\nexport const ArcLabelComponent = ArcLabel\nexport * from './ArcLabelsLayer'\nexport * from './canvas'\nexport * from './props'\nexport * from './useArcLabels'\n", "import { useTheme } from '@nivo/core'\nimport { SpringValue, Interpolation, animated } from '@react-spring/web'\nimport { DatumWithArcAndColor } from '../types'\n\nexport interface ArcLinkLabelProps<Datum extends DatumWithArcAndColor> {\n    datum: Datum\n    label: string\n    style: {\n        path: Interpolation<string>\n        thickness: number\n        textPosition: Interpolation<string>\n        textAnchor: Interpolation<'start' | 'end'>\n        linkColor: SpringValue<string>\n        opacity: SpringValue<number>\n        textColor: SpringValue<string>\n    }\n}\n\nexport const ArcLinkLabel = <Datum extends DatumWithArcAndColor>({\n    label,\n    style,\n}: ArcLinkLabelProps<Datum>) => {\n    const theme = useTheme()\n\n    return (\n        <animated.g opacity={style.opacity}>\n            <animated.path\n                fill=\"none\"\n                stroke={style.linkColor}\n                strokeWidth={style.thickness}\n                d={style.path}\n            />\n            <animated.text\n                transform={style.textPosition}\n                textAnchor={style.textAnchor}\n                dominantBaseline=\"central\"\n                style={{\n                    ...theme.labels.text,\n                    fill: style.textColor,\n                }}\n            >\n                {label}\n            </animated.text>\n        </animated.g>\n    )\n}\n", "import { positionFromAngle } from '@nivo/core'\nimport { Arc, Point } from '../types'\nimport { getNormalizedAngle } from '../utils'\nimport { ArcLink } from './types'\n\n/**\n * Compute text anchor for a given arc.\n *\n * `computeArcLink` already computes a `side`, but when using\n * `react-spring`, you cannot have a single interpolation\n * returning several output values, so we need to compute\n * them in separate interpolations.\n */\nexport const computeArcLinkTextAnchor = (arc: Arc): 'start' | 'end' => {\n    const centerAngle = getNormalizedAngle(\n        arc.startAngle + (arc.endAngle - arc.startAngle) / 2 - Math.PI / 2\n    )\n\n    if (centerAngle < Math.PI / 2 || centerAngle > Math.PI * 1.5) {\n        return 'start'\n    }\n\n    return 'end'\n}\n\n/**\n * Compute the link of a single arc, returning its points,\n * please note that points coordinates are relative to\n * the center of the arc.\n */\nexport const computeArcLink = (\n    arc: Arc,\n    offset: number,\n    diagonalLength: number,\n    straightLength: number\n): ArcLink => {\n    const centerAngle = getNormalizedAngle(\n        arc.startAngle + (arc.endAngle - arc.startAngle) / 2 - Math.PI / 2\n    )\n    const point0: Point = positionFromAngle(centerAngle, arc.outerRadius + offset)\n    const point1: Point = positionFromAngle(centerAngle, arc.outerRadius + offset + diagonalLength)\n\n    let side: ArcLink['side']\n    let point2: Point\n    if (centerAngle < Math.PI / 2 || centerAngle > Math.PI * 1.5) {\n        side = 'after'\n        point2 = {\n            x: point1.x + straightLength,\n            y: point1.y,\n        }\n    } else {\n        side = 'before'\n        point2 = {\n            x: point1.x - straightLength,\n            y: point1.y,\n        }\n    }\n\n    return {\n        side,\n        points: [point0, point1, point2],\n    }\n}\n", "import { useMemo } from 'react'\nimport { SpringValue, useTransition, to } from '@react-spring/web'\nimport { line } from 'd3-shape'\nimport { useMotionConfig, useTheme } from '@nivo/core'\nimport { InheritedColorConfig, useInheritedColor } from '@nivo/colors'\nimport { DatumWithArcAndColor, Point } from '../types'\nimport { useFilteredDataBySkipAngle } from '../utils'\nimport { computeArcLink, computeArcLinkTextAnchor } from './compute'\n\nconst lineGenerator = line<Point>()\n    .x(d => d.x)\n    .y(d => d.y)\n\ntype AnimatedProps = {\n    startAngle: number\n    endAngle: number\n    innerRadius: number\n    outerRadius: number\n    offset: number\n    diagonalLength: number\n    straightLength: number\n    textOffset: number\n    linkColor: string\n    textColor: string\n    opacity: number\n}\n\nconst useTransitionPhases = <Datum extends DatumWithArcAndColor>({\n    offset,\n    diagonalLength,\n    straightLength,\n    textOffset,\n    getLinkColor,\n    getTextColor,\n}: Pick<AnimatedProps, 'offset' | 'diagonalLength' | 'straightLength' | 'textOffset'> & {\n    getLinkColor: (datum: Datum) => string\n    getTextColor: (datum: Datum) => string\n}): Record<'enter' | 'update' | 'leave', (datum: Datum) => AnimatedProps> =>\n    useMemo(\n        () => ({\n            enter: (datum: Datum) => ({\n                startAngle: datum.arc.startAngle,\n                endAngle: datum.arc.endAngle,\n                innerRadius: datum.arc.innerRadius,\n                outerRadius: datum.arc.outerRadius,\n                offset,\n                diagonalLength: 0,\n                straightLength: 0,\n                textOffset,\n                linkColor: getLinkColor(datum),\n                textColor: getTextColor(datum),\n                opacity: 0,\n            }),\n            update: (d: Datum) => ({\n                startAngle: d.arc.startAngle,\n                endAngle: d.arc.endAngle,\n                innerRadius: d.arc.innerRadius,\n                outerRadius: d.arc.outerRadius,\n                offset,\n                diagonalLength,\n                straightLength,\n                textOffset,\n                linkColor: getLinkColor(d),\n                textColor: getTextColor(d),\n                opacity: 1,\n            }),\n            leave: (d: Datum) => ({\n                startAngle: d.arc.startAngle,\n                endAngle: d.arc.endAngle,\n                innerRadius: d.arc.innerRadius,\n                outerRadius: d.arc.outerRadius,\n                offset,\n                diagonalLength: 0,\n                straightLength: 0,\n                textOffset,\n                linkColor: getLinkColor(d),\n                textColor: getTextColor(d),\n                opacity: 0,\n            }),\n        }),\n        [diagonalLength, straightLength, textOffset, getLinkColor, getTextColor]\n    )\n\nconst interpolateLink = (\n    startAngleValue: SpringValue<AnimatedProps['startAngle']>,\n    endAngleValue: SpringValue<AnimatedProps['endAngle']>,\n    innerRadiusValue: SpringValue<AnimatedProps['innerRadius']>,\n    outerRadiusValue: SpringValue<AnimatedProps['outerRadius']>,\n    offsetValue: SpringValue<AnimatedProps['offset']>,\n    diagonalLengthValue: SpringValue<AnimatedProps['diagonalLength']>,\n    straightLengthValue: SpringValue<AnimatedProps['straightLength']>\n) =>\n    to(\n        [\n            startAngleValue,\n            endAngleValue,\n            innerRadiusValue,\n            outerRadiusValue,\n            offsetValue,\n            diagonalLengthValue,\n            straightLengthValue,\n        ],\n        (\n            startAngle,\n            endAngle,\n            innerRadius,\n            outerRadius,\n            offset,\n            diagonalLengthAnimated,\n            straightLengthAnimated\n        ) => {\n            const { points } = computeArcLink(\n                {\n                    startAngle,\n                    endAngle,\n                    innerRadius,\n                    outerRadius,\n                },\n                offset,\n                diagonalLengthAnimated,\n                straightLengthAnimated\n            )\n\n            return lineGenerator(points)\n        }\n    )\n\nconst interpolateTextAnchor = (\n    startAngleValue: SpringValue<AnimatedProps['startAngle']>,\n    endAngleValue: SpringValue<AnimatedProps['endAngle']>,\n    innerRadiusValue: SpringValue<AnimatedProps['innerRadius']>,\n    outerRadiusValue: SpringValue<AnimatedProps['outerRadius']>\n) =>\n    to(\n        [startAngleValue, endAngleValue, innerRadiusValue, outerRadiusValue],\n        (startAngle, endAngle, innerRadius, outerRadius) => {\n            return computeArcLinkTextAnchor({\n                startAngle,\n                endAngle,\n                innerRadius,\n                outerRadius,\n            })\n        }\n    )\n\n/**\n * Interpolating the text position involves almost the same computation\n * as `interpolateLink`, unfortunately `react-spring` does not support\n * multiple output values from a single interpolation.\n *\n * We should revise this if `react-spring` adds this feature at some point.\n */\nconst interpolateTextPosition = (\n    startAngleValue: SpringValue<AnimatedProps['startAngle']>,\n    endAngleValue: SpringValue<AnimatedProps['endAngle']>,\n    innerRadiusValue: SpringValue<AnimatedProps['innerRadius']>,\n    outerRadiusValue: SpringValue<AnimatedProps['outerRadius']>,\n    offsetValue: SpringValue<AnimatedProps['offset']>,\n    diagonalLengthValue: SpringValue<AnimatedProps['diagonalLength']>,\n    straightLengthValue: SpringValue<AnimatedProps['straightLength']>,\n    textOffsetValue: SpringValue<AnimatedProps['textOffset']>\n) =>\n    to(\n        [\n            startAngleValue,\n            endAngleValue,\n            innerRadiusValue,\n            outerRadiusValue,\n            offsetValue,\n            diagonalLengthValue,\n            straightLengthValue,\n            textOffsetValue,\n        ],\n        (\n            startAngle,\n            endAngle,\n            innerRadius,\n            outerRadius,\n            offset,\n            diagonalLengthAnimated,\n            straightLengthAnimated,\n            textOffset\n        ) => {\n            const { points, side } = computeArcLink(\n                {\n                    startAngle,\n                    endAngle,\n                    innerRadius,\n                    outerRadius,\n                },\n                offset,\n                diagonalLengthAnimated,\n                straightLengthAnimated\n            )\n\n            const position = points[2]\n            if (side === 'before') {\n                position.x -= textOffset\n            } else {\n                position.x += textOffset\n            }\n\n            return `translate(${position.x},${position.y})`\n        }\n    )\n\n/**\n * This hook can be used to animate a group of arc link labels,\n * if you just want to compute the labels, please use `useArcLinkLabels`.\n */\nexport const useArcLinkLabelsTransition = <Datum extends DatumWithArcAndColor>({\n    data,\n    offset = 0,\n    diagonalLength,\n    straightLength,\n    skipAngle = 0,\n    textOffset,\n    linkColor,\n    textColor,\n}: {\n    data: Datum[]\n    offset?: number\n    diagonalLength: number\n    straightLength: number\n    skipAngle?: number\n    textOffset: number\n    linkColor: InheritedColorConfig<Datum>\n    textColor: InheritedColorConfig<Datum>\n}) => {\n    const { animate, config: springConfig } = useMotionConfig()\n\n    const theme = useTheme()\n    const getLinkColor = useInheritedColor<Datum>(linkColor, theme)\n    const getTextColor = useInheritedColor<Datum>(textColor, theme)\n\n    const filteredData = useFilteredDataBySkipAngle<Datum>(data, skipAngle)\n    const transitionPhases = useTransitionPhases<Datum>({\n        offset,\n        diagonalLength,\n        straightLength,\n        textOffset,\n        getLinkColor,\n        getTextColor,\n    })\n\n    const transition = useTransition<Datum, AnimatedProps>(filteredData, {\n        keys: datum => datum.id,\n        initial: transitionPhases.update,\n        from: transitionPhases.enter,\n        enter: transitionPhases.update,\n        update: transitionPhases.update,\n        leave: transitionPhases.leave,\n        config: springConfig,\n        immediate: !animate,\n    })\n\n    return {\n        transition,\n        interpolateLink,\n        interpolateTextAnchor,\n        interpolateTextPosition,\n    }\n}\n", "import { createElement } from 'react'\nimport { usePropertyAccessor } from '@nivo/core'\nimport { DatumWithArcAndColor } from '../types'\nimport { useArcLinkLabelsTransition } from './useArcLinkLabelsTransition'\nimport { ArcLinkLabelsProps } from './props'\nimport { ArcLinkLabel, ArcLinkLabelProps } from './ArcLinkLabel'\n\nexport type ArcLinkLabelComponent<Datum extends DatumWithArcAndColor> = (\n    props: ArcLinkLabelProps<Datum>\n) => JSX.Element\n\ninterface ArcLinkLabelsLayerProps<Datum extends DatumWithArcAndColor> {\n    center: [number, number]\n    data: Datum[]\n    label: ArcLinkLabelsProps<Datum>['arcLinkLabel']\n    skipAngle: ArcLinkLabelsProps<Datum>['arcLinkLabelsSkipAngle']\n    offset: ArcLinkLabelsProps<Datum>['arcLinkLabelsOffset']\n    diagonalLength: ArcLinkLabelsProps<Datum>['arcLinkLabelsDiagonalLength']\n    straightLength: ArcLinkLabelsProps<Datum>['arcLinkLabelsStraightLength']\n    strokeWidth: ArcLinkLabelsProps<Datum>['arcLinkLabelsThickness']\n    textOffset: ArcLinkLabelsProps<Datum>['arcLinkLabelsTextOffset']\n    textColor: ArcLinkLabelsProps<Datum>['arcLinkLabelsTextColor']\n    linkColor: ArcLinkLabelsProps<Datum>['arcLinkLabelsColor']\n    component?: ArcLinkLabelComponent<Datum>\n}\n\nexport const ArcLinkLabelsLayer = <Datum extends DatumWithArcAndColor>({\n    center,\n    data,\n    label: labelAccessor,\n    skipAngle,\n    offset,\n    diagonalLength,\n    straightLength,\n    strokeWidth,\n    textOffset,\n    textColor,\n    linkColor,\n    component = ArcLinkLabel,\n}: ArcLinkLabelsLayerProps<Datum>) => {\n    const getLabel = usePropertyAccessor<Datum, string>(labelAccessor)\n\n    const { transition, interpolateLink, interpolateTextAnchor, interpolateTextPosition } =\n        useArcLinkLabelsTransition<Datum>({\n            data,\n            skipAngle,\n            offset,\n            diagonalLength,\n            straightLength,\n            textOffset,\n            linkColor,\n            textColor,\n        })\n\n    const Label: ArcLinkLabelComponent<Datum> = component\n\n    return (\n        <g transform={`translate(${center[0]},${center[1]})`}>\n            {transition((transitionProps, datum) => {\n                return createElement(Label, {\n                    key: datum.id,\n                    datum,\n                    label: getLabel(datum),\n                    style: {\n                        ...transitionProps,\n                        thickness: strokeWidth,\n                        path: interpolateLink(\n                            transitionProps.startAngle,\n                            transitionProps.endAngle,\n                            transitionProps.innerRadius,\n                            transitionProps.outerRadius,\n                            transitionProps.offset,\n                            transitionProps.diagonalLength,\n                            transitionProps.straightLength\n                        ),\n                        textAnchor: interpolateTextAnchor(\n                            transitionProps.startAngle,\n                            transitionProps.endAngle,\n                            transitionProps.innerRadius,\n                            transitionProps.outerRadius\n                        ),\n                        textPosition: interpolateTextPosition(\n                            transitionProps.startAngle,\n                            transitionProps.endAngle,\n                            transitionProps.innerRadius,\n                            transitionProps.outerRadius,\n                            transitionProps.offset,\n                            transitionProps.diagonalLength,\n                            transitionProps.straightLength,\n                            transitionProps.textOffset\n                        ),\n                    },\n                })\n            })}\n        </g>\n    )\n}\n", "import {\n    // @ts-ignore\n    textPropsByEngine,\n    CompleteTheme,\n} from '@nivo/core'\nimport { DatumWithArcAndColor } from '../types'\nimport { ArcLinkLabel } from './types'\n\nexport const drawCanvasArcLinkLabels = <Datum extends DatumWithArcAndColor>(\n    ctx: CanvasRenderingContext2D,\n    labels: ArcLinkLabel<Datum>[],\n    theme: CompleteTheme,\n    strokeWidth: number\n) => {\n    ctx.textBaseline = 'middle'\n    ctx.font = `${theme.labels.text.fontSize}px ${theme.labels.text.fontFamily}`\n\n    labels.forEach(label => {\n        ctx.fillStyle = label.textColor\n        ctx.textAlign = textPropsByEngine.canvas.align[label.textAnchor]\n        ctx.fillText(`${label.label}`, label.x, label.y)\n\n        ctx.beginPath()\n        ctx.strokeStyle = label.linkColor\n        ctx.lineWidth = strokeWidth\n        label.points.forEach((point, index) => {\n            if (index === 0) ctx.moveTo(point.x, point.y)\n            else ctx.lineTo(point.x, point.y)\n        })\n        ctx.stroke()\n    })\n}\n", "import { useMemo } from 'react'\nimport { radiansToDegrees } from '@nivo/core'\nimport { DatumWithArc } from '../types'\nimport { ArcLinkWithDatum } from './types'\nimport { computeArcLink } from './compute'\n\n/**\n * Compute links for an array of data containing arcs.\n *\n * This is typically used to create labels for arcs,\n * and it's used for the `useArcLinkLabels` hook.\n */\nexport const useArcLinks = <\n    Datum extends DatumWithArc,\n    ExtraProps extends Record<string, any> = Record<string, any>\n>({\n    data,\n    skipAngle = 0,\n    offset = 0.5,\n    diagonalLength,\n    straightLength,\n    computeExtraProps = () => ({} as ExtraProps),\n}: {\n    data: Datum[]\n    // arcs with a length below this (end angle - start angle in degrees)\n    // are going to be excluded, this can typically be used to avoid having\n    // overlapping labels.\n    skipAngle?: number\n    // offset from arc outer radius in pixels\n    offset?: number\n    // length of the diagonal segment of the link\n    diagonalLength: number\n    // length of the straight segment of the link\n    straightLength: number\n    // this can be used to append extra properties to the links,\n    // can be used to compute a color/label for example.\n    computeExtraProps?: (datum: ArcLinkWithDatum<Datum>) => ExtraProps\n}): (ArcLinkWithDatum<Datum> & ExtraProps)[] => {\n    const links = useMemo(\n        () =>\n            data\n                // filter out arcs with a length below `skipAngle`\n                .filter(\n                    datum =>\n                        Math.abs(radiansToDegrees(datum.arc.endAngle - datum.arc.startAngle)) >=\n                        skipAngle\n                )\n                // compute the link for each eligible arc\n                .map(datum => ({\n                    ...computeArcLink(datum.arc, offset, diagonalLength, straightLength),\n                    data: datum,\n                })),\n        [data, skipAngle, offset, diagonalLength, straightLength]\n    )\n\n    // splitting memoization of links and extra props can be more efficient,\n    // this way if only `computeExtraProps` changes, we skip links computation.\n    return useMemo(\n        () =>\n            links.map(link => ({\n                ...computeExtraProps(link),\n                ...link,\n            })),\n        [links, computeExtraProps]\n    )\n}\n", "import { useCallback } from 'react'\nimport { PropertyAccessor, usePropertyAccessor, useTheme } from '@nivo/core'\nimport { InheritedColorConfig, useInheritedColor } from '@nivo/colors'\nimport { DatumWithArcAndColor } from '../types'\nimport { ArcLinkWithDatum, ArcLinkLabel } from './types'\nimport { useArcLinks } from './useArcLinks'\n\n/**\n * Compute arc link labels, please note that the datum should\n * contain a color in order to be able to compute the link/label text color.\n *\n * Please see `useArcLinks` for a more detailed explanation\n * about the parameters.\n */\nexport const useArcLinkLabels = <Datum extends DatumWithArcAndColor>({\n    data,\n    skipAngle,\n    offset,\n    diagonalLength,\n    straightLength,\n    textOffset = 0,\n    label,\n    linkColor,\n    textColor,\n}: {\n    data: Datum[]\n    skipAngle?: number\n    offset?: number\n    diagonalLength: number\n    straightLength: number\n    textOffset: number\n    label: PropertyAccessor<Datum, string>\n    linkColor: InheritedColorConfig<Datum>\n    textColor: InheritedColorConfig<Datum>\n}) => {\n    const getLabel = usePropertyAccessor<Datum, string>(label)\n\n    const theme = useTheme()\n    const getLinkColor = useInheritedColor<Datum>(linkColor, theme)\n    const getTextColor = useInheritedColor<Datum>(textColor, theme)\n\n    const computeExtraProps = useCallback(\n        (link: ArcLinkWithDatum<Datum>) => {\n            const position = {\n                x: link.points[2].x,\n                y: link.points[2].y,\n            }\n            let textAnchor: ArcLinkLabel<Datum>['textAnchor']\n            if (link.side === 'before') {\n                position.x -= textOffset\n                textAnchor = 'end'\n            } else {\n                position.x += textOffset\n                textAnchor = 'start'\n            }\n\n            return {\n                ...position,\n                label: getLabel(link.data),\n                linkColor: getLinkColor(link.data),\n                textAnchor,\n                textColor: getTextColor(link.data),\n            }\n        },\n        [getLabel, getLinkColor, getTextColor, textOffset]\n    )\n\n    return useArcLinks<Datum, Omit<ArcLinkLabel<Datum>, keyof ArcLinkWithDatum<Datum>>>({\n        data,\n        skipAngle,\n        offset,\n        diagonalLength,\n        straightLength,\n        computeExtraProps,\n    })\n}\n", "import { ArcLinkLabel } from './ArcLinkLabel'\n\nexport const ArcLinkLabelComponent = ArcLinkLabel\nexport * from './ArcLinkLabelsLayer'\nexport * from './canvas'\nexport * from './compute'\nexport * from './props'\nexport * from './types'\nexport * from './useArcLinkLabels'\nexport * from './useArcLinkLabelsTransition'\nexport * from './useArcLinks'\n", "import { animated, to, AnimatedProps } from '@react-spring/web'\nimport { ExtractProps } from '@nivo/core'\nimport { generateSvgArc } from './utils'\n\ntype ArcLineProps = {\n    animated: AnimatedProps<{\n        radius: number\n        startAngle: number\n        endAngle: number\n        opacity: number\n    }>\n} & ExtractProps<typeof animated.path>\n\nexport const ArcLine = ({ animated: animatedProps, ...rest }: ArcLineProps) => (\n    <animated.path\n        d={to(\n            [animatedProps.radius, animatedProps.startAngle, animatedProps.endAngle],\n            (radius, start, end) => generateSvgArc(radius, start, end)\n        )}\n        {...rest}\n    />\n)\n", "import { useCallback } from 'react'\nimport * as React from 'react'\nimport { SpringValue, Interpolation, animated } from '@react-spring/web'\nimport { DatumWithArcAndColor } from './types'\n\nexport type ArcMouseHandler<Datum extends DatumWithArcAndColor> = (\n    datum: Datum,\n    event: React.MouseEvent<SVGPathElement>\n) => void\n\nexport interface ArcShapeProps<Datum extends DatumWithArcAndColor> {\n    datum: Datum\n    style: {\n        opacity: SpringValue<number>\n        color: SpringValue<string>\n        borderWidth: number\n        borderColor: SpringValue<string>\n        path: Interpolation<string>\n    }\n    onClick?: ArcMouseHandler<Datum>\n    onMouseEnter?: ArcMouseHandler<Datum>\n    onMouseMove?: ArcMouseHandler<Datum>\n    onMouseLeave?: ArcMouseHandler<Datum>\n}\n\n/**\n * A simple arc component to be used typically with an `ArcsLayer`.\n *\n * Please note that the component accepts `SpringValue`s instead of\n * regular values to support animations.\n */\nexport const ArcShape = <Datum extends DatumWithArcAndColor>({\n    datum,\n    style,\n    onClick,\n    onMouseEnter,\n    onMouseMove,\n    onMouseLeave,\n}: ArcShapeProps<Datum>) => {\n    const handleClick = useCallback(event => onClick?.(datum, event), [onClick, datum])\n\n    const handleMouseEnter = useCallback(\n        event => onMouseEnter?.(datum, event),\n        [onMouseEnter, datum]\n    )\n\n    const handleMouseMove = useCallback(event => onMouseMove?.(datum, event), [onMouseMove, datum])\n\n    const handleMouseLeave = useCallback(\n        event => onMouseLeave?.(datum, event),\n        [onMouseLeave, datum]\n    )\n\n    return (\n        <animated.path\n            d={style.path}\n            opacity={style.opacity}\n            fill={datum.fill || style.color}\n            stroke={style.borderColor}\n            strokeWidth={style.borderWidth}\n            onClick={onClick ? handleClick : undefined}\n            onMouseEnter={onMouseEnter ? handleMouseEnter : undefined}\n            onMouseMove={onMouseMove ? handleMouseMove : undefined}\n            onMouseLeave={onMouseLeave ? handleMouseLeave : undefined}\n        />\n    )\n}\n", "import { to, SpringValue } from '@react-spring/web'\nimport { ArcGenerator } from './types'\n\n/**\n * Directly animating paths for arcs leads to sub-optimal results\n * as the interpolation is going to be linear while we deal with polar coordinates,\n * this interpolator is going to generate proper arc transitions.\n * It should be used with the `useAnimatedArc` or `useArcsTransition` hooks.\n */\nexport const interpolateArc = (\n    startAngleValue: SpringValue<number>,\n    endAngleValue: SpringValue<number>,\n    innerRadiusValue: SpringValue<number>,\n    outerRadiusValue: SpringValue<number>,\n    arcGenerator: ArcGenerator\n) =>\n    to(\n        [startAngleValue, endAngleValue, innerRadiusValue, outerRadiusValue],\n        (startAngle, endAngle, innerRadius, outerRadius) => {\n            return arcGenerator({\n                startAngle,\n                endAngle,\n                innerRadius: Math.max(0, innerRadius),\n                outerRadius: Math.max(0, outerRadius),\n            })\n        }\n    )\n", "import { useTransition } from '@react-spring/web'\nimport { useMotionConfig } from '@nivo/core'\nimport { DatumWithArc } from './types'\nimport { ArcTransitionMode, useArcTransitionMode, TransitionExtra } from './arcTransitionMode'\nimport { interpolateArc } from './interpolateArc'\n\n/**\n * This hook can be used to animate a group of arcs,\n * if you want to animate a single arc,\n * please have a look at the `useAnimatedArc` hook.\n */\nexport const useArcsTransition = <Datum extends DatumWithArc, ExtraProps = unknown>(\n    data: Datum[],\n    mode: ArcTransitionMode = 'innerRadius',\n    extra?: TransitionExtra<Datum, ExtraProps>\n) => {\n    const { animate, config: springConfig } = useMotionConfig()\n\n    const phases = useArcTransitionMode<Datum, ExtraProps>(mode, extra)\n\n    const transition = useTransition<\n        Datum,\n        {\n            progress: number\n            startAngle: number\n            endAngle: number\n            innerRadius: number\n            outerRadius: number\n        } & ExtraProps\n    >(data, {\n        keys: datum => datum.id,\n        initial: phases.update,\n        from: phases.enter,\n        enter: phases.update,\n        update: phases.update,\n        leave: phases.leave,\n        config: springConfig,\n        immediate: !animate,\n    })\n\n    return {\n        transition,\n        interpolate: interpolateArc,\n    }\n}\n", "import { createElement } from 'react'\nimport { useTheme } from '@nivo/core'\nimport { InheritedColorConfig, useInheritedColor } from '@nivo/colors'\nimport { DatumWithArcAndColor, ArcGenerator } from './types'\nimport { useArcsTransition } from './useArcsTransition'\nimport { ArcTransitionMode } from './arcTransitionMode'\nimport { ArcMouseHandler, ArcShape, ArcShapeProps } from './ArcShape'\n\nexport type ArcComponent<Datum extends DatumWithArcAndColor> = (\n    props: ArcShapeProps<Datum>\n) => JSX.Element\n\ninterface ArcsLayerProps<Datum extends DatumWithArcAndColor> {\n    center: [number, number]\n    data: Datum[]\n    arcGenerator: ArcGenerator\n    borderWidth: number\n    borderColor: InheritedColorConfig<Datum>\n    onClick?: ArcMouseHandler<Datum>\n    onMouseEnter?: ArcMouseHandler<Datum>\n    onMouseMove?: ArcMouseHandler<Datum>\n    onMouseLeave?: ArcMouseHandler<Datum>\n    transitionMode: ArcTransitionMode\n    component?: ArcComponent<Datum>\n}\n\nexport const ArcsLayer = <Datum extends DatumWithArcAndColor>({\n    center,\n    data,\n    arcGenerator,\n    borderWidth,\n    borderColor,\n    onClick,\n    onMouseEnter,\n    onMouseMove,\n    onMouseLeave,\n    transitionMode,\n    component = ArcShape,\n}: ArcsLayerProps<Datum>) => {\n    const theme = useTheme()\n    const getBorderColor = useInheritedColor<Datum>(borderColor, theme)\n\n    const { transition, interpolate } = useArcsTransition<\n        Datum,\n        {\n            opacity: number\n            color: string\n            borderColor: string\n        }\n    >(data, transitionMode, {\n        enter: datum => ({\n            opacity: 0,\n            color: datum.color,\n            borderColor: getBorderColor(datum),\n        }),\n        update: datum => ({\n            opacity: 1,\n            color: datum.color,\n            borderColor: getBorderColor(datum),\n        }),\n        leave: datum => ({\n            opacity: 0,\n            color: datum.color,\n            borderColor: getBorderColor(datum),\n        }),\n    })\n\n    const Arc: ArcComponent<Datum> = component\n\n    return (\n        <g transform={`translate(${center[0]},${center[1]})`}>\n            {transition((transitionProps, datum) => {\n                return createElement(Arc, {\n                    key: datum.id,\n                    datum,\n                    style: {\n                        ...transitionProps,\n                        borderWidth,\n                        path: interpolate(\n                            transitionProps.startAngle,\n                            transitionProps.endAngle,\n                            transitionProps.innerRadius,\n                            transitionProps.outerRadius,\n                            arcGenerator\n                        ),\n                    },\n                    onClick,\n                    onMouseEnter,\n                    onMouseMove,\n                    onMouseLeave,\n                })\n            })}\n        </g>\n    )\n}\n", "import { positionFromAngle, degreesToRadians } from '@nivo/core'\n\n/**\n * Computes the bounding box for a circle arc.\n *\n * Assumptions:\n *   - Anywhere the arc intersects an axis will be a max or a min.\n *   - If the arc doesn't intersect an axis, then the center\n *     will be one corner of the bounding rectangle,\n *     and this is the only case when it will be.\n *   - The only other possible extreme points of the sector to consider\n *     are the endpoints of the radii.\n *\n * This script was built within the help of this answer on stackoverflow:\n *   https://stackoverflow.com/questions/1336663/2d-bounding-box-of-a-sector\n */\nexport const computeArcBoundingBox = (\n    centerX: number,\n    centerY: number,\n    radius: number,\n    // in degrees\n    startAngle: number,\n    // in degrees\n    endAngle: number,\n    includeCenter = true\n) => {\n    let points: [number, number][] = []\n\n    const p0 = positionFromAngle(degreesToRadians(startAngle), radius)\n    points.push([p0.x, p0.y])\n\n    const p1 = positionFromAngle(degreesToRadians(endAngle), radius)\n    points.push([p1.x, p1.y])\n\n    for (\n        let angle = Math.round(Math.min(startAngle, endAngle));\n        angle <= Math.round(Math.max(startAngle, endAngle));\n        angle++\n    ) {\n        if (angle % 90 === 0) {\n            const p = positionFromAngle(degreesToRadians(angle), radius)\n            points.push([p.x, p.y])\n        }\n    }\n\n    points = points.map(([x, y]) => [centerX + x, centerY + y])\n    if (includeCenter) {\n        points.push([centerX, centerY])\n    }\n\n    const xs = points.map(([x]) => x)\n    const ys = points.map(([, y]) => y)\n\n    const x0 = Math.min(...xs)\n    const x1 = Math.max(...xs)\n\n    const y0 = Math.min(...ys)\n    const y1 = Math.max(...ys)\n\n    return {\n        points,\n        x: x0,\n        y: y0,\n        width: x1 - x0,\n        height: y1 - y0,\n    }\n}\n", "import { getDistance, getAngle } from '@nivo/core'\nimport { Arc } from './types'\n\n/**\n * Check if cursor is in given ring.\n */\nexport const isCursorInRing = (\n    centerX: number,\n    centerY: number,\n    radius: number,\n    innerRadius: number,\n    cursorX: number,\n    cursorY: number\n) => {\n    const distance = getDistance(cursorX, cursorY, centerX, centerY)\n\n    return distance < radius && distance > innerRadius\n}\n\n/**\n * Search for an arc being under cursor.\n */\nexport const findArcUnderCursor = <A extends Arc = Arc>(\n    centerX: number,\n    centerY: number,\n    radius: number,\n    innerRadius: number,\n    arcs: A[],\n    cursorX: number,\n    cursorY: number\n): A | undefined => {\n    if (!isCursorInRing(centerX, centerY, radius, innerRadius, cursorX, cursorY)) {\n        return undefined\n    }\n\n    const cursorAngle = getAngle(cursorX, cursorY, centerX, centerY)\n\n    return arcs.find(\n        ({ startAngle, endAngle }) => cursorAngle >= startAngle && cursorAngle < endAngle\n    )\n}\n", "import { useSpring } from '@react-spring/web'\nimport { useMotionConfig } from '@nivo/core'\nimport { Arc, ArcGenerator } from './types'\nimport { interpolateArc } from './interpolateArc'\n\n/**\n * This hook can be used to animate a single arc,\n * if you want to animate a group of arcs,\n * please have a look at the `useArcsTransition` hook.\n */\nexport const useAnimatedArc = (datumWithArc: { arc: Arc }, arcGenerator: ArcGenerator) => {\n    const { animate, config: springConfig } = useMotionConfig()\n\n    const animatedValues = useSpring({\n        startAngle: datumWithArc.arc.startAngle,\n        endAngle: datumWithArc.arc.endAngle,\n        innerRadius: datumWithArc.arc.innerRadius,\n        outerRadius: datumWithArc.arc.outerRadius,\n        config: springConfig,\n        immediate: !animate,\n    })\n\n    return {\n        ...animatedValues,\n        path: interpolateArc(\n            animatedValues.startAngle,\n            animatedValues.endAngle,\n            animatedValues.innerRadius,\n            animatedValues.outerRadius,\n            arcGenerator\n        ),\n    }\n}\n", "import { useMemo } from 'react'\nimport { arc as d3Arc } from 'd3-shape'\nimport { ArcGenerator, Arc } from './types'\n\n/**\n * Memoize a d3 arc generator.\n *\n * Please note that both inner/outer radius aren't static\n * and should come from the arc itself, while it requires\n * more props on the arcs, it provides more flexibility\n * because it's not limited to pie then but can also work\n * with charts such as sunbursts.\n */\nexport const useArcGenerator = ({\n    cornerRadius = 0,\n    padAngle = 0,\n}: {\n    cornerRadius?: number\n    padAngle?: number\n} = {}): ArcGenerator =>\n    useMemo(\n        () =>\n            d3Arc<Arc>()\n                .innerRadius(arc => arc.innerRadius)\n                .outerRadius(arc => arc.outerRadius)\n                .cornerRadius(cornerRadius)\n                .padAngle(padAngle),\n        [cornerRadius, padAngle]\n    )\n", "import { BoxLegendSvg } from '@nivo/legends'\nimport { CompletePieSvgProps, ComputedDatum, DatumId } from './types'\n\ninterface PieLegendsProps<RawDatum> {\n    width: number\n    height: number\n    legends: CompletePieSvgProps<RawDatum>['legends']\n    data: Omit<ComputedDatum<RawDatum>, 'arc'>[]\n    toggleSerie: (id: DatumId) => void\n}\n\nconst PieLegends = <RawDatum,>({\n    width,\n    height,\n    legends,\n    data,\n    toggleSerie,\n}: PieLegendsProps<RawDatum>) => {\n    return (\n        <>\n            {legends.map((legend, i) => (\n                <BoxLegendSvg\n                    key={i}\n                    {...legend}\n                    containerWidth={width}\n                    containerHeight={height}\n                    data={legend.data ?? data}\n                    toggleSerie={legend.toggleSerie ? toggleSerie : undefined}\n                />\n            ))}\n        </>\n    )\n}\n\nexport default PieLegends\n", "import { OrdinalColorScaleConfig } from '@nivo/colors'\nimport { ArcTransitionMode } from '@nivo/arcs'\nimport { PieTooltip } from './PieTooltip'\n\nexport const defaultProps = {\n    id: 'id',\n    value: 'value',\n    sortByValue: false,\n    innerRadius: 0,\n    padAngle: 0,\n    cornerRadius: 0,\n\n    layers: ['arcLinkLabels', 'arcs', 'arcLabels', 'legends'],\n\n    // layout\n    startAngle: 0,\n    endAngle: 360,\n    fit: true,\n    activeInnerRadiusOffset: 0,\n    activeOuterRadiusOffset: 0,\n\n    // border\n    borderWidth: 0,\n    borderColor: {\n        from: 'color',\n        modifiers: [['darker', 1]],\n    },\n\n    // arc labels\n    enableArcLabels: true,\n    arcLabel: 'formattedValue',\n    arcLabelsSkipAngle: 0,\n    arcLabelsRadiusOffset: 0.5,\n    arcLabelsTextColor: { theme: 'labels.text.fill' },\n\n    // arc link labels\n    enableArcLinkLabels: true,\n    arcLinkLabel: 'id',\n    arcLinkLabelsSkipAngle: 0,\n    arcLinkLabelsOffset: 0,\n    arcLinkLabelsDiagonalLength: 16,\n    arcLinkLabelsStraightLength: 24,\n    arcLinkLabelsThickness: 1,\n    arcLinkLabelsTextOffset: 6,\n    arcLinkLabelsTextColor: { theme: 'labels.text.fill' },\n    arcLinkLabelsColor: { theme: 'axis.ticks.line.stroke' },\n\n    colors: { scheme: 'nivo' } as unknown as OrdinalColorScaleConfig,\n    defs: [],\n    fill: [],\n\n    isInteractive: true,\n\n    animate: true,\n    motionConfig: 'gentle',\n    transitionMode: 'innerRadius' as ArcTransitionMode,\n\n    tooltip: PieTooltip,\n\n    legends: [],\n\n    role: 'img',\n\n    pixelRatio: typeof window !== 'undefined' ? window.devicePixelRatio ?? 1 : 1,\n}\n", "import { BasicTooltip } from '@nivo/tooltip'\nimport { ComputedDatum } from './types'\n\nexport const PieTooltip = <RawDatum,>({ datum }: { datum: ComputedDatum<RawDatum> }) => (\n    <BasicTooltip\n        id={datum.id}\n        value={datum.formattedValue}\n        enableChip={true}\n        color={datum.color}\n    />\n)\n\nexport default PieTooltip\n", "import { useCallback, useMemo, useState } from 'react'\nimport { pie as d3Pie } from 'd3-shape'\nimport { useArcGenerator, computeArcBoundingBox } from '@nivo/arcs'\nimport {\n    degreesToRadians,\n    radiansToDegrees,\n    useValueFormatter,\n    usePropertyAccessor,\n} from '@nivo/core'\nimport { OrdinalColorScaleConfig, useOrdinalColorScale } from '@nivo/colors'\nimport { defaultProps } from './props'\nimport { CompletePieSvgProps, ComputedDatum, DatumId, PieArc, PieCustomLayerProps } from './types'\n\ninterface MayHaveLabel {\n    label?: string | number\n}\n\n/**\n * Format data so that we get a consistent data structure.\n * It will also add the `formattedValue` and `color` property.\n */\nexport const useNormalizedData = <RawDatum extends MayHaveLabel>({\n    data,\n    id = defaultProps.id,\n    value = defaultProps.value,\n    valueFormat,\n    colors = defaultProps.colors as OrdinalColorScaleConfig<\n        Omit<ComputedDatum<RawDatum>, 'arc' | 'color' | 'fill'>\n    >,\n}: Pick<CompletePieSvgProps<RawDatum>, 'id' | 'value' | 'valueFormat' | 'colors'> & {\n    data: RawDatum[]\n}): Omit<ComputedDatum<RawDatum>, 'arc' | 'fill'>[] => {\n    const getId = usePropertyAccessor<RawDatum, DatumId>(id)\n    const getValue = usePropertyAccessor<RawDatum, number>(value)\n    const formatValue = useValueFormatter<number>(valueFormat)\n\n    const getColor = useOrdinalColorScale<Omit<ComputedDatum<RawDatum>, 'arc' | 'color' | 'fill'>>(\n        colors,\n        'id'\n    )\n\n    return useMemo(\n        () =>\n            data.map(datum => {\n                const datumId = getId(datum)\n                const datumValue = getValue(datum)\n\n                const normalizedDatum: Omit<ComputedDatum<RawDatum>, 'arc' | 'color' | 'fill'> = {\n                    id: datumId,\n                    label: datum.label ?? datumId,\n                    hidden: false,\n                    value: datumValue,\n                    formattedValue: formatValue(datumValue),\n                    data: datum,\n                }\n\n                return {\n                    ...normalizedDatum,\n                    color: getColor(normalizedDatum),\n                }\n            }),\n        [data, getId, getValue, formatValue, getColor]\n    )\n}\n\n/**\n * Compute arcs, which don't depend yet on radius.\n */\nexport const usePieArcs = <RawDatum>({\n    data,\n    startAngle,\n    endAngle,\n    innerRadius,\n    outerRadius,\n    padAngle,\n    sortByValue,\n    activeId,\n    activeInnerRadiusOffset,\n    activeOuterRadiusOffset,\n    hiddenIds,\n}: {\n    data: Omit<ComputedDatum<RawDatum>, 'arc' | 'fill'>[]\n    // in degrees\n    startAngle: number\n    // in degrees\n    endAngle: number\n    // in pixels\n    innerRadius: number\n    // in pixels\n    outerRadius: number\n    padAngle: number\n    sortByValue: boolean\n    activeId: null | DatumId\n    activeInnerRadiusOffset: number\n    activeOuterRadiusOffset: number\n    hiddenIds: DatumId[]\n}): {\n    dataWithArc: Omit<ComputedDatum<RawDatum>, 'fill'>[]\n    legendData: Omit<ComputedDatum<RawDatum>, 'arc' | 'fill'>[]\n} => {\n    const pie = useMemo(() => {\n        const innerPie = d3Pie<Omit<ComputedDatum<RawDatum>, 'arc' | 'fill'>>()\n            .value(d => d.value)\n            .startAngle(degreesToRadians(startAngle))\n            .endAngle(degreesToRadians(endAngle))\n            .padAngle(degreesToRadians(padAngle))\n\n        if (!sortByValue) {\n            innerPie.sortValues(null)\n        }\n\n        return innerPie\n    }, [startAngle, endAngle, padAngle, sortByValue])\n\n    return useMemo(() => {\n        const hiddenData = data.filter(item => !hiddenIds.includes(item.id))\n        const dataWithArc = pie(hiddenData).map(\n            (\n                arc: Omit<\n                    PieArc,\n                    'angle' | 'angleDeg' | 'innerRadius' | 'outerRadius' | 'thickness'\n                > & {\n                    data: Omit<ComputedDatum<RawDatum>, 'arc' | 'fill'>\n                }\n            ) => {\n                const angle = Math.abs(arc.endAngle - arc.startAngle)\n\n                return {\n                    ...arc.data,\n                    arc: {\n                        index: arc.index,\n                        startAngle: arc.startAngle,\n                        endAngle: arc.endAngle,\n                        innerRadius:\n                            activeId === arc.data.id\n                                ? innerRadius - activeInnerRadiusOffset\n                                : innerRadius,\n                        outerRadius:\n                            activeId === arc.data.id\n                                ? outerRadius + activeOuterRadiusOffset\n                                : outerRadius,\n                        thickness: outerRadius - innerRadius,\n                        padAngle: arc.padAngle,\n                        angle,\n                        angleDeg: radiansToDegrees(angle),\n                    },\n                }\n            }\n        )\n        const legendData = data.map(item => ({ ...item, hidden: hiddenIds.includes(item.id) }))\n\n        return { dataWithArc, legendData }\n    }, [\n        pie,\n        data,\n        hiddenIds,\n        activeId,\n        innerRadius,\n        activeInnerRadiusOffset,\n        outerRadius,\n        activeOuterRadiusOffset,\n    ])\n}\n\n/**\n * Compute pie layout using explicit radius/innerRadius,\n * expressed in pixels.\n */\nexport const usePie = <RawDatum>({\n    data,\n    radius,\n    innerRadius,\n    startAngle = defaultProps.startAngle,\n    endAngle = defaultProps.endAngle,\n    padAngle = defaultProps.padAngle,\n    sortByValue = defaultProps.sortByValue,\n    cornerRadius = defaultProps.cornerRadius,\n    activeInnerRadiusOffset = defaultProps.activeInnerRadiusOffset,\n    activeOuterRadiusOffset = defaultProps.activeOuterRadiusOffset,\n}: Pick<\n    Partial<CompletePieSvgProps<RawDatum>>,\n    | 'startAngle'\n    | 'endAngle'\n    | 'padAngle'\n    | 'sortByValue'\n    | 'cornerRadius'\n    | 'activeInnerRadiusOffset'\n    | 'activeOuterRadiusOffset'\n> & {\n    data: Omit<ComputedDatum<RawDatum>, 'arc'>[]\n    radius: number\n    innerRadius: number\n}) => {\n    const [activeId, setActiveId] = useState<DatumId | null>(null)\n    const [hiddenIds, setHiddenIds] = useState<DatumId[]>([])\n    const pieArcs = usePieArcs({\n        data,\n        startAngle,\n        endAngle,\n        innerRadius,\n        outerRadius: radius,\n        padAngle,\n        sortByValue,\n        activeId,\n        activeInnerRadiusOffset,\n        activeOuterRadiusOffset,\n        hiddenIds,\n    })\n\n    const toggleSerie = useCallback((id: DatumId) => {\n        setHiddenIds(state =>\n            state.indexOf(id) > -1 ? state.filter(item => item !== id) : [...state, id]\n        )\n    }, [])\n\n    const arcGenerator = useArcGenerator({ cornerRadius, padAngle: degreesToRadians(padAngle) })\n\n    return { ...pieArcs, arcGenerator, setActiveId, toggleSerie }\n}\n\n/**\n * Compute pie layout using a box to find radius/innerRadius,\n * expressed in ratio (0~1), can optionally use the `fit`\n * attribute to find the most space efficient layout.\n *\n * It also returns `centerX`/`centerY` as those can be altered\n * if `fit` is `true`.\n */\nexport const usePieFromBox = <RawDatum>({\n    data,\n    width,\n    height,\n    innerRadius: innerRadiusRatio = defaultProps.innerRadius,\n    startAngle = defaultProps.startAngle,\n    endAngle = defaultProps.endAngle,\n    padAngle = defaultProps.padAngle,\n    sortByValue = defaultProps.sortByValue,\n    cornerRadius = defaultProps.cornerRadius,\n    fit = defaultProps.fit,\n    activeInnerRadiusOffset = defaultProps.activeInnerRadiusOffset,\n    activeOuterRadiusOffset = defaultProps.activeOuterRadiusOffset,\n}: Pick<\n    CompletePieSvgProps<RawDatum>,\n    | 'width'\n    | 'height'\n    | 'innerRadius'\n    | 'startAngle'\n    | 'endAngle'\n    | 'padAngle'\n    | 'sortByValue'\n    | 'cornerRadius'\n    | 'fit'\n    | 'activeInnerRadiusOffset'\n    | 'activeOuterRadiusOffset'\n> & {\n    data: Omit<ComputedDatum<RawDatum>, 'arc'>[]\n}) => {\n    const [activeId, setActiveId] = useState<string | number | null>(null)\n    const [hiddenIds, setHiddenIds] = useState<DatumId[]>([])\n    const computedProps = useMemo(() => {\n        let radius = Math.min(width, height) / 2\n        let innerRadius = radius * Math.min(innerRadiusRatio, 1)\n\n        let centerX = width / 2\n        let centerY = height / 2\n\n        let boundingBox\n        if (fit) {\n            const { points, ...box } = computeArcBoundingBox(\n                centerX,\n                centerY,\n                radius,\n                startAngle - 90,\n                endAngle - 90\n            )\n            const ratio = Math.min(width / box.width, height / box.height)\n\n            const adjustedBox: {\n                width: number\n                height: number\n                x?: number\n                y?: number\n            } = {\n                width: box.width * ratio,\n                height: box.height * ratio,\n            }\n            adjustedBox.x = (width - adjustedBox.width) / 2\n            adjustedBox.y = (height - adjustedBox.height) / 2\n\n            centerX = ((centerX - box.x) / box.width) * box.width * ratio + adjustedBox.x\n            centerY = ((centerY - box.y) / box.height) * box.height * ratio + adjustedBox.y\n\n            boundingBox = { box, ratio, points }\n\n            radius = radius * ratio\n            innerRadius = innerRadius * ratio\n        }\n\n        return {\n            centerX,\n            centerY,\n            radius,\n            innerRadius,\n            debug: boundingBox,\n        }\n    }, [width, height, innerRadiusRatio, startAngle, endAngle, fit, cornerRadius])\n\n    const pieArcs = usePieArcs({\n        data,\n        startAngle,\n        endAngle,\n        innerRadius: computedProps.innerRadius,\n        outerRadius: computedProps.radius,\n        padAngle,\n        sortByValue,\n        activeId,\n        activeInnerRadiusOffset,\n        activeOuterRadiusOffset,\n        hiddenIds,\n    })\n\n    const toggleSerie = useCallback((id: DatumId) => {\n        setHiddenIds(state =>\n            state.indexOf(id) > -1 ? state.filter(item => item !== id) : [...state, id]\n        )\n    }, [])\n\n    const arcGenerator = useArcGenerator({\n        cornerRadius,\n        padAngle: degreesToRadians(padAngle),\n    })\n\n    return {\n        arcGenerator,\n        setActiveId,\n        toggleSerie,\n        ...pieArcs,\n        ...computedProps,\n    }\n}\n\n/**\n * Memoize the context to pass to custom layers.\n */\nexport const usePieLayerContext = <RawDatum>({\n    dataWithArc,\n    arcGenerator,\n    centerX,\n    centerY,\n    radius,\n    innerRadius,\n}: PieCustomLayerProps<RawDatum>): PieCustomLayerProps<RawDatum> =>\n    useMemo(\n        () => ({\n            dataWithArc,\n            arcGenerator,\n            centerX,\n            centerY,\n            radius,\n            innerRadius,\n        }),\n        [dataWithArc, arcGenerator, centerX, centerY, radius, innerRadius]\n    )\n", "import { createElement, useMemo } from 'react'\nimport * as React from 'react'\nimport { ArcGenerator, ArcsLayer } from '@nivo/arcs'\nimport { useTooltip } from '@nivo/tooltip'\nimport { ComputedDatum, CompletePieSvgProps } from './types'\n\ninterface ArcsProps<RawDatum> {\n    center: [number, number]\n    data: ComputedDatum<RawDatum>[]\n    arcGenerator: ArcGenerator\n    borderWidth: CompletePieSvgProps<RawDatum>['borderWidth']\n    borderColor: CompletePieSvgProps<RawDatum>['borderColor']\n    isInteractive: CompletePieSvgProps<RawDatum>['isInteractive']\n    onClick?: CompletePieSvgProps<RawDatum>['onClick']\n    onMouseEnter?: CompletePieSvgProps<RawDatum>['onMouseEnter']\n    onMouseMove?: CompletePieSvgProps<RawDatum>['onMouseMove']\n    onMouseLeave?: CompletePieSvgProps<RawDatum>['onMouseLeave']\n    setActiveId: (id: null | string | number) => void\n    tooltip: CompletePieSvgProps<RawDatum>['tooltip']\n    transitionMode: CompletePieSvgProps<RawDatum>['transitionMode']\n}\n\nexport const Arcs = <RawDatum,>({\n    center,\n    data,\n    arcGenerator,\n    borderWidth,\n    borderColor,\n    isInteractive,\n    onClick,\n    onMouseEnter,\n    onMouseMove,\n    onMouseLeave,\n    setActiveId,\n    tooltip,\n    transitionMode,\n}: ArcsProps<RawDatum>) => {\n    const { showTooltipFromEvent, hideTooltip } = useTooltip()\n\n    const handleClick = useMemo(() => {\n        if (!isInteractive) return undefined\n\n        return (datum: ComputedDatum<RawDatum>, event: React.MouseEvent<SVGPathElement>) => {\n            onClick?.(datum, event)\n        }\n    }, [isInteractive, onClick])\n\n    const handleMouseEnter = useMemo(() => {\n        if (!isInteractive) return undefined\n\n        return (datum: ComputedDatum<RawDatum>, event: React.MouseEvent<SVGPathElement>) => {\n            showTooltipFromEvent(createElement(tooltip, { datum }), event)\n            setActiveId(datum.id)\n            onMouseEnter?.(datum, event)\n        }\n    }, [isInteractive, showTooltipFromEvent, setActiveId, onMouseEnter, tooltip])\n\n    const handleMouseMove = useMemo(() => {\n        if (!isInteractive) return undefined\n\n        return (datum: ComputedDatum<RawDatum>, event: React.MouseEvent<SVGPathElement>) => {\n            showTooltipFromEvent(createElement(tooltip, { datum }), event)\n            onMouseMove?.(datum, event)\n        }\n    }, [isInteractive, showTooltipFromEvent, onMouseMove, tooltip])\n\n    const handleMouseLeave = useMemo(() => {\n        if (!isInteractive) return undefined\n\n        return (datum: ComputedDatum<RawDatum>, event: React.MouseEvent<SVGPathElement>) => {\n            hideTooltip()\n            setActiveId(null)\n            onMouseLeave?.(datum, event)\n        }\n    }, [isInteractive, hideTooltip, setActiveId, onMouseLeave])\n\n    return (\n        <ArcsLayer<ComputedDatum<RawDatum>>\n            center={center}\n            data={data}\n            arcGenerator={arcGenerator}\n            borderWidth={borderWidth}\n            borderColor={borderColor}\n            transitionMode={transitionMode}\n            onClick={handleClick}\n            onMouseEnter={handleMouseEnter}\n            onMouseMove={handleMouseMove}\n            onMouseLeave={handleMouseLeave}\n        />\n    )\n}\n", "import { ReactNode, Fragment, createElement } from 'react'\nimport {\n    // @ts-ignore\n    bindDefs,\n    useDimensions,\n    Container,\n    SvgWrapper,\n} from '@nivo/core'\nimport { ArcLabelsLayer, ArcLinkLabelsLayer } from '@nivo/arcs'\nimport { InheritedColorConfig } from '@nivo/colors'\nimport PieLegends from './PieLegends'\nimport { useNormalizedData, usePieFromBox, usePieLayerContext } from './hooks'\nimport { ComputedDatum, PieLayer, PieSvgProps, PieLayerId } from './types'\nimport { defaultProps } from './props'\nimport { Arcs } from './Arcs'\n\nconst InnerPie = <RawDatum,>({\n    data,\n    id = defaultProps.id,\n    value = defaultProps.value,\n    valueFormat,\n    sortByValue = defaultProps.sortByValue,\n\n    layers = defaultProps.layers as PieLayer<RawDatum>[],\n\n    startAngle = defaultProps.startAngle,\n    endAngle = defaultProps.endAngle,\n    padAngle = defaultProps.padAngle,\n    fit = defaultProps.fit,\n    innerRadius: innerRadiusRatio = defaultProps.innerRadius,\n    cornerRadius = defaultProps.cornerRadius,\n    activeInnerRadiusOffset = defaultProps.activeInnerRadiusOffset,\n    activeOuterRadiusOffset = defaultProps.activeOuterRadiusOffset,\n\n    width,\n    height,\n    margin: partialMargin,\n\n    colors = defaultProps.colors,\n\n    // border\n    borderWidth = defaultProps.borderWidth,\n    borderColor = defaultProps.borderColor as InheritedColorConfig<ComputedDatum<RawDatum>>,\n\n    // arc labels\n    enableArcLabels = defaultProps.enableArcLabels,\n    arcLabel = defaultProps.arcLabel,\n    arcLabelsSkipAngle = defaultProps.arcLabelsSkipAngle,\n    arcLabelsTextColor = defaultProps.arcLabelsTextColor,\n    arcLabelsRadiusOffset = defaultProps.arcLabelsRadiusOffset,\n    arcLabelsComponent,\n\n    // arc link labels\n    enableArcLinkLabels = defaultProps.enableArcLinkLabels,\n    arcLinkLabel = defaultProps.arcLinkLabel,\n    arcLinkLabelsSkipAngle = defaultProps.arcLinkLabelsSkipAngle,\n    arcLinkLabelsOffset = defaultProps.arcLinkLabelsOffset,\n    arcLinkLabelsDiagonalLength = defaultProps.arcLinkLabelsDiagonalLength,\n    arcLinkLabelsStraightLength = defaultProps.arcLinkLabelsStraightLength,\n    arcLinkLabelsThickness = defaultProps.arcLinkLabelsThickness,\n    arcLinkLabelsTextOffset = defaultProps.arcLinkLabelsTextOffset,\n    arcLinkLabelsTextColor = defaultProps.arcLinkLabelsTextColor,\n    arcLinkLabelsColor = defaultProps.arcLinkLabelsColor,\n    arcLinkLabelComponent,\n\n    // styling\n    defs = defaultProps.defs,\n    fill = defaultProps.fill,\n\n    // interactivity\n    isInteractive = defaultProps.isInteractive,\n    onClick,\n    onMouseEnter,\n    onMouseMove,\n    onMouseLeave,\n    tooltip = defaultProps.tooltip,\n\n    transitionMode = defaultProps.transitionMode,\n\n    legends = defaultProps.legends,\n    role = defaultProps.role,\n}: PieSvgProps<RawDatum>) => {\n    const { outerWidth, outerHeight, margin, innerWidth, innerHeight } = useDimensions(\n        width,\n        height,\n        partialMargin\n    )\n\n    const normalizedData = useNormalizedData<RawDatum>({\n        data,\n        id,\n        value,\n        valueFormat,\n        colors,\n    })\n\n    const {\n        dataWithArc,\n        legendData,\n        arcGenerator,\n        centerX,\n        centerY,\n        radius,\n        innerRadius,\n        setActiveId,\n        toggleSerie,\n    } = usePieFromBox<RawDatum>({\n        data: normalizedData,\n        width: innerWidth,\n        height: innerHeight,\n        fit,\n        innerRadius: innerRadiusRatio,\n        startAngle,\n        endAngle,\n        padAngle,\n        sortByValue,\n        cornerRadius,\n        activeInnerRadiusOffset,\n        activeOuterRadiusOffset,\n    })\n\n    const boundDefs = bindDefs(defs, dataWithArc, fill)\n\n    const layerById: Record<PieLayerId, ReactNode> = {\n        arcLinkLabels: null,\n        arcs: null,\n        arcLabels: null,\n        legends: null,\n    }\n\n    if (enableArcLinkLabels && layers.includes('arcLinkLabels')) {\n        layerById.arcLinkLabels = (\n            <ArcLinkLabelsLayer<ComputedDatum<RawDatum>>\n                key=\"arcLinkLabels\"\n                center={[centerX, centerY]}\n                data={dataWithArc}\n                label={arcLinkLabel}\n                skipAngle={arcLinkLabelsSkipAngle}\n                offset={arcLinkLabelsOffset}\n                diagonalLength={arcLinkLabelsDiagonalLength}\n                straightLength={arcLinkLabelsStraightLength}\n                strokeWidth={arcLinkLabelsThickness}\n                textOffset={arcLinkLabelsTextOffset}\n                textColor={arcLinkLabelsTextColor}\n                linkColor={arcLinkLabelsColor}\n                component={arcLinkLabelComponent}\n            />\n        )\n    }\n\n    if (layers.includes('arcs')) {\n        layerById.arcs = (\n            <Arcs<RawDatum>\n                key=\"arcs\"\n                center={[centerX, centerY]}\n                data={dataWithArc}\n                arcGenerator={arcGenerator}\n                borderWidth={borderWidth}\n                borderColor={borderColor}\n                isInteractive={isInteractive}\n                onClick={onClick}\n                onMouseEnter={onMouseEnter}\n                onMouseMove={onMouseMove}\n                onMouseLeave={onMouseLeave}\n                setActiveId={setActiveId}\n                tooltip={tooltip}\n                transitionMode={transitionMode}\n            />\n        )\n    }\n\n    if (enableArcLabels && layers.includes('arcLabels')) {\n        layerById.arcLabels = (\n            <ArcLabelsLayer<ComputedDatum<RawDatum>>\n                key=\"arcLabels\"\n                center={[centerX, centerY]}\n                data={dataWithArc}\n                label={arcLabel}\n                radiusOffset={arcLabelsRadiusOffset}\n                skipAngle={arcLabelsSkipAngle}\n                textColor={arcLabelsTextColor}\n                transitionMode={transitionMode}\n                component={arcLabelsComponent}\n            />\n        )\n    }\n\n    if (legends.length > 0 && layers.includes('legends')) {\n        layerById.legends = (\n            <PieLegends<RawDatum>\n                key=\"legends\"\n                width={innerWidth}\n                height={innerHeight}\n                data={legendData}\n                legends={legends}\n                toggleSerie={toggleSerie}\n            />\n        )\n    }\n\n    const layerContext = usePieLayerContext<RawDatum>({\n        dataWithArc,\n        arcGenerator,\n        centerX,\n        centerY,\n        radius,\n        innerRadius,\n    })\n\n    return (\n        <SvgWrapper\n            width={outerWidth}\n            height={outerHeight}\n            margin={margin}\n            defs={boundDefs}\n            role={role}\n        >\n            {layers.map((layer, i) => {\n                if (layerById[layer as PieLayerId] !== undefined) {\n                    return layerById[layer as PieLayerId]\n                }\n\n                if (typeof layer === 'function') {\n                    return <Fragment key={i}>{createElement(layer, layerContext)}</Fragment>\n                }\n\n                return null\n            })}\n        </SvgWrapper>\n    )\n}\n\nexport const Pie = <RawDatum,>({\n    isInteractive = defaultProps.isInteractive,\n    animate = defaultProps.animate,\n    motionConfig = defaultProps.motionConfig,\n    theme,\n    renderWrapper,\n    ...otherProps\n}: PieSvgProps<RawDatum>) => (\n    <Container\n        {...{\n            animate,\n            isInteractive,\n            motionConfig,\n            renderWrapper,\n            theme,\n        }}\n    >\n        <InnerPie<RawDatum> isInteractive={isInteractive} {...otherProps} />\n    </Container>\n)\n", "import { ResponsiveWrapper } from '@nivo/core'\nimport { Pie } from './Pie'\nimport { PieSvgProps } from './types'\n\nexport const ResponsivePie = <RawDatum,>(\n    props: Omit<PieSvgProps<RawDatum>, 'width' | 'height'>\n) => (\n    <ResponsiveWrapper>\n        {({ width, height }: { width: number; height: number }) => (\n            <Pie<RawDatum> width={width} height={height} {...props} />\n        )}\n    </ResponsiveWrapper>\n)\n", "import { createElement, useEffect, useMemo, useRef } from 'react'\nimport * as React from 'react'\nimport { getRelativeCursor, useDimensions, useTheme, Container } from '@nivo/core'\nimport { renderLegendToCanvas } from '@nivo/legends'\nimport { useInheritedColor, InheritedColorConfig } from '@nivo/colors'\nimport { useTooltip } from '@nivo/tooltip'\nimport {\n    Arc,\n    findArcUnderCursor,\n    useArcLabels,\n    drawCanvasArcLabels,\n    useArcLinkLabels,\n    drawCanvasArcLinkLabels,\n} from '@nivo/arcs'\nimport { useNormalizedData, usePieFromBox } from './hooks'\nimport { ComputedDatum, PieCanvasProps } from './types'\nimport { defaultProps } from './props'\n\nconst InnerPieCanvas = <RawDatum,>({\n    data,\n    id = defaultProps.id,\n    value = defaultProps.value,\n    valueFormat,\n    sortByValue = defaultProps.sortByValue,\n\n    startAngle = defaultProps.startAngle,\n    endAngle = defaultProps.endAngle,\n    padAngle = defaultProps.padAngle,\n    fit = defaultProps.fit,\n    innerRadius: innerRadiusRatio = defaultProps.innerRadius,\n    cornerRadius = defaultProps.cornerRadius,\n    activeInnerRadiusOffset = defaultProps.activeInnerRadiusOffset,\n    activeOuterRadiusOffset = defaultProps.activeOuterRadiusOffset,\n\n    width,\n    height,\n    margin: partialMargin,\n    pixelRatio = 1,\n\n    colors = defaultProps.colors,\n\n    // border\n    borderWidth = defaultProps.borderWidth,\n    borderColor = defaultProps.borderColor as InheritedColorConfig<ComputedDatum<RawDatum>>,\n\n    // arc labels\n    enableArcLabels = defaultProps.enableArcLabels,\n    arcLabel = defaultProps.arcLabel,\n    arcLabelsSkipAngle = defaultProps.arcLabelsSkipAngle,\n    arcLabelsTextColor = defaultProps.arcLabelsTextColor,\n    arcLabelsRadiusOffset = defaultProps.arcLabelsRadiusOffset,\n\n    // arc link labels\n    enableArcLinkLabels = defaultProps.enableArcLinkLabels,\n    arcLinkLabel = defaultProps.arcLinkLabel,\n    arcLinkLabelsSkipAngle = defaultProps.arcLinkLabelsSkipAngle,\n    arcLinkLabelsOffset = defaultProps.arcLinkLabelsOffset,\n    arcLinkLabelsDiagonalLength = defaultProps.arcLinkLabelsDiagonalLength,\n    arcLinkLabelsStraightLength = defaultProps.arcLinkLabelsStraightLength,\n    arcLinkLabelsThickness = defaultProps.arcLinkLabelsThickness,\n    arcLinkLabelsTextOffset = defaultProps.arcLinkLabelsTextOffset,\n    arcLinkLabelsTextColor = defaultProps.arcLinkLabelsTextColor,\n    arcLinkLabelsColor = defaultProps.arcLinkLabelsColor,\n\n    // interactivity\n    isInteractive = defaultProps.isInteractive,\n    onClick,\n    onMouseMove,\n    tooltip = defaultProps.tooltip,\n\n    legends = defaultProps.legends,\n}: PieCanvasProps<RawDatum>) => {\n    const canvasEl = useRef<HTMLCanvasElement | null>(null)\n    const theme = useTheme()\n\n    const { margin, innerWidth, innerHeight, outerWidth, outerHeight } = useDimensions(\n        width,\n        height,\n        partialMargin\n    )\n\n    const normalizedData = useNormalizedData<RawDatum>({\n        data,\n        id,\n        value,\n        valueFormat,\n        colors,\n    })\n\n    const { dataWithArc, arcGenerator, centerX, centerY, radius, innerRadius, setActiveId } =\n        usePieFromBox<RawDatum>({\n            data: normalizedData,\n            width: innerWidth,\n            height: innerHeight,\n            fit,\n            innerRadius: innerRadiusRatio,\n            startAngle,\n            endAngle,\n            padAngle,\n            sortByValue,\n            cornerRadius,\n            activeInnerRadiusOffset,\n            activeOuterRadiusOffset,\n        })\n\n    const getBorderColor = useInheritedColor<ComputedDatum<RawDatum>>(borderColor, theme)\n\n    const arcLabels = useArcLabels<ComputedDatum<RawDatum>>({\n        data: dataWithArc,\n        label: arcLabel,\n        skipAngle: arcLabelsSkipAngle,\n        offset: arcLabelsRadiusOffset,\n        textColor: arcLabelsTextColor,\n    })\n\n    const arcLinkLabels = useArcLinkLabels<ComputedDatum<RawDatum>>({\n        data: dataWithArc,\n        skipAngle: arcLinkLabelsSkipAngle,\n        offset: arcLinkLabelsOffset,\n        diagonalLength: arcLinkLabelsDiagonalLength,\n        straightLength: arcLinkLabelsStraightLength,\n        label: arcLinkLabel,\n        linkColor: arcLinkLabelsColor,\n        textOffset: arcLinkLabelsTextOffset,\n        textColor: arcLinkLabelsTextColor,\n    })\n\n    useEffect(() => {\n        if (!canvasEl.current) return\n\n        canvasEl.current.width = outerWidth * pixelRatio\n        canvasEl.current.height = outerHeight * pixelRatio\n\n        const ctx = canvasEl.current.getContext('2d')!\n\n        ctx.scale(pixelRatio, pixelRatio)\n\n        ctx.fillStyle = theme.background\n        ctx.fillRect(0, 0, outerWidth, outerHeight)\n\n        ctx.save()\n        ctx.translate(margin.left, margin.top)\n        arcGenerator.context(ctx)\n\n        ctx.save()\n        ctx.translate(centerX, centerY)\n\n        dataWithArc.forEach(arc => {\n            ctx.beginPath()\n            ctx.fillStyle = arc.color\n\n            ctx.strokeStyle = getBorderColor(arc)\n            ctx.lineWidth = borderWidth\n\n            arcGenerator(arc.arc)\n\n            ctx.fill()\n\n            if (borderWidth > 0) {\n                ctx.stroke()\n            }\n        })\n\n        if (enableArcLinkLabels === true) {\n            drawCanvasArcLinkLabels<ComputedDatum<RawDatum>>(\n                ctx,\n                arcLinkLabels,\n                theme,\n                arcLinkLabelsThickness\n            )\n        }\n\n        if (enableArcLabels === true) {\n            drawCanvasArcLabels<ComputedDatum<RawDatum>>(ctx, arcLabels, theme)\n        }\n\n        // legends assume a box rather than a center,\n        // that's why we restore previously saved position here.\n        ctx.restore()\n        legends.forEach(legend => {\n            renderLegendToCanvas(ctx, {\n                ...legend,\n                data: dataWithArc,\n                containerWidth: innerWidth,\n                containerHeight: innerHeight,\n                theme,\n            })\n        })\n    }, [\n        canvasEl,\n        innerWidth,\n        innerHeight,\n        outerWidth,\n        outerHeight,\n        margin.top,\n        margin.left,\n        pixelRatio,\n        centerX,\n        centerY,\n        arcGenerator,\n        dataWithArc,\n        getBorderColor,\n        enableArcLabels,\n        arcLabels,\n        enableArcLinkLabels,\n        arcLinkLabels,\n        arcLinkLabelsThickness,\n        legends,\n        theme,\n    ])\n\n    const arcs = useMemo(\n        () =>\n            dataWithArc.map(datum => ({\n                id: datum.id,\n                ...datum.arc,\n            })),\n        [dataWithArc]\n    )\n\n    const getArcFromMouse = (event: React.MouseEvent<HTMLCanvasElement>) => {\n        if (!canvasEl.current) return null\n\n        const [x, y] = getRelativeCursor(canvasEl.current, event)\n\n        const hoveredArc = findArcUnderCursor<Arc & { id: string | number }>(\n            margin.left + centerX,\n            margin.top + centerY,\n            radius,\n            innerRadius,\n            arcs,\n            x,\n            y\n        )\n\n        if (!hoveredArc) return null\n\n        return dataWithArc.find(datum => datum.id === hoveredArc.id)\n    }\n\n    const { showTooltipFromEvent, hideTooltip } = useTooltip()\n\n    const handleMouseHover = (event: React.MouseEvent<HTMLCanvasElement>) => {\n        const datum = getArcFromMouse(event)\n        if (datum) {\n            onMouseMove?.(datum, event)\n            setActiveId(datum.id)\n            showTooltipFromEvent(createElement(tooltip, { datum }), event)\n        } else {\n            setActiveId(null)\n            hideTooltip()\n        }\n    }\n\n    const handleMouseLeave = () => {\n        hideTooltip()\n    }\n\n    const handleClick = (event: React.MouseEvent<HTMLCanvasElement>) => {\n        if (!onClick) return\n\n        const arc = getArcFromMouse(event)\n        if (arc) {\n            onClick(arc, event)\n        }\n    }\n\n    return (\n        <canvas\n            ref={canvasEl}\n            width={outerWidth * pixelRatio}\n            height={outerHeight * pixelRatio}\n            style={{\n                width: outerWidth,\n                height: outerHeight,\n                cursor: isInteractive ? 'auto' : 'normal',\n            }}\n            onMouseEnter={isInteractive ? handleMouseHover : undefined}\n            onMouseMove={isInteractive ? handleMouseHover : undefined}\n            onMouseLeave={isInteractive ? handleMouseLeave : undefined}\n            onClick={isInteractive ? handleClick : undefined}\n        />\n    )\n}\n\nexport const PieCanvas = <RawDatum,>({\n    isInteractive = defaultProps.isInteractive,\n    theme,\n    renderWrapper,\n    ...otherProps\n}: PieCanvasProps<RawDatum>) => (\n    <Container {...{ isInteractive, renderWrapper, theme }}>\n        <InnerPieCanvas<RawDatum> isInteractive={isInteractive} {...otherProps} />\n    </Container>\n)\n", "import { ResponsiveWrapper } from '@nivo/core'\nimport { PieCanvas } from './PieCanvas'\nimport { PieCanvasProps } from './types'\n\nexport const ResponsivePieCanvas = <RawDatum,>(\n    props: Omit<PieCanvasProps<RawDatum>, 'width' | 'height'>\n) => (\n    <ResponsiveWrapper>\n        {({ width, height }: { width: number; height: number }) => (\n            <PieCanvas<RawDatum> width={width} height={height} {...props} />\n        )}\n    </ResponsiveWrapper>\n)\n"],
  "mappings": "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",
  "names": ["staticStyle", "pointerEvents", "ArcLabel", "n", "label", "style", "theme", "useTheme", "_jsx", "animated", "g", "transform", "opacity", "progress", "text", "textAnchor", "dominantBaseline", "labels", "fill", "textColor", "getNormalizedAngle", "angle", "normalizedAngle", "Math", "PI", "filterDataBySkipAngle", "data", "skipAngle", "filter", "datum", "abs", "radiansToDegrees", "arc", "endAngle", "startAngle", "arcTransitionModeById", "startAngle", "enter", "arc", "endAngle", "update", "leave", "middleAngle", "innerRadius", "outerRadius", "centerRadius", "pushIn", "pushOut", "useArcTransitionMode", "mode", "extraTransition", "useMemo", "transitionMode", "datum", "progress", "computeArcCenter", "offset", "angle", "midAngle", "Math", "PI", "radius", "positionFromAngle", "interpolateArcCenter", "startAngleValue", "endAngleValue", "innerRadiusValue", "outerRadiusValue", "to", "centroid", "x", "y", "useArcCentersTransition", "data", "extra", "a", "useMotionConfig", "animate", "springConfig", "config", "phases", "transition", "useTransition", "keys", "id", "initial", "from", "immediate", "interpolate", "useArcCenters", "t", "e", "i", "skipAngle", "o", "computeExtraProps", "filterDataBySkipAngle", "map", "position", "ArcLabelsLayer", "center", "labelAccessor", "label", "radiusOffset", "textColor", "component", "ArcLabel", "getLabel", "usePropertyAccessor", "theme", "useTheme", "getTextColor", "useInheritedColor", "filteredData", "filter", "abs", "radiansToDegrees", "Label", "_jsx", "transform", "transitionProps", "createElement", "key", "style", "drawCanvasArcLabels", "ctx", "labels", "textAlign", "textBaseline", "font", "text", "fontSize", "fontFamily", "forEach", "fillStyle", "fillText", "useArcLabels", "useCallback", "ArcLinkLabel", "n", "label", "style", "theme", "useTheme", "_jsxs", "animated", "g", "opacity", "_jsx", "path", "fill", "stroke", "linkColor", "strokeWidth", "thickness", "d", "text", "transform", "textPosition", "textAnchor", "dominantBaseline", "labels", "textColor", "computeArcLinkTextAnchor", "arc", "centerAngle", "getNormalizedAngle", "startAngle", "endAngle", "Math", "PI", "computeArcLink", "offset", "diagonalLength", "straightLength", "side", "point2", "point0", "positionFromAngle", "outerRadius", "point1", "x", "y", "points", "lineGenerator", "line", "interpolateLink", "startAngleValue", "endAngleValue", "innerRadiusValue", "outerRadiusValue", "offsetValue", "diagonalLengthValue", "straightLengthValue", "to", "innerRadius", "diagonalLengthAnimated", "straightLengthAnimated", "interpolateTextAnchor", "interpolateTextPosition", "textOffsetValue", "textOffset", "position", "useArcLinkLabelsTransition", "t", "data", "r", "skipAngle", "useMotionConfig", "animate", "springConfig", "config", "getLinkColor", "useInheritedColor", "getTextColor", "filteredData", "useMemo", "filterDataBySkipAngle", "transitionPhases", "enter", "datum", "update", "leave", "transition", "useTransition", "keys", "id", "initial", "from", "immediate", "ArcLinkLabelsLayer", "center", "labelAccessor", "component", "getLabel", "usePropertyAccessor", "Label", "transitionProps", "createElement", "key", "drawCanvasArcLinkLabels", "ctx", "textBaseline", "font", "fontSize", "fontFamily", "forEach", "fillStyle", "textAlign", "textPropsByEngine", "canvas", "align", "fillText", "beginPath", "strokeStyle", "lineWidth", "point", "index", "moveTo", "lineTo", "useArcLinks", "e", "i", "computeExtraProps", "links", "filter", "abs", "radiansToDegrees", "map", "link", "useArcLinkLabels", "useCallback", "ArcShape", "n", "datum", "style", "onClick", "onMouseEnter", "onMouseMove", "onMouseLeave", "handleClick", "useCallback", "event", "handleMouseEnter", "handleMouseMove", "handleMouseLeave", "_jsx", "animated", "path", "d", "opacity", "fill", "color", "stroke", "borderColor", "strokeWidth", "borderWidth", "undefined", "interpolateArc", "startAngleValue", "endAngleValue", "innerRadiusValue", "outerRadiusValue", "arcGenerator", "to", "startAngle", "endAngle", "innerRadius", "outerRadius", "Math", "max", "useArcsTransition", "data", "mode", "extra", "i", "useMotionConfig", "animate", "springConfig", "config", "phases", "useArcTransitionMode", "transition", "useTransition", "keys", "id", "initial", "update", "from", "enter", "leave", "immediate", "interpolate", "ArcsLayer", "t", "center", "transitionMode", "component", "theme", "useTheme", "getBorderColor", "useInheritedColor", "Arc", "transform", "transitionProps", "createElement", "key", "computeArcBoundingBox", "centerX", "centerY", "radius", "includeCenter", "points", "p0", "positionFromAngle", "degreesToRadians", "push", "x", "y", "p1", "angle", "round", "min", "p", "map", "e", "xs", "ys", "x0", "x1", "y0", "width", "height", "isCursorInRing", "cursorX", "cursorY", "distance", "getDistance", "findArcUnderCursor", "arcs", "cursorAngle", "getAngle", "find", "useArcGenerator", "t", "n", "e", "cornerRadius", "i", "padAngle", "useMemo", "d3Arc", "innerRadius", "arc", "outerRadius", "H", "PieLegends", "e", "width", "height", "legends", "data", "toggleSerie", "_jsx", "map", "legend", "i", "BoxLegendSvg", "containerWidth", "containerHeight", "undefined", "defaultProps", "id", "value", "sortByValue", "innerRadius", "padAngle", "cornerRadius", "layers", "startAngle", "endAngle", "fit", "activeInnerRadiusOffset", "activeOuterRadiusOffset", "borderWidth", "borderColor", "from", "modifiers", "enableArcLabels", "arcLabel", "arcLabelsSkipAngle", "arcLabelsRadiusOffset", "arcLabelsTextColor", "theme", "enableArcLinkLabels", "arcLinkLabel", "arcLinkLabelsSkipAngle", "arcLinkLabelsOffset", "arcLinkLabelsDiagonalLength", "arcLinkLabelsStraightLength", "arcLinkLabelsThickness", "arcLinkLabelsTextOffset", "arcLinkLabelsTextColor", "arcLinkLabelsColor", "colors", "scheme", "defs", "fill", "isInteractive", "animate", "motionConfig", "transitionMode", "tooltip", "datum", "BasicTooltip", "formattedValue", "enableChip", "color", "role", "pixelRatio", "window", "devicePixelRatio", "j", "useNormalizedData", "valueFormat", "getId", "usePropertyAccessor", "getValue", "formatValue", "useValueFormatter", "getColor", "useOrdinalColorScale", "useMemo", "datumId", "datumValue", "normalizedDatum", "label", "hidden", "usePieArcs", "outerRadius", "activeId", "hiddenIds", "pie", "innerPie", "d3Pie", "d", "degreesToRadians", "sortValues", "hiddenData", "filter", "item", "includes", "dataWithArc", "arc", "angle", "Math", "abs", "index", "thickness", "angleDeg", "radiansToDegrees", "legendData", "usePie", "radius", "useState", "setActiveId", "setHiddenIds", "pieArcs", "useCallback", "state", "indexOf", "D", "arcGenerator", "useArcGenerator", "usePieFromBox", "n", "innerRadiusRatio", "computedProps", "boundingBox", "min", "centerX", "centerY", "computeArcBoundingBox", "points", "box", "ratio", "adjustedBox", "x", "y", "debug", "usePieLayerContext", "Arcs", "center", "onClick", "onMouseEnter", "onMouseMove", "onMouseLeave", "useTooltip", "showTooltipFromEvent", "hideTooltip", "handleClick", "event", "handleMouseEnter", "createElement", "handleMouseMove", "handleMouseLeave", "ArcsLayer", "InnerPie", "partialMargin", "margin", "arcLabelsComponent", "arcLinkLabelComponent", "useDimensions", "outerWidth", "outerHeight", "innerWidth", "innerHeight", "normalizedData", "boundDefs", "bindDefs", "layerById", "arcLinkLabels", "arcs", "arcLabels", "ArcLinkLabelsLayer", "skipAngle", "offset", "diagonalLength", "straightLength", "strokeWidth", "textOffset", "textColor", "linkColor", "component", "ArcLabelsLayer", "radiusOffset", "length", "layerContext", "SvgWrapper", "layer", "Fragment", "Pie", "renderWrapper", "otherProps", "Container", "ResponsivePie", "props", "ResponsiveWrapper", "InnerPieCanvas", "N", "U", "canvasEl", "useRef", "useTheme", "getBorderColor", "useInheritedColor", "useArcLabels", "useArcLinkLabels", "useEffect", "current", "ctx", "getContext", "scale", "fillStyle", "background", "fillRect", "save", "translate", "left", "top", "context", "forEach", "beginPath", "strokeStyle", "lineWidth", "stroke", "drawCanvasArcLinkLabels", "drawCanvasArcLabels", "restore", "renderLegendToCanvas", "getArcFromMouse", "getRelativeCursor", "hoveredArc", "findArcUnderCursor", "find", "handleMouseHover", "ref", "style", "cursor", "PieCanvas", "ResponsivePieCanvas"]
}
