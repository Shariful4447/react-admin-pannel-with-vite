{
  "version": 3,
  "sources": ["../../lodash/_baseIsMatch.js", "../../lodash/_isStrictComparable.js", "../../lodash/_getMatchData.js", "../../lodash/_matchesStrictComparable.js", "../../lodash/_baseMatches.js", "../../lodash/_baseMatchesProperty.js", "../../lodash/_baseProperty.js", "../../lodash/_basePropertyDeep.js", "../../lodash/property.js", "../../lodash/_baseIteratee.js", "../../lodash/noop.js", "../../lodash/_createSet.js", "../../lodash/_baseUniq.js", "../../lodash/uniqBy.js", "../../lodash/uniq.js", "../../lodash/_baseForOwn.js", "../../lodash/_createBaseEach.js", "../../lodash/_baseEach.js", "../../lodash/_baseMap.js", "../../lodash/_baseSortBy.js", "../../lodash/_compareAscending.js", "../../lodash/_compareMultiple.js", "../../lodash/_baseOrderBy.js", "../../lodash/sortBy.js", "../../lodash/_baseIsDate.js", "../../lodash/isDate.js", "../../@nivo/scales/src/timeHelpers.ts", "../../@nivo/scales/src/linearScale.ts", "../../@nivo/scales/src/pointScale.ts", "../../@nivo/scales/src/bandScale.ts", "../../@nivo/scales/src/timeScale.ts", "../../@nivo/scales/src/logScale.ts", "../../@nivo/scales/src/symlogScale.ts", "../../@nivo/scales/src/compute.ts", "../../@nivo/scales/src/ticks.ts", "../../@nivo/axes/src/compute.ts", "../../@nivo/axes/src/components/AxisTick.tsx", "../../@nivo/axes/src/components/Axis.tsx", "../../@nivo/axes/src/props.ts", "../../@nivo/axes/src/components/Axes.tsx", "../../@nivo/axes/src/components/GridLine.tsx", "../../@nivo/axes/src/components/GridLines.tsx", "../../@nivo/axes/src/components/Grid.tsx", "../../@nivo/axes/src/canvas.ts"],
  "sourcesContent": ["var Stack = require('./_Stack'),\n    baseIsEqual = require('./_baseIsEqual');\n\n/** Used to compose bitmasks for value comparisons. */\nvar COMPARE_PARTIAL_FLAG = 1,\n    COMPARE_UNORDERED_FLAG = 2;\n\n/**\n * The base implementation of `_.isMatch` without support for iteratee shorthands.\n *\n * @private\n * @param {Object} object The object to inspect.\n * @param {Object} source The object of property values to match.\n * @param {Array} matchData The property names, values, and compare flags to match.\n * @param {Function} [customizer] The function to customize comparisons.\n * @returns {boolean} Returns `true` if `object` is a match, else `false`.\n */\nfunction baseIsMatch(object, source, matchData, customizer) {\n  var index = matchData.length,\n      length = index,\n      noCustomizer = !customizer;\n\n  if (object == null) {\n    return !length;\n  }\n  object = Object(object);\n  while (index--) {\n    var data = matchData[index];\n    if ((noCustomizer && data[2])\n          ? data[1] !== object[data[0]]\n          : !(data[0] in object)\n        ) {\n      return false;\n    }\n  }\n  while (++index < length) {\n    data = matchData[index];\n    var key = data[0],\n        objValue = object[key],\n        srcValue = data[1];\n\n    if (noCustomizer && data[2]) {\n      if (objValue === undefined && !(key in object)) {\n        return false;\n      }\n    } else {\n      var stack = new Stack;\n      if (customizer) {\n        var result = customizer(objValue, srcValue, key, object, source, stack);\n      }\n      if (!(result === undefined\n            ? baseIsEqual(srcValue, objValue, COMPARE_PARTIAL_FLAG | COMPARE_UNORDERED_FLAG, customizer, stack)\n            : result\n          )) {\n        return false;\n      }\n    }\n  }\n  return true;\n}\n\nmodule.exports = baseIsMatch;\n", "var isObject = require('./isObject');\n\n/**\n * Checks if `value` is suitable for strict equality comparisons, i.e. `===`.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` if suitable for strict\n *  equality comparisons, else `false`.\n */\nfunction isStrictComparable(value) {\n  return value === value && !isObject(value);\n}\n\nmodule.exports = isStrictComparable;\n", "var isStrictComparable = require('./_isStrictComparable'),\n    keys = require('./keys');\n\n/**\n * Gets the property names, values, and compare flags of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @returns {Array} Returns the match data of `object`.\n */\nfunction getMatchData(object) {\n  var result = keys(object),\n      length = result.length;\n\n  while (length--) {\n    var key = result[length],\n        value = object[key];\n\n    result[length] = [key, value, isStrictComparable(value)];\n  }\n  return result;\n}\n\nmodule.exports = getMatchData;\n", "/**\n * A specialized version of `matchesProperty` for source values suitable\n * for strict equality comparisons, i.e. `===`.\n *\n * @private\n * @param {string} key The key of the property to get.\n * @param {*} srcValue The value to match.\n * @returns {Function} Returns the new spec function.\n */\nfunction matchesStrictComparable(key, srcValue) {\n  return function(object) {\n    if (object == null) {\n      return false;\n    }\n    return object[key] === srcValue &&\n      (srcValue !== undefined || (key in Object(object)));\n  };\n}\n\nmodule.exports = matchesStrictComparable;\n", "var baseIsMatch = require('./_baseIsMatch'),\n    getMatchData = require('./_getMatchData'),\n    matchesStrictComparable = require('./_matchesStrictComparable');\n\n/**\n * The base implementation of `_.matches` which doesn't clone `source`.\n *\n * @private\n * @param {Object} source The object of property values to match.\n * @returns {Function} Returns the new spec function.\n */\nfunction baseMatches(source) {\n  var matchData = getMatchData(source);\n  if (matchData.length == 1 && matchData[0][2]) {\n    return matchesStrictComparable(matchData[0][0], matchData[0][1]);\n  }\n  return function(object) {\n    return object === source || baseIsMatch(object, source, matchData);\n  };\n}\n\nmodule.exports = baseMatches;\n", "var baseIsEqual = require('./_baseIsEqual'),\n    get = require('./get'),\n    hasIn = require('./hasIn'),\n    isKey = require('./_isKey'),\n    isStrictComparable = require('./_isStrictComparable'),\n    matchesStrictComparable = require('./_matchesStrictComparable'),\n    toKey = require('./_toKey');\n\n/** Used to compose bitmasks for value comparisons. */\nvar COMPARE_PARTIAL_FLAG = 1,\n    COMPARE_UNORDERED_FLAG = 2;\n\n/**\n * The base implementation of `_.matchesProperty` which doesn't clone `srcValue`.\n *\n * @private\n * @param {string} path The path of the property to get.\n * @param {*} srcValue The value to match.\n * @returns {Function} Returns the new spec function.\n */\nfunction baseMatchesProperty(path, srcValue) {\n  if (isKey(path) && isStrictComparable(srcValue)) {\n    return matchesStrictComparable(toKey(path), srcValue);\n  }\n  return function(object) {\n    var objValue = get(object, path);\n    return (objValue === undefined && objValue === srcValue)\n      ? hasIn(object, path)\n      : baseIsEqual(srcValue, objValue, COMPARE_PARTIAL_FLAG | COMPARE_UNORDERED_FLAG);\n  };\n}\n\nmodule.exports = baseMatchesProperty;\n", "/**\n * The base implementation of `_.property` without support for deep paths.\n *\n * @private\n * @param {string} key The key of the property to get.\n * @returns {Function} Returns the new accessor function.\n */\nfunction baseProperty(key) {\n  return function(object) {\n    return object == null ? undefined : object[key];\n  };\n}\n\nmodule.exports = baseProperty;\n", "var baseGet = require('./_baseGet');\n\n/**\n * A specialized version of `baseProperty` which supports deep paths.\n *\n * @private\n * @param {Array|string} path The path of the property to get.\n * @returns {Function} Returns the new accessor function.\n */\nfunction basePropertyDeep(path) {\n  return function(object) {\n    return baseGet(object, path);\n  };\n}\n\nmodule.exports = basePropertyDeep;\n", "var baseProperty = require('./_baseProperty'),\n    basePropertyDeep = require('./_basePropertyDeep'),\n    isKey = require('./_isKey'),\n    toKey = require('./_toKey');\n\n/**\n * Creates a function that returns the value at `path` of a given object.\n *\n * @static\n * @memberOf _\n * @since 2.4.0\n * @category Util\n * @param {Array|string} path The path of the property to get.\n * @returns {Function} Returns the new accessor function.\n * @example\n *\n * var objects = [\n *   { 'a': { 'b': 2 } },\n *   { 'a': { 'b': 1 } }\n * ];\n *\n * _.map(objects, _.property('a.b'));\n * // => [2, 1]\n *\n * _.map(_.sortBy(objects, _.property(['a', 'b'])), 'a.b');\n * // => [1, 2]\n */\nfunction property(path) {\n  return isKey(path) ? baseProperty(toKey(path)) : basePropertyDeep(path);\n}\n\nmodule.exports = property;\n", "var baseMatches = require('./_baseMatches'),\n    baseMatchesProperty = require('./_baseMatchesProperty'),\n    identity = require('./identity'),\n    isArray = require('./isArray'),\n    property = require('./property');\n\n/**\n * The base implementation of `_.iteratee`.\n *\n * @private\n * @param {*} [value=_.identity] The value to convert to an iteratee.\n * @returns {Function} Returns the iteratee.\n */\nfunction baseIteratee(value) {\n  // Don't store the `typeof` result in a variable to avoid a JIT bug in Safari 9.\n  // See https://bugs.webkit.org/show_bug.cgi?id=156034 for more details.\n  if (typeof value == 'function') {\n    return value;\n  }\n  if (value == null) {\n    return identity;\n  }\n  if (typeof value == 'object') {\n    return isArray(value)\n      ? baseMatchesProperty(value[0], value[1])\n      : baseMatches(value);\n  }\n  return property(value);\n}\n\nmodule.exports = baseIteratee;\n", "/**\n * This method returns `undefined`.\n *\n * @static\n * @memberOf _\n * @since 2.3.0\n * @category Util\n * @example\n *\n * _.times(2, _.noop);\n * // => [undefined, undefined]\n */\nfunction noop() {\n  // No operation performed.\n}\n\nmodule.exports = noop;\n", "var Set = require('./_Set'),\n    noop = require('./noop'),\n    setToArray = require('./_setToArray');\n\n/** Used as references for various `Number` constants. */\nvar INFINITY = 1 / 0;\n\n/**\n * Creates a set object of `values`.\n *\n * @private\n * @param {Array} values The values to add to the set.\n * @returns {Object} Returns the new set.\n */\nvar createSet = !(Set && (1 / setToArray(new Set([,-0]))[1]) == INFINITY) ? noop : function(values) {\n  return new Set(values);\n};\n\nmodule.exports = createSet;\n", "var SetCache = require('./_SetCache'),\n    arrayIncludes = require('./_arrayIncludes'),\n    arrayIncludesWith = require('./_arrayIncludesWith'),\n    cacheHas = require('./_cacheHas'),\n    createSet = require('./_createSet'),\n    setToArray = require('./_setToArray');\n\n/** Used as the size to enable large array optimizations. */\nvar LARGE_ARRAY_SIZE = 200;\n\n/**\n * The base implementation of `_.uniqBy` without support for iteratee shorthands.\n *\n * @private\n * @param {Array} array The array to inspect.\n * @param {Function} [iteratee] The iteratee invoked per element.\n * @param {Function} [comparator] The comparator invoked per element.\n * @returns {Array} Returns the new duplicate free array.\n */\nfunction baseUniq(array, iteratee, comparator) {\n  var index = -1,\n      includes = arrayIncludes,\n      length = array.length,\n      isCommon = true,\n      result = [],\n      seen = result;\n\n  if (comparator) {\n    isCommon = false;\n    includes = arrayIncludesWith;\n  }\n  else if (length >= LARGE_ARRAY_SIZE) {\n    var set = iteratee ? null : createSet(array);\n    if (set) {\n      return setToArray(set);\n    }\n    isCommon = false;\n    includes = cacheHas;\n    seen = new SetCache;\n  }\n  else {\n    seen = iteratee ? [] : result;\n  }\n  outer:\n  while (++index < length) {\n    var value = array[index],\n        computed = iteratee ? iteratee(value) : value;\n\n    value = (comparator || value !== 0) ? value : 0;\n    if (isCommon && computed === computed) {\n      var seenIndex = seen.length;\n      while (seenIndex--) {\n        if (seen[seenIndex] === computed) {\n          continue outer;\n        }\n      }\n      if (iteratee) {\n        seen.push(computed);\n      }\n      result.push(value);\n    }\n    else if (!includes(seen, computed, comparator)) {\n      if (seen !== result) {\n        seen.push(computed);\n      }\n      result.push(value);\n    }\n  }\n  return result;\n}\n\nmodule.exports = baseUniq;\n", "var baseIteratee = require('./_baseIteratee'),\n    baseUniq = require('./_baseUniq');\n\n/**\n * This method is like `_.uniq` except that it accepts `iteratee` which is\n * invoked for each element in `array` to generate the criterion by which\n * uniqueness is computed. The order of result values is determined by the\n * order they occur in the array. The iteratee is invoked with one argument:\n * (value).\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Array\n * @param {Array} array The array to inspect.\n * @param {Function} [iteratee=_.identity] The iteratee invoked per element.\n * @returns {Array} Returns the new duplicate free array.\n * @example\n *\n * _.uniqBy([2.1, 1.2, 2.3], Math.floor);\n * // => [2.1, 1.2]\n *\n * // The `_.property` iteratee shorthand.\n * _.uniqBy([{ 'x': 1 }, { 'x': 2 }, { 'x': 1 }], 'x');\n * // => [{ 'x': 1 }, { 'x': 2 }]\n */\nfunction uniqBy(array, iteratee) {\n  return (array && array.length) ? baseUniq(array, baseIteratee(iteratee, 2)) : [];\n}\n\nmodule.exports = uniqBy;\n", "var baseUniq = require('./_baseUniq');\n\n/**\n * Creates a duplicate-free version of an array, using\n * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\n * for equality comparisons, in which only the first occurrence of each element\n * is kept. The order of result values is determined by the order they occur\n * in the array.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Array\n * @param {Array} array The array to inspect.\n * @returns {Array} Returns the new duplicate free array.\n * @example\n *\n * _.uniq([2, 1, 2]);\n * // => [2, 1]\n */\nfunction uniq(array) {\n  return (array && array.length) ? baseUniq(array) : [];\n}\n\nmodule.exports = uniq;\n", "var baseFor = require('./_baseFor'),\n    keys = require('./keys');\n\n/**\n * The base implementation of `_.forOwn` without support for iteratee shorthands.\n *\n * @private\n * @param {Object} object The object to iterate over.\n * @param {Function} iteratee The function invoked per iteration.\n * @returns {Object} Returns `object`.\n */\nfunction baseForOwn(object, iteratee) {\n  return object && baseFor(object, iteratee, keys);\n}\n\nmodule.exports = baseForOwn;\n", "var isArrayLike = require('./isArrayLike');\n\n/**\n * Creates a `baseEach` or `baseEachRight` function.\n *\n * @private\n * @param {Function} eachFunc The function to iterate over a collection.\n * @param {boolean} [fromRight] Specify iterating from right to left.\n * @returns {Function} Returns the new base function.\n */\nfunction createBaseEach(eachFunc, fromRight) {\n  return function(collection, iteratee) {\n    if (collection == null) {\n      return collection;\n    }\n    if (!isArrayLike(collection)) {\n      return eachFunc(collection, iteratee);\n    }\n    var length = collection.length,\n        index = fromRight ? length : -1,\n        iterable = Object(collection);\n\n    while ((fromRight ? index-- : ++index < length)) {\n      if (iteratee(iterable[index], index, iterable) === false) {\n        break;\n      }\n    }\n    return collection;\n  };\n}\n\nmodule.exports = createBaseEach;\n", "var baseForOwn = require('./_baseForOwn'),\n    createBaseEach = require('./_createBaseEach');\n\n/**\n * The base implementation of `_.forEach` without support for iteratee shorthands.\n *\n * @private\n * @param {Array|Object} collection The collection to iterate over.\n * @param {Function} iteratee The function invoked per iteration.\n * @returns {Array|Object} Returns `collection`.\n */\nvar baseEach = createBaseEach(baseForOwn);\n\nmodule.exports = baseEach;\n", "var baseEach = require('./_baseEach'),\n    isArrayLike = require('./isArrayLike');\n\n/**\n * The base implementation of `_.map` without support for iteratee shorthands.\n *\n * @private\n * @param {Array|Object} collection The collection to iterate over.\n * @param {Function} iteratee The function invoked per iteration.\n * @returns {Array} Returns the new mapped array.\n */\nfunction baseMap(collection, iteratee) {\n  var index = -1,\n      result = isArrayLike(collection) ? Array(collection.length) : [];\n\n  baseEach(collection, function(value, key, collection) {\n    result[++index] = iteratee(value, key, collection);\n  });\n  return result;\n}\n\nmodule.exports = baseMap;\n", "/**\n * The base implementation of `_.sortBy` which uses `comparer` to define the\n * sort order of `array` and replaces criteria objects with their corresponding\n * values.\n *\n * @private\n * @param {Array} array The array to sort.\n * @param {Function} comparer The function to define sort order.\n * @returns {Array} Returns `array`.\n */\nfunction baseSortBy(array, comparer) {\n  var length = array.length;\n\n  array.sort(comparer);\n  while (length--) {\n    array[length] = array[length].value;\n  }\n  return array;\n}\n\nmodule.exports = baseSortBy;\n", "var isSymbol = require('./isSymbol');\n\n/**\n * Compares values to sort them in ascending order.\n *\n * @private\n * @param {*} value The value to compare.\n * @param {*} other The other value to compare.\n * @returns {number} Returns the sort order indicator for `value`.\n */\nfunction compareAscending(value, other) {\n  if (value !== other) {\n    var valIsDefined = value !== undefined,\n        valIsNull = value === null,\n        valIsReflexive = value === value,\n        valIsSymbol = isSymbol(value);\n\n    var othIsDefined = other !== undefined,\n        othIsNull = other === null,\n        othIsReflexive = other === other,\n        othIsSymbol = isSymbol(other);\n\n    if ((!othIsNull && !othIsSymbol && !valIsSymbol && value > other) ||\n        (valIsSymbol && othIsDefined && othIsReflexive && !othIsNull && !othIsSymbol) ||\n        (valIsNull && othIsDefined && othIsReflexive) ||\n        (!valIsDefined && othIsReflexive) ||\n        !valIsReflexive) {\n      return 1;\n    }\n    if ((!valIsNull && !valIsSymbol && !othIsSymbol && value < other) ||\n        (othIsSymbol && valIsDefined && valIsReflexive && !valIsNull && !valIsSymbol) ||\n        (othIsNull && valIsDefined && valIsReflexive) ||\n        (!othIsDefined && valIsReflexive) ||\n        !othIsReflexive) {\n      return -1;\n    }\n  }\n  return 0;\n}\n\nmodule.exports = compareAscending;\n", "var compareAscending = require('./_compareAscending');\n\n/**\n * Used by `_.orderBy` to compare multiple properties of a value to another\n * and stable sort them.\n *\n * If `orders` is unspecified, all values are sorted in ascending order. Otherwise,\n * specify an order of \"desc\" for descending or \"asc\" for ascending sort order\n * of corresponding values.\n *\n * @private\n * @param {Object} object The object to compare.\n * @param {Object} other The other object to compare.\n * @param {boolean[]|string[]} orders The order to sort by for each property.\n * @returns {number} Returns the sort order indicator for `object`.\n */\nfunction compareMultiple(object, other, orders) {\n  var index = -1,\n      objCriteria = object.criteria,\n      othCriteria = other.criteria,\n      length = objCriteria.length,\n      ordersLength = orders.length;\n\n  while (++index < length) {\n    var result = compareAscending(objCriteria[index], othCriteria[index]);\n    if (result) {\n      if (index >= ordersLength) {\n        return result;\n      }\n      var order = orders[index];\n      return result * (order == 'desc' ? -1 : 1);\n    }\n  }\n  // Fixes an `Array#sort` bug in the JS engine embedded in Adobe applications\n  // that causes it, under certain circumstances, to provide the same value for\n  // `object` and `other`. See https://github.com/jashkenas/underscore/pull/1247\n  // for more details.\n  //\n  // This also ensures a stable sort in V8 and other engines.\n  // See https://bugs.chromium.org/p/v8/issues/detail?id=90 for more details.\n  return object.index - other.index;\n}\n\nmodule.exports = compareMultiple;\n", "var arrayMap = require('./_arrayMap'),\n    baseGet = require('./_baseGet'),\n    baseIteratee = require('./_baseIteratee'),\n    baseMap = require('./_baseMap'),\n    baseSortBy = require('./_baseSortBy'),\n    baseUnary = require('./_baseUnary'),\n    compareMultiple = require('./_compareMultiple'),\n    identity = require('./identity'),\n    isArray = require('./isArray');\n\n/**\n * The base implementation of `_.orderBy` without param guards.\n *\n * @private\n * @param {Array|Object} collection The collection to iterate over.\n * @param {Function[]|Object[]|string[]} iteratees The iteratees to sort by.\n * @param {string[]} orders The sort orders of `iteratees`.\n * @returns {Array} Returns the new sorted array.\n */\nfunction baseOrderBy(collection, iteratees, orders) {\n  if (iteratees.length) {\n    iteratees = arrayMap(iteratees, function(iteratee) {\n      if (isArray(iteratee)) {\n        return function(value) {\n          return baseGet(value, iteratee.length === 1 ? iteratee[0] : iteratee);\n        }\n      }\n      return iteratee;\n    });\n  } else {\n    iteratees = [identity];\n  }\n\n  var index = -1;\n  iteratees = arrayMap(iteratees, baseUnary(baseIteratee));\n\n  var result = baseMap(collection, function(value, key, collection) {\n    var criteria = arrayMap(iteratees, function(iteratee) {\n      return iteratee(value);\n    });\n    return { 'criteria': criteria, 'index': ++index, 'value': value };\n  });\n\n  return baseSortBy(result, function(object, other) {\n    return compareMultiple(object, other, orders);\n  });\n}\n\nmodule.exports = baseOrderBy;\n", "var baseFlatten = require('./_baseFlatten'),\n    baseOrderBy = require('./_baseOrderBy'),\n    baseRest = require('./_baseRest'),\n    isIterateeCall = require('./_isIterateeCall');\n\n/**\n * Creates an array of elements, sorted in ascending order by the results of\n * running each element in a collection thru each iteratee. This method\n * performs a stable sort, that is, it preserves the original sort order of\n * equal elements. The iteratees are invoked with one argument: (value).\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Collection\n * @param {Array|Object} collection The collection to iterate over.\n * @param {...(Function|Function[])} [iteratees=[_.identity]]\n *  The iteratees to sort by.\n * @returns {Array} Returns the new sorted array.\n * @example\n *\n * var users = [\n *   { 'user': 'fred',   'age': 48 },\n *   { 'user': 'barney', 'age': 36 },\n *   { 'user': 'fred',   'age': 30 },\n *   { 'user': 'barney', 'age': 34 }\n * ];\n *\n * _.sortBy(users, [function(o) { return o.user; }]);\n * // => objects for [['barney', 36], ['barney', 34], ['fred', 48], ['fred', 30]]\n *\n * _.sortBy(users, ['user', 'age']);\n * // => objects for [['barney', 34], ['barney', 36], ['fred', 30], ['fred', 48]]\n */\nvar sortBy = baseRest(function(collection, iteratees) {\n  if (collection == null) {\n    return [];\n  }\n  var length = iteratees.length;\n  if (length > 1 && isIterateeCall(collection, iteratees[0], iteratees[1])) {\n    iteratees = [];\n  } else if (length > 2 && isIterateeCall(iteratees[0], iteratees[1], iteratees[2])) {\n    iteratees = [iteratees[0]];\n  }\n  return baseOrderBy(collection, baseFlatten(iteratees, 1), []);\n});\n\nmodule.exports = sortBy;\n", "var baseGetTag = require('./_baseGetTag'),\n    isObjectLike = require('./isObjectLike');\n\n/** `Object#toString` result references. */\nvar dateTag = '[object Date]';\n\n/**\n * The base implementation of `_.isDate` without Node.js optimizations.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a date object, else `false`.\n */\nfunction baseIsDate(value) {\n  return isObjectLike(value) && baseGetTag(value) == dateTag;\n}\n\nmodule.exports = baseIsDate;\n", "var baseIsDate = require('./_baseIsDate'),\n    baseUnary = require('./_baseUnary'),\n    nodeUtil = require('./_nodeUtil');\n\n/* Node.js helper references. */\nvar nodeIsDate = nodeUtil && nodeUtil.isDate;\n\n/**\n * Checks if `value` is classified as a `Date` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a date object, else `false`.\n * @example\n *\n * _.isDate(new Date);\n * // => true\n *\n * _.isDate('Mon April 23 2012');\n * // => false\n */\nvar isDate = nodeIsDate ? baseUnary(nodeIsDate) : baseIsDate;\n\nmodule.exports = isDate;\n", "import { timeParse, utcParse } from 'd3-time-format'\n\nexport const timePrecisions = [\n    'millisecond',\n    'second',\n    'minute',\n    'hour',\n    'day',\n    'month',\n    'year',\n] as const\n\nexport type TIME_PRECISION = typeof timePrecisions[number]\n\nexport const precisionCutOffs: ((date: Date) => void)[] = [\n    date => date.setMilliseconds(0),\n    date => date.setSeconds(0),\n    date => date.setMinutes(0),\n    date => date.setHours(0),\n    date => date.setDate(1),\n    date => date.setMonth(0),\n]\n\nexport const precisionCutOffsByType: Record<TIME_PRECISION, ((date: Date) => void)[]> = {\n    millisecond: [],\n    second: precisionCutOffs.slice(0, 1),\n    minute: precisionCutOffs.slice(0, 2),\n    hour: precisionCutOffs.slice(0, 3),\n    day: precisionCutOffs.slice(0, 4),\n    month: precisionCutOffs.slice(0, 5),\n    year: precisionCutOffs.slice(0, 6),\n}\n\nexport const createPrecisionMethod = (precision: TIME_PRECISION) => (date: Date) => {\n    precisionCutOffsByType[precision].forEach(cutOff => {\n        cutOff(date)\n    })\n\n    return date\n}\n\nexport const createDateNormalizer = ({\n    format = 'native',\n    precision = 'millisecond',\n    useUTC = true,\n}: {\n    format?: 'native' | string\n    precision?: TIME_PRECISION\n    useUTC?: boolean\n}) => {\n    const precisionFn = createPrecisionMethod(precision)\n\n    return (value: Date | string | undefined) => {\n        if (value === undefined) {\n            return value\n        }\n\n        if (format === 'native' || value instanceof Date) {\n            return precisionFn(value as Date)\n        }\n\n        const parseTime = useUTC ? utcParse(format) : timeParse(format)\n        return precisionFn(parseTime(value as string) as Date)\n    }\n}\n", "import { NumberValue, scaleLinear, ScaleLinear as D3ScaleLinear } from 'd3-scale'\nimport { ScaleLinearSpec, ScaleLinear, ComputedSerieAxis, ScaleAxis } from './types'\n\nexport const createLinearScale = <Output extends NumberValue>(\n    {\n        min = 0,\n        max = 'auto',\n        stacked = false,\n        reverse = false,\n        clamp = false,\n        nice = false,\n    }: ScaleLinearSpec,\n    data: ComputedSerieAxis<Output>,\n    size: number,\n    axis: ScaleAxis\n) => {\n    let minValue: NumberValue\n    if (min === 'auto') {\n        minValue = stacked === true ? data.minStacked ?? 0 : data.min\n    } else {\n        minValue = min\n    }\n\n    let maxValue: NumberValue\n    if (max === 'auto') {\n        maxValue = stacked === true ? data.maxStacked ?? 0 : data.max\n    } else {\n        maxValue = max\n    }\n\n    const scale = scaleLinear<number, Output>()\n        .rangeRound(axis === 'x' ? [0, size] : [size, 0])\n        .domain(reverse ? [maxValue, minValue] : [minValue, maxValue])\n        .clamp(clamp)\n\n    if (nice === true) scale.nice()\n    else if (typeof nice === 'number') scale.nice(nice)\n\n    return castLinearScale<number, Output>(scale, stacked)\n}\n\nexport const castLinearScale = <Range, Output>(\n    scale: D3ScaleLinear<Range, Output>,\n    stacked = false\n) => {\n    const typedScale = scale as unknown as ScaleLinear<number>\n    typedScale.type = 'linear'\n    typedScale.stacked = stacked\n\n    return typedScale\n}\n", "import { scalePoint, ScalePoint as D3ScalePoint } from 'd3-scale'\nimport { ComputedSerieAxis, ScalePoint, ScalePointSpec, StringValue } from './types'\n\nexport const createPointScale = <Input extends StringValue>(\n    _spec: ScalePointSpec,\n    data: ComputedSerieAxis<Input>,\n    size: number\n) => {\n    const scale = scalePoint<Input>().range([0, size]).domain(data.all)\n\n    const typedScale = scale as ScalePoint<Input>\n    typedScale.type = 'point'\n\n    return typedScale\n}\n\nexport const castPointScale = <Input extends StringValue>(scale: D3ScalePoint<Input>) => {\n    const typedScale = scale as ScalePoint<Input>\n    typedScale.type = 'point'\n\n    return typedScale\n}\n", "import { scaleBand, ScaleBand as D3ScaleBand } from 'd3-scale'\nimport { ComputedSerieAxis, ScaleBand, ScaleBandSpec, StringValue, ScaleAxis } from './types'\n\nexport const createBandScale = <Input extends StringValue>(\n    { round = true }: ScaleBandSpec,\n    data: ComputedSerieAxis<Input>,\n    size: number,\n    axis: ScaleAxis\n) => {\n    const scale = scaleBand<Input>()\n        .range(axis === 'x' ? [0, size] : [size, 0])\n        .domain(data.all)\n        .round(round)\n\n    return castBandScale<Input>(scale)\n}\n\nexport const castBandScale = <Input>(scale: D3ScaleBand<Input>) => {\n    const typedScale = scale as ScaleBand<Input>\n    typedScale.type = 'band'\n\n    return typedScale\n}\n", "import { NumberValue, scaleTime, scaleUtc } from 'd3-scale'\nimport { createDateNormalizer } from './timeHelpers'\nimport { ComputedSerieAxis, ScaleTime, ScaleTimeSpec } from './types'\n\nexport const createTimeScale = <Input extends Date | NumberValue>(\n    {\n        format = 'native',\n        precision = 'millisecond',\n        min = 'auto',\n        max = 'auto',\n        useUTC = true,\n        nice = false,\n    }: ScaleTimeSpec,\n    data: ComputedSerieAxis<string | Date>,\n    size: number\n) => {\n    const normalize = createDateNormalizer({ format, precision, useUTC })\n\n    let minValue: Date | undefined\n    if (min === 'auto') {\n        minValue = normalize(data.min)\n    } else if (format !== 'native') {\n        minValue = normalize(min)\n    } else {\n        minValue = min as Date\n    }\n\n    let maxValue: Date | undefined\n    if (max === 'auto') {\n        maxValue = normalize(data.max)\n    } else if (format !== 'native') {\n        maxValue = normalize(max)\n    } else {\n        maxValue = max as Date\n    }\n\n    const scale = useUTC ? scaleUtc() : scaleTime()\n\n    scale.range([0, size])\n\n    if (minValue && maxValue) scale.domain([minValue, maxValue])\n\n    if (nice === true) scale.nice()\n    else if (typeof nice === 'object' || typeof nice === 'number') scale.nice(nice)\n\n    const typedScale = scale as unknown as ScaleTime<Input>\n\n    typedScale.type = 'time'\n    typedScale.useUTC = useUTC\n\n    return typedScale\n}\n", "import { scaleLog } from 'd3-scale'\nimport { ComputedSerieAxis, ScaleAxis, ScaleLog, ScaleLogSpec } from './types'\n\nexport const createLogScale = (\n    { base = 10, min = 'auto', max = 'auto' }: ScaleLogSpec,\n    data: ComputedSerieAxis<number>,\n    size: number,\n    axis: ScaleAxis\n) => {\n    const hasZero = data.all.some(v => v === 0)\n    if (hasZero) {\n        throw new Error(`a log scale domain must not include or cross zero`)\n    }\n\n    let sign: number\n    let hasMixedSign = false\n    data.all\n        .filter(v => v != null)\n        .forEach(v => {\n            if (hasMixedSign) return\n            if (sign === undefined) {\n                sign = Math.sign(v)\n            } else if (Math.sign(v) !== sign) {\n                hasMixedSign = true\n            }\n        })\n\n    if (hasMixedSign) {\n        throw new Error(`a log scale domain must be strictly-positive or strictly-negative`)\n    }\n\n    let minValue: number\n    if (min === 'auto') {\n        minValue = data.min\n    } else {\n        minValue = min\n    }\n\n    let maxValue: number\n    if (max === 'auto') {\n        maxValue = data.max\n    } else {\n        maxValue = max\n    }\n\n    const scale = scaleLog<number, number>()\n        .domain([minValue, maxValue])\n        .rangeRound(axis === 'x' ? [0, size] : [size, 0])\n        .base(base)\n        .nice()\n\n    const typedScale = scale as ScaleLog\n    typedScale.type = 'log'\n\n    return typedScale\n}\n", "import { scaleSymlog } from 'd3-scale'\nimport { ComputedSerieAxis, ScaleAxis, ScaleSymlog, ScaleSymlogSpec } from './types'\n\nexport const createSymlogScale = (\n    { constant = 1, min = 'auto', max = 'auto', reverse = false }: ScaleSymlogSpec,\n    data: ComputedSerieAxis<number>,\n    size: number,\n    axis: ScaleAxis\n) => {\n    let minValue: number\n    if (min === 'auto') {\n        minValue = data.min\n    } else {\n        minValue = min\n    }\n\n    let maxValue: number\n    if (max === 'auto') {\n        maxValue = data.max\n    } else {\n        maxValue = max\n    }\n\n    const scale = scaleSymlog<number, number>()\n        .constant(constant)\n        .rangeRound(axis === 'x' ? [0, size] : [size, 0])\n        .nice()\n\n    if (reverse === true) scale.domain([maxValue, minValue])\n    else scale.domain([minValue, maxValue])\n\n    const typedScale = scale as ScaleSymlog\n    typedScale.type = 'symlog'\n\n    return typedScale\n}\n", "import uniq from 'lodash/uniq'\nimport uniqBy from 'lodash/uniqBy'\nimport sortBy from 'lodash/sortBy'\nimport last from 'lodash/last'\nimport isDate from 'lodash/isDate'\nimport { createDateNormalizer } from './timeHelpers'\nimport { ScaleAxis, ScaleSpec, ScaleValue, SerieAxis, ComputedSerieAxis } from './types'\nimport { createLinearScale } from './linearScale'\nimport { createPointScale } from './pointScale'\nimport { createBandScale } from './bandScale'\nimport { createTimeScale } from './timeScale'\nimport { createLogScale } from './logScale'\nimport { createSymlogScale } from './symlogScale'\n\ntype XY = ReturnType<typeof generateSeriesXY>\n\ntype StackedXY = {\n    [K in keyof XY]: XY[K] & {\n        maxStacked: number\n        minStacked: number\n    }\n}\n\ninterface SerieDatum {\n    x: number | string | Date\n    // only numbers can be stacked\n    xStacked?: number | null\n    y: number | string | Date\n    // only numbers can be stacked\n    yStacked?: number | null\n}\n\ntype Serie<S = never, D extends SerieDatum = SerieDatum> = S & {\n    data: D[]\n}\n\ntype NestedSerie<S = never, D extends SerieDatum = SerieDatum> = S & {\n    data: {\n        data: D\n    }[]\n}\n\nexport type ComputedSerie<S = never, D extends SerieDatum = SerieDatum> = S & {\n    data: {\n        data: D\n        position: {\n            x: number | null\n            y: number | null\n        }\n    }[]\n}\n\ntype Compare = <T>(a: T, b: T) => boolean\n\nexport const getOtherAxis = (axis: ScaleAxis): ScaleAxis => (axis === 'x' ? 'y' : 'x')\n\nexport const compareValues = (a: string | number, b: string | number) => a === b\nexport const compareDateValues = (a: Date, b: Date) => a.getTime() === b.getTime()\n\nexport function computeScale<Input extends ScaleValue>(\n    spec: ScaleSpec,\n    data: ComputedSerieAxis<any>,\n    size: number,\n    axis: ScaleAxis\n) {\n    switch (spec.type) {\n        case 'linear':\n            return createLinearScale(spec, data, size, axis)\n        case 'point':\n            return createPointScale<Input>(spec, data, size)\n        case 'band':\n            return createBandScale<Input>(spec, data, size, axis)\n        case 'time':\n            return createTimeScale(spec, data, size)\n        case 'log':\n            return createLogScale(spec, data, size, axis)\n        case 'symlog':\n            return createSymlogScale(spec, data, size, axis)\n        default:\n            throw new Error('invalid scale spec')\n    }\n}\n\n/**\n * Convert serie data to have the original data stored in a nested prop.\n *\n * We do this in order to avoid conflicts between raw & computed properties.\n * <- { data: { x: 1, y: 3 }[] }\n * -> { data: { data: { x: 1, y: 3 } }[] }\n */\nconst nestSerieData = <S = never, D extends SerieDatum = SerieDatum>(\n    serie: Serie<S, D>\n): NestedSerie<S, D> => ({\n    ...serie,\n    data: serie.data.map(d => ({ data: { ...d } })),\n})\n\nconst getDatumAxisPosition = <D extends SerieDatum = SerieDatum>(\n    datum: { data: D },\n    axis: ScaleAxis,\n    scale: any\n): number | null => {\n    if ('stacked' in scale && scale.stacked) {\n        const stackedValue = datum.data[axis === 'x' ? 'xStacked' : 'yStacked']\n        if (stackedValue === null || stackedValue === undefined) {\n            return null\n        }\n\n        return scale(stackedValue)\n    }\n\n    return scale(datum.data[axis]) ?? null\n}\n\n/**\n * Compute x/y d3 scales from an array of data series, and scale specifications.\n *\n * We use generics as it's not uncommon to have extra properties such as an id\n * added to the series, or extra props on data, in such case, you should override\n * the default types.\n */\nexport const computeXYScalesForSeries = <S = never, D extends SerieDatum = SerieDatum>(\n    series: Serie<S, D>[],\n    xScaleSpec: ScaleSpec,\n    yScaleSpec: ScaleSpec,\n    width: number,\n    height: number\n) => {\n    // first nest series to avoid property conflicts\n    const nestedSeries = series.map(serie => nestSerieData<S, D>(serie))\n\n    // then compute data for each axis: all, min, max values\n    const xy = generateSeriesXY<S, D>(nestedSeries, xScaleSpec, yScaleSpec)\n\n    // stack x values depending on xScale\n    if ('stacked' in xScaleSpec && xScaleSpec.stacked === true) {\n        stackX<S, D>(xy as StackedXY, nestedSeries)\n    }\n\n    // stack y values depending on yScale\n    if ('stacked' in yScaleSpec && yScaleSpec.stacked === true) {\n        stackY<S, D>(xy as StackedXY, nestedSeries)\n    }\n\n    // computes scales\n    const xScale = computeScale<D['x']>(xScaleSpec, xy.x, width, 'x')\n    const yScale = computeScale<D['y']>(yScaleSpec, xy.y, height, 'y')\n\n    // assign position to each datum in every scale\n    const computedSeries: ComputedSerie<S, D>[] = nestedSeries.map(serie => ({\n        ...serie,\n        data: serie.data.map(datum => ({\n            ...datum,\n            position: {\n                x: getDatumAxisPosition(datum, 'x', xScale),\n                y: getDatumAxisPosition(datum, 'y', yScale),\n            },\n        })),\n    }))\n\n    return {\n        ...xy,\n        series: computedSeries,\n        xScale,\n        yScale,\n    }\n}\n\nexport const generateSeriesXY = <S = never, D extends SerieDatum = SerieDatum>(\n    series: NestedSerie<S, D>[],\n    xScaleSpec: ScaleSpec,\n    yScaleSpec: ScaleSpec\n) => ({\n    x: generateSeriesAxis<'x', D['x']>(series, 'x', xScaleSpec),\n    y: generateSeriesAxis<'y', D['y']>(series, 'y', yScaleSpec),\n})\n\n/**\n * Normalize data according to scale type, (time => Date, linear => Number)\n * compute sorted unique values and min/max.\n */\nexport const generateSeriesAxis = <Axis extends ScaleAxis, Value extends ScaleValue>(\n    series: SerieAxis<Axis, Value>,\n    axis: Axis,\n    scaleSpec: ScaleSpec,\n    {\n        getValue = d => d.data[axis],\n        setValue = (d, v) => {\n            d.data[axis] = v\n        },\n    }: {\n        getValue?: (d: { data: Record<Axis, Value | null> }) => Value | null\n        setValue?: (d: { data: Record<Axis, Value | null> }, v: Value) => void\n    } = {}\n) => {\n    if (scaleSpec.type === 'linear') {\n        series.forEach(serie => {\n            serie.data.forEach(d => {\n                const value = getValue(d)\n\n                if (value) {\n                    setValue(d, parseFloat(String(value)) as unknown as Value)\n                }\n            })\n        })\n    } else if (scaleSpec.type === 'time' && scaleSpec.format !== 'native') {\n        // `native` means we already have Date instances,\n        // otherwise we have to convert the values to Date.\n        const parseTime = createDateNormalizer(scaleSpec)\n\n        series.forEach(serie => {\n            serie.data.forEach(d => {\n                const value = getValue(d)\n\n                if (value) {\n                    setValue(d, parseTime(value as Date) as unknown as Value)\n                }\n            })\n        })\n    }\n\n    const values: unknown[] = []\n\n    series.forEach(serie => {\n        serie.data.forEach(d => {\n            values.push(getValue(d))\n        })\n    })\n\n    switch (scaleSpec.type) {\n        case 'linear': {\n            const all = sortBy(\n                // filer null values to deal with holes in linechart\n                uniq(values as number[]).filter(v => v !== null),\n                v => v\n            )\n\n            return { all, min: Math.min(...all), max: Math.max(...all) }\n        }\n        case 'time': {\n            const all = uniqBy(values as Date[], v => v.getTime())\n                .slice(0)\n                .sort((a, b) => b.getTime() - a.getTime())\n                .reverse()\n\n            return { all, min: all[0], max: last(all) }\n        }\n        default: {\n            const all = uniq(values)\n\n            return { all, min: all[0], max: last(all) }\n        }\n    }\n}\n\nexport const stackAxis = <S = never, D extends SerieDatum = SerieDatum>(\n    axis: ScaleAxis,\n    xy: StackedXY,\n    series: NestedSerie<S, D>[]\n) => {\n    const otherAxis = getOtherAxis(axis)\n    const all: number[] = []\n\n    xy[otherAxis].all.forEach(v => {\n        const compare = (isDate(v) ? compareDateValues : compareValues) as Compare\n        const stack: Array<number | null> = []\n\n        series.forEach(serie => {\n            const datum = serie.data.find(d => compare(d.data[otherAxis], v))\n            let value = null\n            let stackValue = null\n\n            if (datum !== undefined) {\n                // stacked values only support numbers\n                value = datum.data[axis] as number\n                if (value !== null) {\n                    const head = last(stack)\n                    if (head === undefined) {\n                        stackValue = value\n                    } else if (head !== null) {\n                        stackValue = head + value\n                    }\n                }\n\n                datum.data[axis === 'x' ? 'xStacked' : 'yStacked'] = stackValue\n            }\n\n            stack.push(stackValue)\n\n            if (stackValue !== null) {\n                all.push(stackValue)\n            }\n        })\n    })\n\n    xy[axis].minStacked = Math.min(...all)\n    xy[axis].maxStacked = Math.max(...all)\n}\n\nconst stackX = <S = never, D extends SerieDatum = SerieDatum>(\n    xy: StackedXY,\n    series: NestedSerie<S, D>[]\n) => stackAxis<S, D>('x', xy, series)\n\nconst stackY = <S = never, D extends SerieDatum = SerieDatum>(\n    xy: StackedXY,\n    series: NestedSerie<S, D>[]\n) => stackAxis<S, D>('y', xy, series)\n", "import {\n    CountableTimeInterval,\n    timeMillisecond,\n    utcMillisecond,\n    timeSecond,\n    utcSecond,\n    timeMinute,\n    utcMinute,\n    timeHour,\n    utcHour,\n    timeWeek,\n    utcWeek,\n    timeSunday,\n    utcSunday,\n    timeMonday,\n    utcMonday,\n    timeTuesday,\n    utcTuesday,\n    timeWednesday,\n    utcWednesday,\n    timeThursday,\n    utcThursday,\n    timeFriday,\n    utcFriday,\n    timeSaturday,\n    utcSaturday,\n    timeMonth,\n    utcMonth,\n    timeYear,\n    utcYear,\n    timeInterval,\n} from 'd3-time'\nimport { ScaleValue, TicksSpec, AnyScale, ScaleWithBandwidth } from './types'\n\nexport const centerScale = <Value>(scale: ScaleWithBandwidth) => {\n    const bandwidth = scale.bandwidth()\n\n    if (bandwidth === 0) return scale\n\n    let offset = bandwidth / 2\n    if (scale.round()) {\n        offset = Math.round(offset)\n    }\n\n    return <T extends Value>(d: T) => (scale(d) ?? 0) + offset\n}\n\nconst timeDay = timeInterval(\n    date => date.setHours(0, 0, 0, 0),\n    (date, step) => date.setDate(date.getDate() + step),\n    (start, end) => (end.getTime() - start.getTime()) / 864e5,\n    date => Math.floor(date.getTime() / 864e5)\n)\n\nconst utcDay = timeInterval(\n    date => date.setUTCHours(0, 0, 0, 0),\n    (date, step) => date.setUTCDate(date.getUTCDate() + step),\n    (start, end) => (end.getTime() - start.getTime()) / 864e5,\n    date => Math.floor(date.getTime() / 864e5)\n)\n\nconst timeByType: Record<string, [CountableTimeInterval, CountableTimeInterval]> = {\n    millisecond: [timeMillisecond, utcMillisecond],\n    second: [timeSecond, utcSecond],\n    minute: [timeMinute, utcMinute],\n    hour: [timeHour, utcHour],\n    day: [timeDay, utcDay],\n    week: [timeWeek, utcWeek],\n    sunday: [timeSunday, utcSunday],\n    monday: [timeMonday, utcMonday],\n    tuesday: [timeTuesday, utcTuesday],\n    wednesday: [timeWednesday, utcWednesday],\n    thursday: [timeThursday, utcThursday],\n    friday: [timeFriday, utcFriday],\n    saturday: [timeSaturday, utcSaturday],\n    month: [timeMonth, utcMonth],\n    year: [timeYear, utcYear],\n}\n\nconst timeTypes = Object.keys(timeByType)\nconst timeIntervalRegexp = new RegExp(`^every\\\\s*(\\\\d+)?\\\\s*(${timeTypes.join('|')})s?$`, 'i')\n\nconst isInteger = (value: unknown): value is number =>\n    typeof value === 'number' && isFinite(value) && Math.floor(value) === value\n\nexport const getScaleTicks = <Value extends ScaleValue>(\n    scale: AnyScale,\n    spec?: TicksSpec<Value>\n) => {\n    // specific values\n    if (Array.isArray(spec)) {\n        return spec\n    }\n\n    if (typeof spec === 'string' && 'useUTC' in scale) {\n        // time interval\n        const matches = spec.match(timeIntervalRegexp)\n\n        if (matches) {\n            const [, amount, type] = matches\n            // UTC is used as it's more predictable\n            // however local time could be used too\n            // let's see how it fits users' requirements\n            const timeType = timeByType[type][scale.useUTC ? 1 : 0]\n\n            if (type === 'day') {\n                const [start, originalStop] = scale.domain()\n                const stop = new Date(originalStop)\n\n                // Set range to include last day in the domain since `interval.range` function is exclusive stop\n                stop.setDate(stop.getDate() + 1)\n\n                return timeType.every(Number(amount ?? 1))?.range(start, stop) ?? []\n            }\n\n            if (amount === undefined) {\n                return scale.ticks(timeType)\n            }\n\n            const interval = timeType.every(Number(amount))\n\n            if (interval) {\n                return scale.ticks(interval)\n            }\n        }\n\n        throw new Error(`Invalid tickValues: ${spec}`)\n    }\n\n    // continuous scales\n    if ('ticks' in scale) {\n        // default behaviour\n        if (spec === undefined) {\n            return scale.ticks()\n        }\n\n        // specific tick count\n        if (isInteger(spec)) {\n            return scale.ticks(spec)\n        }\n    }\n\n    // non linear scale default\n    return scale.domain()\n}\n", "import { timeFormat } from 'd3-time-format'\nimport { format as d3Format } from 'd3-format'\n// @ts-ignore\nimport { textPropsByEngine } from '@nivo/core'\nimport { ScaleValue, AnyScale, TicksSpec, getScaleTicks, centerScale } from '@nivo/scales'\nimport { Point, ValueFormatter, Line } from './types'\n\nconst isArray = <T>(value: unknown): value is T[] => Array.isArray(value)\n\nexport const computeCartesianTicks = <Value extends ScaleValue>({\n    axis,\n    scale,\n    ticksPosition,\n    tickValues,\n    tickSize,\n    tickPadding,\n    tickRotation,\n    engine = 'svg',\n}: {\n    axis: 'x' | 'y'\n    scale: AnyScale\n    ticksPosition?: 'after' | 'before'\n    tickValues?: TicksSpec<Value>\n    tickSize: number\n    tickPadding: number\n    tickRotation: number\n    engine?: 'svg' | 'canvas'\n}) => {\n    const values = getScaleTicks<Value>(scale, tickValues)\n\n    const textProps = textPropsByEngine[engine]\n\n    const position = 'bandwidth' in scale ? centerScale(scale) : scale\n    const line = { lineX: 0, lineY: 0 }\n    const text = { textX: 0, textY: 0 }\n\n    const isRTL = typeof document === 'object' ? document.dir === 'rtl' : false\n    let translate: (value: Value) => Point\n    let textAlign: CanvasTextAlign = textProps.align.center\n    let textBaseline: CanvasTextBaseline = textProps.baseline.center\n\n    if (axis === 'x') {\n        translate = d => ({ x: position(d) ?? 0, y: 0 })\n\n        line.lineY = tickSize * (ticksPosition === 'after' ? 1 : -1)\n        text.textY = (tickSize + tickPadding) * (ticksPosition === 'after' ? 1 : -1)\n\n        if (ticksPosition === 'after') {\n            textBaseline = textProps.baseline.top\n        } else {\n            textBaseline = textProps.baseline.bottom\n        }\n\n        if (tickRotation === 0) {\n            textAlign = textProps.align.center\n        } else if (\n            (ticksPosition === 'after' && tickRotation < 0) ||\n            (ticksPosition === 'before' && tickRotation > 0)\n        ) {\n            textAlign = textProps.align[isRTL ? 'left' : 'right']\n            textBaseline = textProps.baseline.center\n        } else if (\n            (ticksPosition === 'after' && tickRotation > 0) ||\n            (ticksPosition === 'before' && tickRotation < 0)\n        ) {\n            textAlign = textProps.align[isRTL ? 'right' : 'left']\n            textBaseline = textProps.baseline.center\n        }\n    } else {\n        translate = d => ({ x: 0, y: position(d) ?? 0 })\n\n        line.lineX = tickSize * (ticksPosition === 'after' ? 1 : -1)\n        text.textX = (tickSize + tickPadding) * (ticksPosition === 'after' ? 1 : -1)\n\n        if (ticksPosition === 'after') {\n            textAlign = textProps.align.left\n        } else {\n            textAlign = textProps.align.right\n        }\n    }\n\n    const ticks = values.map((value: Value) => ({\n        key: value instanceof Date ? `${value.valueOf()}` : `${value}`,\n        value,\n        ...translate(value),\n        ...line,\n        ...text,\n    }))\n\n    return {\n        ticks,\n        textAlign,\n        textBaseline,\n    }\n}\n\nexport const getFormatter = <Value extends ScaleValue>(\n    format: string | ValueFormatter<Value> | undefined,\n    scale: AnyScale\n): ValueFormatter<Value> | undefined => {\n    if (typeof format === 'undefined' || typeof format === 'function') return format\n\n    if (scale.type === 'time') {\n        const formatter = timeFormat(format)\n\n        return ((d: any) => formatter(d instanceof Date ? d : new Date(d))) as ValueFormatter<Value>\n    }\n\n    return d3Format(format) as unknown as ValueFormatter<Value>\n}\n\nexport const computeGridLines = <Value extends ScaleValue>({\n    width,\n    height,\n    scale,\n    axis,\n    values: _values,\n}: {\n    width: number\n    height: number\n    scale: AnyScale\n    axis: 'x' | 'y'\n    values?: TicksSpec<Value>\n}) => {\n    const lineValues = isArray<number>(_values) ? _values : undefined\n    const values = lineValues || getScaleTicks<Value>(scale, _values)\n    const position = 'bandwidth' in scale ? centerScale(scale) : scale\n\n    const lines: Line[] =\n        axis === 'x'\n            ? values.map((value: Value) => ({\n                  key: value instanceof Date ? `${value.valueOf()}` : `${value}`,\n                  x1: position(value) ?? 0,\n                  x2: position(value) ?? 0,\n                  y1: 0,\n                  y2: height,\n              }))\n            : values.map((value: Value) => ({\n                  key: value instanceof Date ? `${value.valueOf()}` : `${value}`,\n                  x1: 0,\n                  x2: width,\n                  y1: position(value) ?? 0,\n                  y2: position(value) ?? 0,\n              }))\n\n    return lines\n}\n", "import { useMemo, memo } from 'react'\nimport * as React from 'react'\nimport { animated } from '@react-spring/web'\nimport { useTheme } from '@nivo/core'\nimport { ScaleValue } from '@nivo/scales'\nimport { AxisTickProps } from '../types'\n\nconst AxisTick = <Value extends ScaleValue>({\n    value: _value,\n    format,\n    lineX,\n    lineY,\n    onClick,\n    textBaseline,\n    textAnchor,\n    animatedProps,\n}: AxisTickProps<Value>) => {\n    const theme = useTheme()\n\n    const value = format?.(_value) ?? _value\n\n    const props = useMemo(() => {\n        const style = { opacity: animatedProps.opacity }\n\n        if (!onClick) {\n            return { style }\n        }\n\n        return {\n            style: { ...style, cursor: 'pointer' },\n            onClick: (event: React.MouseEvent<SVGGElement, MouseEvent>) => onClick(event, value),\n        }\n    }, [animatedProps.opacity, onClick, value])\n\n    return (\n        <animated.g transform={animatedProps.transform} {...props}>\n            <line x1={0} x2={lineX} y1={0} y2={lineY} style={theme.axis.ticks.line} />\n            <animated.text\n                dominantBaseline={textBaseline}\n                textAnchor={textAnchor}\n                transform={animatedProps.textTransform}\n                style={theme.axis.ticks.text}\n            >\n                {value}\n            </animated.text>\n        </animated.g>\n    )\n}\n\nconst memoizedAxisTick = memo(AxisTick) as typeof AxisTick\n\nexport { memoizedAxisTick as AxisTick }\n", "import { useMemo, memo } from 'react'\nimport * as React from 'react'\nimport { useSpring, useTransition, animated } from '@react-spring/web'\nimport { useTheme, useMotionConfig } from '@nivo/core'\nimport { ScaleValue, AnyScale } from '@nivo/scales'\nimport { computeCartesianTicks, getFormatter } from '../compute'\nimport { AxisTick } from './AxisTick'\nimport { AxisProps } from '../types'\n\nconst Axis = <Value extends ScaleValue>({\n    axis,\n    scale,\n    x = 0,\n    y = 0,\n    length,\n    ticksPosition,\n    tickValues,\n    tickSize = 5,\n    tickPadding = 5,\n    tickRotation = 0,\n    format,\n    renderTick = AxisTick,\n    legend,\n    legendPosition = 'end',\n    legendOffset = 0,\n    onClick,\n    ariaHidden,\n}: AxisProps<Value> & {\n    axis: 'x' | 'y'\n    scale: AnyScale\n    x?: number\n    y?: number\n    length: number\n    onClick?: (event: React.MouseEvent<SVGGElement, MouseEvent>, value: Value | string) => void\n}) => {\n    const theme = useTheme()\n\n    const formatValue = useMemo(() => getFormatter(format, scale), [format, scale])\n\n    const { ticks, textAlign, textBaseline } = computeCartesianTicks({\n        axis,\n        scale,\n        ticksPosition,\n        tickValues,\n        tickSize,\n        tickPadding,\n        tickRotation,\n    })\n\n    let legendNode = null\n    if (legend !== undefined) {\n        let legendX = 0\n        let legendY = 0\n        let legendRotation = 0\n        let textAnchor\n\n        if (axis === 'y') {\n            legendRotation = -90\n            legendX = legendOffset\n            if (legendPosition === 'start') {\n                textAnchor = 'start'\n                legendY = length\n            } else if (legendPosition === 'middle') {\n                textAnchor = 'middle'\n                legendY = length / 2\n            } else if (legendPosition === 'end') {\n                textAnchor = 'end'\n            }\n        } else {\n            legendY = legendOffset\n            if (legendPosition === 'start') {\n                textAnchor = 'start'\n            } else if (legendPosition === 'middle') {\n                textAnchor = 'middle'\n                legendX = length / 2\n            } else if (legendPosition === 'end') {\n                textAnchor = 'end'\n                legendX = length\n            }\n        }\n\n        legendNode = (\n            <text\n                transform={`translate(${legendX}, ${legendY}) rotate(${legendRotation})`}\n                textAnchor={textAnchor}\n                style={{\n                    dominantBaseline: 'central',\n                    ...theme.axis.legend.text,\n                }}\n            >\n                {legend}\n            </text>\n        )\n    }\n\n    const { animate, config: springConfig } = useMotionConfig()\n\n    const animatedProps = useSpring({\n        transform: `translate(${x},${y})`,\n        lineX2: axis === 'x' ? length : 0,\n        lineY2: axis === 'x' ? 0 : length,\n        config: springConfig,\n        immediate: !animate,\n    })\n\n    const transition = useTransition<\n        typeof ticks[0],\n        { opacity: number; transform: string; textTransform: string }\n    >(ticks, {\n        keys: tick => tick.key,\n        initial: tick => ({\n            opacity: 1,\n            transform: `translate(${tick.x},${tick.y})`,\n            textTransform: `translate(${tick.textX},${tick.textY}) rotate(${tickRotation})`,\n        }),\n        from: tick => ({\n            opacity: 0,\n            transform: `translate(${tick.x},${tick.y})`,\n            textTransform: `translate(${tick.textX},${tick.textY}) rotate(${tickRotation})`,\n        }),\n        enter: tick => ({\n            opacity: 1,\n            transform: `translate(${tick.x},${tick.y})`,\n            textTransform: `translate(${tick.textX},${tick.textY}) rotate(${tickRotation})`,\n        }),\n        update: tick => ({\n            opacity: 1,\n            transform: `translate(${tick.x},${tick.y})`,\n            textTransform: `translate(${tick.textX},${tick.textY}) rotate(${tickRotation})`,\n        }),\n        leave: {\n            opacity: 0,\n        },\n        config: springConfig,\n        immediate: !animate,\n    })\n\n    return (\n        <animated.g transform={animatedProps.transform} aria-hidden={ariaHidden}>\n            {transition((transitionProps, tick, _state, tickIndex) => {\n                return React.createElement(renderTick, {\n                    tickIndex,\n                    format: formatValue,\n                    rotate: tickRotation,\n                    textBaseline,\n                    textAnchor: textAlign,\n                    animatedProps: transitionProps,\n                    ...tick,\n                    ...(onClick ? { onClick } : {}),\n                })\n            })}\n            <animated.line\n                style={theme.axis.domain.line}\n                x1={0}\n                x2={animatedProps.lineX2}\n                y1={0}\n                y2={animatedProps.lineY2}\n            />\n            {legendNode}\n        </animated.g>\n    )\n}\n\nconst memoizedAxis = memo(Axis) as typeof Axis\n\nexport { memoizedAxis as Axis }\n", "import PropTypes from 'prop-types'\n\nexport const axisPropTypes = {\n    ticksPosition: PropTypes.oneOf(['before', 'after']),\n    tickValues: PropTypes.oneOfType([\n        PropTypes.number,\n        PropTypes.arrayOf(\n            PropTypes.oneOfType([PropTypes.number, PropTypes.string, PropTypes.instanceOf(Date)])\n        ),\n        PropTypes.string,\n    ]),\n    tickSize: PropTypes.number,\n    tickPadding: PropTypes.number,\n    tickRotation: PropTypes.number,\n    format: PropTypes.oneOfType([PropTypes.func, PropTypes.string]),\n    renderTick: PropTypes.func,\n    legend: PropTypes.node,\n    legendPosition: PropTypes.oneOf(['start', 'middle', 'end']),\n    legendOffset: PropTypes.number,\n    ariaHidden: PropTypes.bool,\n}\n\nexport const axisPropType = PropTypes.shape(axisPropTypes)\n\nexport const positions = ['top', 'right', 'bottom', 'left'] as const\n", "import { memo } from 'react'\nimport { ScaleValue, AnyScale } from '@nivo/scales'\nimport { Axis } from './Axis'\nimport { positions } from '../props'\nimport { AxisProps } from '../types'\n\nexport const Axes = memo(\n    <X extends ScaleValue, Y extends ScaleValue>({\n        xScale,\n        yScale,\n        width,\n        height,\n        top,\n        right,\n        bottom,\n        left,\n    }: {\n        xScale: AnyScale\n        yScale: AnyScale\n        width: number\n        height: number\n        top?: AxisProps<X> | null\n        right?: AxisProps<Y> | null\n        bottom?: AxisProps<X> | null\n        left?: AxisProps<Y> | null\n    }) => {\n        const axes = { top, right, bottom, left }\n\n        return (\n            <>\n                {positions.map(position => {\n                    const axis = axes[position] as typeof position extends 'bottom' | 'top'\n                        ? AxisProps<X> | undefined\n                        : AxisProps<Y> | undefined\n\n                    if (!axis) return null\n\n                    const isXAxis = position === 'top' || position === 'bottom'\n                    const ticksPosition =\n                        position === 'top' || position === 'left' ? 'before' : 'after'\n\n                    return (\n                        <Axis\n                            key={position}\n                            {...axis}\n                            axis={isXAxis ? 'x' : 'y'}\n                            x={position === 'right' ? width : 0}\n                            y={position === 'bottom' ? height : 0}\n                            scale={isXAxis ? xScale : yScale}\n                            length={isXAxis ? width : height}\n                            ticksPosition={ticksPosition}\n                        />\n                    )\n                })}\n            </>\n        )\n    }\n)\n", "import { memo } from 'react'\nimport { SpringValues, animated } from '@react-spring/web'\nimport { useTheme } from '@nivo/core'\n\nexport const GridLine = memo(\n    ({\n        animatedProps,\n    }: {\n        animatedProps: SpringValues<{\n            opacity: number\n            x1: number\n            x2: number\n            y1: number\n            y2: number\n        }>\n    }) => {\n        const theme = useTheme()\n\n        return <animated.line {...animatedProps} {...(theme.grid.line as unknown)} />\n    }\n)\n", "import { memo } from 'react'\nimport { useTransition } from '@react-spring/web'\nimport { useMotionConfig } from '@nivo/core'\nimport { GridLine } from './GridLine'\nimport { Line } from '../types'\n\nexport const GridLines = memo(({ lines }: { lines: Line[] }) => {\n    const { animate, config: springConfig } = useMotionConfig()\n\n    const transition = useTransition<Line, Record<'opacity' | 'x1' | 'x2' | 'y1' | 'y2', number>>(\n        lines,\n        {\n            keys: line => line.key,\n            initial: line => ({\n                opacity: 1,\n                x1: line.x1,\n                x2: line.x2,\n                y1: line.y1,\n                y2: line.y2,\n            }),\n            from: line => ({\n                opacity: 0,\n                x1: line.x1,\n                x2: line.x2,\n                y1: line.y1,\n                y2: line.y2,\n            }),\n            enter: line => ({\n                opacity: 1,\n                x1: line.x1,\n                x2: line.x2,\n                y1: line.y1,\n                y2: line.y2,\n            }),\n            update: line => ({\n                opacity: 1,\n                x1: line.x1,\n                x2: line.x2,\n                y1: line.y1,\n                y2: line.y2,\n            }),\n            leave: {\n                opacity: 0,\n            },\n            config: springConfig,\n            immediate: !animate,\n        }\n    )\n\n    return (\n        <g>\n            {transition((animatedProps, line) => (\n                <GridLine {...line} key={line.key} animatedProps={animatedProps} />\n            ))}\n        </g>\n    )\n})\n", "import { useMemo, memo } from 'react'\nimport { ScaleValue, AnyScale, TicksSpec } from '@nivo/scales'\nimport { GridLines } from './GridLines'\nimport { computeGridLines } from '../compute'\n\nexport const Grid = memo(\n    <X extends ScaleValue, Y extends ScaleValue>({\n        width,\n        height,\n        xScale,\n        yScale,\n        xValues,\n        yValues,\n    }: {\n        width: number\n        height: number\n        xScale?: AnyScale | null\n        xValues?: TicksSpec<X>\n        yScale?: AnyScale | null\n        yValues?: TicksSpec<Y>\n    }) => {\n        const xLines = useMemo(() => {\n            if (!xScale) return false\n\n            return computeGridLines({\n                width,\n                height,\n                scale: xScale,\n                axis: 'x',\n                values: xValues,\n            })\n        }, [xScale, xValues, width, height])\n\n        const yLines = useMemo(() => {\n            if (!yScale) return false\n\n            return computeGridLines({\n                width,\n                height,\n                scale: yScale,\n                axis: 'y',\n                values: yValues,\n            })\n        }, [height, width, yScale, yValues])\n\n        return (\n            <>\n                {xLines && <GridLines lines={xLines} />}\n                {yLines && <GridLines lines={yLines} />}\n            </>\n        )\n    }\n)\n", "import { degreesToRadians, CompleteTheme } from '@nivo/core'\nimport { ScaleValue, AnyScale, TicksSpec } from '@nivo/scales'\nimport { computeCartesianTicks, getFormatter, computeGridLines } from './compute'\nimport { positions } from './props'\nimport { AxisLegendPosition, CanvasAxisProps, ValueFormatter } from './types'\n\nexport const renderAxisToCanvas = <Value extends ScaleValue>(\n    ctx: CanvasRenderingContext2D,\n    {\n        axis,\n        scale,\n        x = 0,\n        y = 0,\n        length,\n\n        ticksPosition,\n        tickValues,\n        tickSize = 5,\n        tickPadding = 5,\n        tickRotation = 0,\n        format: _format,\n\n        legend,\n        legendPosition = 'end',\n        legendOffset = 0,\n\n        theme,\n    }: {\n        axis: 'x' | 'y'\n        scale: AnyScale\n        x?: number\n        y?: number\n        length: number\n        ticksPosition: 'before' | 'after'\n        tickValues?: TicksSpec<Value>\n        tickSize?: number\n        tickPadding?: number\n        tickRotation?: number\n        format?: string | ValueFormatter<Value>\n        legend?: string\n        legendPosition?: AxisLegendPosition\n        legendOffset?: number\n        theme: CompleteTheme\n    }\n) => {\n    const { ticks, textAlign, textBaseline } = computeCartesianTicks({\n        axis,\n        scale,\n        ticksPosition,\n        tickValues,\n        tickSize,\n        tickPadding,\n        tickRotation,\n        engine: 'canvas',\n    })\n\n    ctx.save()\n    ctx.translate(x, y)\n\n    ctx.textAlign = textAlign\n    ctx.textBaseline = textBaseline\n    ctx.font = `${theme.axis.ticks.text.fontWeight ? `${theme.axis.ticks.text.fontWeight} ` : ''}${\n        theme.axis.ticks.text.fontSize\n    }px ${theme.axis.ticks.text.fontFamily}`\n\n    if ((theme.axis.domain.line.strokeWidth ?? 0) > 0) {\n        ctx.lineWidth = Number(theme.axis.domain.line.strokeWidth)\n        ctx.lineCap = 'square'\n\n        if (theme.axis.domain.line.stroke) {\n            ctx.strokeStyle = theme.axis.domain.line.stroke\n        }\n\n        ctx.beginPath()\n        ctx.moveTo(0, 0)\n        ctx.lineTo(axis === 'x' ? length : 0, axis === 'x' ? 0 : length)\n        ctx.stroke()\n    }\n\n    const format = typeof _format === 'function' ? _format : (value: unknown) => `${value}`\n\n    ticks.forEach(tick => {\n        if ((theme.axis.ticks.line.strokeWidth ?? 0) > 0) {\n            ctx.lineWidth = Number(theme.axis.ticks.line.strokeWidth)\n            ctx.lineCap = 'square'\n\n            if (theme.axis.ticks.line.stroke) {\n                ctx.strokeStyle = theme.axis.ticks.line.stroke\n            }\n\n            ctx.beginPath()\n            ctx.moveTo(tick.x, tick.y)\n            ctx.lineTo(tick.x + tick.lineX, tick.y + tick.lineY)\n            ctx.stroke()\n        }\n\n        const value = format(tick.value)\n\n        ctx.save()\n        ctx.translate(tick.x + tick.textX, tick.y + tick.textY)\n        ctx.rotate(degreesToRadians(tickRotation))\n\n        if (theme.axis.ticks.text.fill) {\n            ctx.fillStyle = theme.axis.ticks.text.fill\n        }\n\n        ctx.fillText(String(value), 0, 0)\n        ctx.restore()\n    })\n\n    if (legend !== undefined) {\n        let legendX = 0\n        let legendY = 0\n        let legendRotation = 0\n        let textAlign: CanvasTextAlign = 'center'\n\n        if (axis === 'y') {\n            legendRotation = -90\n            legendX = legendOffset\n            if (legendPosition === 'start') {\n                textAlign = 'start'\n                legendY = length\n            } else if (legendPosition === 'middle') {\n                textAlign = 'center'\n                legendY = length / 2\n            } else if (legendPosition === 'end') {\n                textAlign = 'end'\n            }\n        } else {\n            legendY = legendOffset\n            if (legendPosition === 'start') {\n                textAlign = 'start'\n            } else if (legendPosition === 'middle') {\n                textAlign = 'center'\n                legendX = length / 2\n            } else if (legendPosition === 'end') {\n                textAlign = 'end'\n                legendX = length\n            }\n        }\n\n        ctx.translate(legendX, legendY)\n        ctx.rotate(degreesToRadians(legendRotation))\n        ctx.font = `${\n            theme.axis.legend.text.fontWeight ? `${theme.axis.legend.text.fontWeight} ` : ''\n        }${theme.axis.legend.text.fontSize}px ${theme.axis.legend.text.fontFamily}`\n\n        if (theme.axis.legend.text.fill) {\n            ctx.fillStyle = theme.axis.legend.text.fill\n        }\n\n        ctx.textAlign = textAlign\n        ctx.textBaseline = 'middle'\n        ctx.fillText(legend, 0, 0)\n    }\n\n    ctx.restore()\n}\n\nexport const renderAxesToCanvas = <X extends ScaleValue, Y extends ScaleValue>(\n    ctx: CanvasRenderingContext2D,\n    {\n        xScale,\n        yScale,\n        width,\n        height,\n\n        top,\n        right,\n        bottom,\n        left,\n\n        theme,\n    }: {\n        xScale: AnyScale\n        yScale: AnyScale\n        width: number\n        height: number\n        top?: CanvasAxisProps<X> | null\n        right?: CanvasAxisProps<Y> | null\n        bottom?: CanvasAxisProps<X> | null\n        left?: CanvasAxisProps<Y> | null\n        theme: CompleteTheme\n    }\n) => {\n    const axes = { top, right, bottom, left }\n\n    positions.forEach(position => {\n        const axis = axes[position] as typeof position extends 'bottom' | 'top'\n            ? CanvasAxisProps<X> | undefined\n            : CanvasAxisProps<Y> | undefined\n\n        if (!axis) return null\n\n        const isXAxis = position === 'top' || position === 'bottom'\n        const ticksPosition = position === 'top' || position === 'left' ? 'before' : 'after'\n        const scale = isXAxis ? xScale : yScale\n        const format = getFormatter(axis.format, scale)\n\n        renderAxisToCanvas(ctx, {\n            ...axis,\n            axis: isXAxis ? 'x' : 'y',\n            x: position === 'right' ? width : 0,\n            y: position === 'bottom' ? height : 0,\n            scale,\n            format,\n            length: isXAxis ? width : height,\n            ticksPosition,\n            theme,\n        })\n    })\n}\n\nexport const renderGridLinesToCanvas = <Value extends ScaleValue>(\n    ctx: CanvasRenderingContext2D,\n    {\n        width,\n        height,\n        scale,\n        axis,\n        values,\n    }: {\n        width: number\n        height: number\n        scale: AnyScale\n        axis: 'x' | 'y'\n        values?: TicksSpec<Value>\n    }\n) => {\n    const lines = computeGridLines({ width, height, scale, axis, values })\n\n    lines.forEach(line => {\n        ctx.beginPath()\n        ctx.moveTo(line.x1, line.y1)\n        ctx.lineTo(line.x2, line.y2)\n        ctx.stroke()\n    })\n}\n"],
  "mappings": "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",
  "names": ["collection", "collection", "precisionCutOffs", "date", "setMilliseconds", "setSeconds", "setMinutes", "setHours", "setDate", "setMonth", "precisionCutOffsByType", "millisecond", "second", "slice", "minute", "hour", "day", "month", "year", "createPrecisionMethod", "precision", "forEach", "cutOff", "createDateNormalizer", "n", "t", "format", "e", "useUTC", "precisionFn", "value", "Date", "parseTime", "utcParse", "timeParse", "createLinearScale", "data", "size", "axis", "minValue", "maxValue", "min", "max", "stacked", "reverse", "clamp", "nice", "minStacked", "maxStacked", "scale", "scaleLinear", "rangeRound", "domain", "castLinearScale", "typedScale", "type", "createPointScale", "_spec", "scalePoint", "range", "all", "createBandScale", "n", "data", "size", "axis", "round", "scale", "scaleBand", "range", "domain", "all", "castBandScale", "typedScale", "type", "createTimeScale", "minValue", "maxValue", "format", "i", "precision", "min", "max", "y", "useUTC", "nice", "normalize", "createDateNormalizer", "scaleUtc", "scaleTime", "createLogScale", "sign", "base", "some", "v", "Error", "hasMixedSign", "filter", "forEach", "Math", "scaleLog", "rangeRound", "createSymlogScale", "constant", "reverse", "scaleSymlog", "getOtherAxis", "compareValues", "a", "b", "compareDateValues", "getTime", "computeScale", "spec", "createLinearScale", "createPointScale", "getDatumAxisPosition", "datum", "stacked", "stackedValue", "computeXYScalesForSeries", "series", "xScaleSpec", "yScaleSpec", "width", "height", "nestedSeries", "map", "serie", "d", "xy", "generateSeriesXY", "stackX", "stackY", "xScale", "x", "yScale", "computedSeries", "position", "generateSeriesAxis", "scaleSpec", "getValue", "setValue", "value", "parseFloat", "String", "parseTime", "values", "push", "sortBy", "uniq", "uniqBy", "slice", "sort", "last", "stackAxis", "otherAxis", "compare", "isDate", "stack", "find", "stackValue", "head", "minStacked", "maxStacked", "centerScale", "bandwidth", "offset", "timeByType", "millisecond", "timeMillisecond", "utcMillisecond", "second", "timeSecond", "utcSecond", "minute", "timeMinute", "utcMinute", "hour", "timeHour", "utcHour", "day", "timeInterval", "date", "setHours", "step", "setDate", "getDate", "start", "end", "floor", "setUTCHours", "setUTCDate", "getUTCDate", "week", "timeWeek", "utcWeek", "sunday", "timeSunday", "utcSunday", "monday", "timeMonday", "utcMonday", "tuesday", "timeTuesday", "utcTuesday", "wednesday", "timeWednesday", "utcWednesday", "thursday", "timeThursday", "utcThursday", "friday", "timeFriday", "utcFriday", "saturday", "timeSaturday", "utcSaturday", "month", "timeMonth", "utcMonth", "year", "timeYear", "utcYear", "timeTypes", "Object", "keys", "timeIntervalRegexp", "RegExp", "join", "getScaleTicks", "Array", "isArray", "matches", "match", "amount", "timeType", "originalStop", "stop", "Date", "every", "Number", "_timeType$every", "ticks", "interval", "isFinite", "computeCartesianTicks", "t", "translate", "axis", "scale", "ticksPosition", "tickValues", "tickSize", "tickPadding", "tickRotation", "engine", "values", "getScaleTicks", "textProps", "textPropsByEngine", "position", "centerScale", "line", "lineX", "lineY", "text", "textX", "textY", "isRTL", "document", "dir", "textAlign", "align", "center", "textBaseline", "baseline", "d", "x", "y", "top", "bottom", "left", "right", "ticks", "map", "value", "key", "Date", "valueOf", "getFormatter", "format", "type", "formatter", "timeFormat", "d3Format", "computeGridLines", "width", "height", "_values", "Array", "isArray", "lines", "x1", "x2", "y1", "y2", "memoizedAxisTick", "memo", "e", "_value", "onClick", "textAnchor", "animatedProps", "theme", "useTheme", "props", "useMemo", "style", "opacity", "cursor", "event", "_jsxs", "animated", "g", "transform", "_jsx", "dominantBaseline", "textTransform", "memoizedAxis", "length", "P", "O", "A", "renderTick", "AxisTick", "legend", "legendPosition", "V", "legendOffset", "ariaHidden", "formatValue", "legendNode", "legendX", "legendY", "legendRotation", "useMotionConfig", "animate", "springConfig", "config", "useSpring", "lineX2", "lineY2", "immediate", "transition", "useTransition", "keys", "tick", "initial", "from", "enter", "update", "leave", "transitionProps", "_state", "tickIndex", "createElement", "rotate", "domain", "axisPropTypes", "PropTypes", "oneOf", "oneOfType", "number", "arrayOf", "string", "instanceOf", "func", "node", "bool", "axisPropType", "shape", "positions", "Axes", "xScale", "yScale", "axes", "isXAxis", "Axis", "GridLine", "grid", "GridLines", "_createElement", "Grid", "xValues", "yValues", "xLines", "yLines", "renderAxisToCanvas", "ctx", "a", "k", "_format", "T", "save", "font", "fontWeight", "fontSize", "fontFamily", "strokeWidth", "lineWidth", "Number", "lineCap", "stroke", "strokeStyle", "beginPath", "moveTo", "lineTo", "forEach", "degreesToRadians", "fill", "fillStyle", "fillText", "String", "restore", "renderAxesToCanvas", "renderGridLinesToCanvas"]
}
