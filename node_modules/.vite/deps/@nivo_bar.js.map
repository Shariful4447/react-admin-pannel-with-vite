{
  "version": 3,
  "sources": ["../../lodash/_arrayEach.js", "../../lodash/_baseAssign.js", "../../lodash/_baseAssignIn.js", "../../lodash/_copySymbols.js", "../../lodash/_getSymbolsIn.js", "../../lodash/_copySymbolsIn.js", "../../lodash/_getAllKeysIn.js", "../../lodash/_initCloneArray.js", "../../lodash/_cloneDataView.js", "../../lodash/_cloneRegExp.js", "../../lodash/_cloneSymbol.js", "../../lodash/_initCloneByTag.js", "../../lodash/_baseIsMap.js", "../../lodash/isMap.js", "../../lodash/_baseIsSet.js", "../../lodash/isSet.js", "../../lodash/_baseClone.js", "../../lodash/_baseSlice.js", "../../lodash/_parent.js", "../../lodash/_baseUnset.js", "../../lodash/_customOmitClone.js", "../../lodash/omit.js", "../../lodash/isNumber.js", "../../lodash/_baseFilter.js", "../../lodash/filter.js", "../../@nivo/annotations/src/props.ts", "../../@nivo/annotations/src/utils.ts", "../../@nivo/annotations/src/compute.ts", "../../@nivo/annotations/src/hooks.ts", "../../@nivo/annotations/src/AnnotationNote.tsx", "../../@nivo/annotations/src/AnnotationLink.tsx", "../../@nivo/annotations/src/CircleAnnotationOutline.tsx", "../../@nivo/annotations/src/DotAnnotationOutline.tsx", "../../@nivo/annotations/src/RectAnnotationOutline.tsx", "../../@nivo/annotations/src/Annotation.tsx", "../../@nivo/annotations/src/canvas.ts", "../../@nivo/bar/src/BarAnnotations.tsx", "../../@nivo/bar/src/BarLegends.tsx", "../../@nivo/bar/src/BarItem.tsx", "../../@nivo/bar/src/props.ts", "../../@nivo/bar/src/BarTooltip.tsx", "../../@nivo/bar/src/compute/common.ts", "../../@nivo/bar/src/compute/grouped.ts", "../../@nivo/bar/src/compute/stacked.ts", "../../@nivo/bar/src/compute/legends.ts", "../../@nivo/bar/src/hooks.ts", "../../@nivo/bar/src/Bar.tsx", "../../@nivo/bar/src/BarCanvas.tsx", "../../@nivo/bar/src/ResponsiveBar.tsx", "../../@nivo/bar/src/ResponsiveBarCanvas.tsx"],
  "sourcesContent": ["/**\n * A specialized version of `_.forEach` for arrays without support for\n * iteratee shorthands.\n *\n * @private\n * @param {Array} [array] The array to iterate over.\n * @param {Function} iteratee The function invoked per iteration.\n * @returns {Array} Returns `array`.\n */\nfunction arrayEach(array, iteratee) {\n  var index = -1,\n      length = array == null ? 0 : array.length;\n\n  while (++index < length) {\n    if (iteratee(array[index], index, array) === false) {\n      break;\n    }\n  }\n  return array;\n}\n\nmodule.exports = arrayEach;\n", "var copyObject = require('./_copyObject'),\n    keys = require('./keys');\n\n/**\n * The base implementation of `_.assign` without support for multiple sources\n * or `customizer` functions.\n *\n * @private\n * @param {Object} object The destination object.\n * @param {Object} source The source object.\n * @returns {Object} Returns `object`.\n */\nfunction baseAssign(object, source) {\n  return object && copyObject(source, keys(source), object);\n}\n\nmodule.exports = baseAssign;\n", "var copyObject = require('./_copyObject'),\n    keysIn = require('./keysIn');\n\n/**\n * The base implementation of `_.assignIn` without support for multiple sources\n * or `customizer` functions.\n *\n * @private\n * @param {Object} object The destination object.\n * @param {Object} source The source object.\n * @returns {Object} Returns `object`.\n */\nfunction baseAssignIn(object, source) {\n  return object && copyObject(source, keysIn(source), object);\n}\n\nmodule.exports = baseAssignIn;\n", "var copyObject = require('./_copyObject'),\n    getSymbols = require('./_getSymbols');\n\n/**\n * Copies own symbols of `source` to `object`.\n *\n * @private\n * @param {Object} source The object to copy symbols from.\n * @param {Object} [object={}] The object to copy symbols to.\n * @returns {Object} Returns `object`.\n */\nfunction copySymbols(source, object) {\n  return copyObject(source, getSymbols(source), object);\n}\n\nmodule.exports = copySymbols;\n", "var arrayPush = require('./_arrayPush'),\n    getPrototype = require('./_getPrototype'),\n    getSymbols = require('./_getSymbols'),\n    stubArray = require('./stubArray');\n\n/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeGetSymbols = Object.getOwnPropertySymbols;\n\n/**\n * Creates an array of the own and inherited enumerable symbols of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of symbols.\n */\nvar getSymbolsIn = !nativeGetSymbols ? stubArray : function(object) {\n  var result = [];\n  while (object) {\n    arrayPush(result, getSymbols(object));\n    object = getPrototype(object);\n  }\n  return result;\n};\n\nmodule.exports = getSymbolsIn;\n", "var copyObject = require('./_copyObject'),\n    getSymbolsIn = require('./_getSymbolsIn');\n\n/**\n * Copies own and inherited symbols of `source` to `object`.\n *\n * @private\n * @param {Object} source The object to copy symbols from.\n * @param {Object} [object={}] The object to copy symbols to.\n * @returns {Object} Returns `object`.\n */\nfunction copySymbolsIn(source, object) {\n  return copyObject(source, getSymbolsIn(source), object);\n}\n\nmodule.exports = copySymbolsIn;\n", "var baseGetAllKeys = require('./_baseGetAllKeys'),\n    getSymbolsIn = require('./_getSymbolsIn'),\n    keysIn = require('./keysIn');\n\n/**\n * Creates an array of own and inherited enumerable property names and\n * symbols of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property names and symbols.\n */\nfunction getAllKeysIn(object) {\n  return baseGetAllKeys(object, keysIn, getSymbolsIn);\n}\n\nmodule.exports = getAllKeysIn;\n", "/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/**\n * Initializes an array clone.\n *\n * @private\n * @param {Array} array The array to clone.\n * @returns {Array} Returns the initialized clone.\n */\nfunction initCloneArray(array) {\n  var length = array.length,\n      result = new array.constructor(length);\n\n  // Add properties assigned by `RegExp#exec`.\n  if (length && typeof array[0] == 'string' && hasOwnProperty.call(array, 'index')) {\n    result.index = array.index;\n    result.input = array.input;\n  }\n  return result;\n}\n\nmodule.exports = initCloneArray;\n", "var cloneArrayBuffer = require('./_cloneArrayBuffer');\n\n/**\n * Creates a clone of `dataView`.\n *\n * @private\n * @param {Object} dataView The data view to clone.\n * @param {boolean} [isDeep] Specify a deep clone.\n * @returns {Object} Returns the cloned data view.\n */\nfunction cloneDataView(dataView, isDeep) {\n  var buffer = isDeep ? cloneArrayBuffer(dataView.buffer) : dataView.buffer;\n  return new dataView.constructor(buffer, dataView.byteOffset, dataView.byteLength);\n}\n\nmodule.exports = cloneDataView;\n", "/** Used to match `RegExp` flags from their coerced string values. */\nvar reFlags = /\\w*$/;\n\n/**\n * Creates a clone of `regexp`.\n *\n * @private\n * @param {Object} regexp The regexp to clone.\n * @returns {Object} Returns the cloned regexp.\n */\nfunction cloneRegExp(regexp) {\n  var result = new regexp.constructor(regexp.source, reFlags.exec(regexp));\n  result.lastIndex = regexp.lastIndex;\n  return result;\n}\n\nmodule.exports = cloneRegExp;\n", "var Symbol = require('./_Symbol');\n\n/** Used to convert symbols to primitives and strings. */\nvar symbolProto = Symbol ? Symbol.prototype : undefined,\n    symbolValueOf = symbolProto ? symbolProto.valueOf : undefined;\n\n/**\n * Creates a clone of the `symbol` object.\n *\n * @private\n * @param {Object} symbol The symbol object to clone.\n * @returns {Object} Returns the cloned symbol object.\n */\nfunction cloneSymbol(symbol) {\n  return symbolValueOf ? Object(symbolValueOf.call(symbol)) : {};\n}\n\nmodule.exports = cloneSymbol;\n", "var cloneArrayBuffer = require('./_cloneArrayBuffer'),\n    cloneDataView = require('./_cloneDataView'),\n    cloneRegExp = require('./_cloneRegExp'),\n    cloneSymbol = require('./_cloneSymbol'),\n    cloneTypedArray = require('./_cloneTypedArray');\n\n/** `Object#toString` result references. */\nvar boolTag = '[object Boolean]',\n    dateTag = '[object Date]',\n    mapTag = '[object Map]',\n    numberTag = '[object Number]',\n    regexpTag = '[object RegExp]',\n    setTag = '[object Set]',\n    stringTag = '[object String]',\n    symbolTag = '[object Symbol]';\n\nvar arrayBufferTag = '[object ArrayBuffer]',\n    dataViewTag = '[object DataView]',\n    float32Tag = '[object Float32Array]',\n    float64Tag = '[object Float64Array]',\n    int8Tag = '[object Int8Array]',\n    int16Tag = '[object Int16Array]',\n    int32Tag = '[object Int32Array]',\n    uint8Tag = '[object Uint8Array]',\n    uint8ClampedTag = '[object Uint8ClampedArray]',\n    uint16Tag = '[object Uint16Array]',\n    uint32Tag = '[object Uint32Array]';\n\n/**\n * Initializes an object clone based on its `toStringTag`.\n *\n * **Note:** This function only supports cloning values with tags of\n * `Boolean`, `Date`, `Error`, `Map`, `Number`, `RegExp`, `Set`, or `String`.\n *\n * @private\n * @param {Object} object The object to clone.\n * @param {string} tag The `toStringTag` of the object to clone.\n * @param {boolean} [isDeep] Specify a deep clone.\n * @returns {Object} Returns the initialized clone.\n */\nfunction initCloneByTag(object, tag, isDeep) {\n  var Ctor = object.constructor;\n  switch (tag) {\n    case arrayBufferTag:\n      return cloneArrayBuffer(object);\n\n    case boolTag:\n    case dateTag:\n      return new Ctor(+object);\n\n    case dataViewTag:\n      return cloneDataView(object, isDeep);\n\n    case float32Tag: case float64Tag:\n    case int8Tag: case int16Tag: case int32Tag:\n    case uint8Tag: case uint8ClampedTag: case uint16Tag: case uint32Tag:\n      return cloneTypedArray(object, isDeep);\n\n    case mapTag:\n      return new Ctor;\n\n    case numberTag:\n    case stringTag:\n      return new Ctor(object);\n\n    case regexpTag:\n      return cloneRegExp(object);\n\n    case setTag:\n      return new Ctor;\n\n    case symbolTag:\n      return cloneSymbol(object);\n  }\n}\n\nmodule.exports = initCloneByTag;\n", "var getTag = require('./_getTag'),\n    isObjectLike = require('./isObjectLike');\n\n/** `Object#toString` result references. */\nvar mapTag = '[object Map]';\n\n/**\n * The base implementation of `_.isMap` without Node.js optimizations.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a map, else `false`.\n */\nfunction baseIsMap(value) {\n  return isObjectLike(value) && getTag(value) == mapTag;\n}\n\nmodule.exports = baseIsMap;\n", "var baseIsMap = require('./_baseIsMap'),\n    baseUnary = require('./_baseUnary'),\n    nodeUtil = require('./_nodeUtil');\n\n/* Node.js helper references. */\nvar nodeIsMap = nodeUtil && nodeUtil.isMap;\n\n/**\n * Checks if `value` is classified as a `Map` object.\n *\n * @static\n * @memberOf _\n * @since 4.3.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a map, else `false`.\n * @example\n *\n * _.isMap(new Map);\n * // => true\n *\n * _.isMap(new WeakMap);\n * // => false\n */\nvar isMap = nodeIsMap ? baseUnary(nodeIsMap) : baseIsMap;\n\nmodule.exports = isMap;\n", "var getTag = require('./_getTag'),\n    isObjectLike = require('./isObjectLike');\n\n/** `Object#toString` result references. */\nvar setTag = '[object Set]';\n\n/**\n * The base implementation of `_.isSet` without Node.js optimizations.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a set, else `false`.\n */\nfunction baseIsSet(value) {\n  return isObjectLike(value) && getTag(value) == setTag;\n}\n\nmodule.exports = baseIsSet;\n", "var baseIsSet = require('./_baseIsSet'),\n    baseUnary = require('./_baseUnary'),\n    nodeUtil = require('./_nodeUtil');\n\n/* Node.js helper references. */\nvar nodeIsSet = nodeUtil && nodeUtil.isSet;\n\n/**\n * Checks if `value` is classified as a `Set` object.\n *\n * @static\n * @memberOf _\n * @since 4.3.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a set, else `false`.\n * @example\n *\n * _.isSet(new Set);\n * // => true\n *\n * _.isSet(new WeakSet);\n * // => false\n */\nvar isSet = nodeIsSet ? baseUnary(nodeIsSet) : baseIsSet;\n\nmodule.exports = isSet;\n", "var Stack = require('./_Stack'),\n    arrayEach = require('./_arrayEach'),\n    assignValue = require('./_assignValue'),\n    baseAssign = require('./_baseAssign'),\n    baseAssignIn = require('./_baseAssignIn'),\n    cloneBuffer = require('./_cloneBuffer'),\n    copyArray = require('./_copyArray'),\n    copySymbols = require('./_copySymbols'),\n    copySymbolsIn = require('./_copySymbolsIn'),\n    getAllKeys = require('./_getAllKeys'),\n    getAllKeysIn = require('./_getAllKeysIn'),\n    getTag = require('./_getTag'),\n    initCloneArray = require('./_initCloneArray'),\n    initCloneByTag = require('./_initCloneByTag'),\n    initCloneObject = require('./_initCloneObject'),\n    isArray = require('./isArray'),\n    isBuffer = require('./isBuffer'),\n    isMap = require('./isMap'),\n    isObject = require('./isObject'),\n    isSet = require('./isSet'),\n    keys = require('./keys'),\n    keysIn = require('./keysIn');\n\n/** Used to compose bitmasks for cloning. */\nvar CLONE_DEEP_FLAG = 1,\n    CLONE_FLAT_FLAG = 2,\n    CLONE_SYMBOLS_FLAG = 4;\n\n/** `Object#toString` result references. */\nvar argsTag = '[object Arguments]',\n    arrayTag = '[object Array]',\n    boolTag = '[object Boolean]',\n    dateTag = '[object Date]',\n    errorTag = '[object Error]',\n    funcTag = '[object Function]',\n    genTag = '[object GeneratorFunction]',\n    mapTag = '[object Map]',\n    numberTag = '[object Number]',\n    objectTag = '[object Object]',\n    regexpTag = '[object RegExp]',\n    setTag = '[object Set]',\n    stringTag = '[object String]',\n    symbolTag = '[object Symbol]',\n    weakMapTag = '[object WeakMap]';\n\nvar arrayBufferTag = '[object ArrayBuffer]',\n    dataViewTag = '[object DataView]',\n    float32Tag = '[object Float32Array]',\n    float64Tag = '[object Float64Array]',\n    int8Tag = '[object Int8Array]',\n    int16Tag = '[object Int16Array]',\n    int32Tag = '[object Int32Array]',\n    uint8Tag = '[object Uint8Array]',\n    uint8ClampedTag = '[object Uint8ClampedArray]',\n    uint16Tag = '[object Uint16Array]',\n    uint32Tag = '[object Uint32Array]';\n\n/** Used to identify `toStringTag` values supported by `_.clone`. */\nvar cloneableTags = {};\ncloneableTags[argsTag] = cloneableTags[arrayTag] =\ncloneableTags[arrayBufferTag] = cloneableTags[dataViewTag] =\ncloneableTags[boolTag] = cloneableTags[dateTag] =\ncloneableTags[float32Tag] = cloneableTags[float64Tag] =\ncloneableTags[int8Tag] = cloneableTags[int16Tag] =\ncloneableTags[int32Tag] = cloneableTags[mapTag] =\ncloneableTags[numberTag] = cloneableTags[objectTag] =\ncloneableTags[regexpTag] = cloneableTags[setTag] =\ncloneableTags[stringTag] = cloneableTags[symbolTag] =\ncloneableTags[uint8Tag] = cloneableTags[uint8ClampedTag] =\ncloneableTags[uint16Tag] = cloneableTags[uint32Tag] = true;\ncloneableTags[errorTag] = cloneableTags[funcTag] =\ncloneableTags[weakMapTag] = false;\n\n/**\n * The base implementation of `_.clone` and `_.cloneDeep` which tracks\n * traversed objects.\n *\n * @private\n * @param {*} value The value to clone.\n * @param {boolean} bitmask The bitmask flags.\n *  1 - Deep clone\n *  2 - Flatten inherited properties\n *  4 - Clone symbols\n * @param {Function} [customizer] The function to customize cloning.\n * @param {string} [key] The key of `value`.\n * @param {Object} [object] The parent object of `value`.\n * @param {Object} [stack] Tracks traversed objects and their clone counterparts.\n * @returns {*} Returns the cloned value.\n */\nfunction baseClone(value, bitmask, customizer, key, object, stack) {\n  var result,\n      isDeep = bitmask & CLONE_DEEP_FLAG,\n      isFlat = bitmask & CLONE_FLAT_FLAG,\n      isFull = bitmask & CLONE_SYMBOLS_FLAG;\n\n  if (customizer) {\n    result = object ? customizer(value, key, object, stack) : customizer(value);\n  }\n  if (result !== undefined) {\n    return result;\n  }\n  if (!isObject(value)) {\n    return value;\n  }\n  var isArr = isArray(value);\n  if (isArr) {\n    result = initCloneArray(value);\n    if (!isDeep) {\n      return copyArray(value, result);\n    }\n  } else {\n    var tag = getTag(value),\n        isFunc = tag == funcTag || tag == genTag;\n\n    if (isBuffer(value)) {\n      return cloneBuffer(value, isDeep);\n    }\n    if (tag == objectTag || tag == argsTag || (isFunc && !object)) {\n      result = (isFlat || isFunc) ? {} : initCloneObject(value);\n      if (!isDeep) {\n        return isFlat\n          ? copySymbolsIn(value, baseAssignIn(result, value))\n          : copySymbols(value, baseAssign(result, value));\n      }\n    } else {\n      if (!cloneableTags[tag]) {\n        return object ? value : {};\n      }\n      result = initCloneByTag(value, tag, isDeep);\n    }\n  }\n  // Check for circular references and return its corresponding clone.\n  stack || (stack = new Stack);\n  var stacked = stack.get(value);\n  if (stacked) {\n    return stacked;\n  }\n  stack.set(value, result);\n\n  if (isSet(value)) {\n    value.forEach(function(subValue) {\n      result.add(baseClone(subValue, bitmask, customizer, subValue, value, stack));\n    });\n  } else if (isMap(value)) {\n    value.forEach(function(subValue, key) {\n      result.set(key, baseClone(subValue, bitmask, customizer, key, value, stack));\n    });\n  }\n\n  var keysFunc = isFull\n    ? (isFlat ? getAllKeysIn : getAllKeys)\n    : (isFlat ? keysIn : keys);\n\n  var props = isArr ? undefined : keysFunc(value);\n  arrayEach(props || value, function(subValue, key) {\n    if (props) {\n      key = subValue;\n      subValue = value[key];\n    }\n    // Recursively populate clone (susceptible to call stack limits).\n    assignValue(result, key, baseClone(subValue, bitmask, customizer, key, value, stack));\n  });\n  return result;\n}\n\nmodule.exports = baseClone;\n", "/**\n * The base implementation of `_.slice` without an iteratee call guard.\n *\n * @private\n * @param {Array} array The array to slice.\n * @param {number} [start=0] The start position.\n * @param {number} [end=array.length] The end position.\n * @returns {Array} Returns the slice of `array`.\n */\nfunction baseSlice(array, start, end) {\n  var index = -1,\n      length = array.length;\n\n  if (start < 0) {\n    start = -start > length ? 0 : (length + start);\n  }\n  end = end > length ? length : end;\n  if (end < 0) {\n    end += length;\n  }\n  length = start > end ? 0 : ((end - start) >>> 0);\n  start >>>= 0;\n\n  var result = Array(length);\n  while (++index < length) {\n    result[index] = array[index + start];\n  }\n  return result;\n}\n\nmodule.exports = baseSlice;\n", "var baseGet = require('./_baseGet'),\n    baseSlice = require('./_baseSlice');\n\n/**\n * Gets the parent value at `path` of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @param {Array} path The path to get the parent value of.\n * @returns {*} Returns the parent value.\n */\nfunction parent(object, path) {\n  return path.length < 2 ? object : baseGet(object, baseSlice(path, 0, -1));\n}\n\nmodule.exports = parent;\n", "var castPath = require('./_castPath'),\n    last = require('./last'),\n    parent = require('./_parent'),\n    toKey = require('./_toKey');\n\n/**\n * The base implementation of `_.unset`.\n *\n * @private\n * @param {Object} object The object to modify.\n * @param {Array|string} path The property path to unset.\n * @returns {boolean} Returns `true` if the property is deleted, else `false`.\n */\nfunction baseUnset(object, path) {\n  path = castPath(path, object);\n  object = parent(object, path);\n  return object == null || delete object[toKey(last(path))];\n}\n\nmodule.exports = baseUnset;\n", "var isPlainObject = require('./isPlainObject');\n\n/**\n * Used by `_.omit` to customize its `_.cloneDeep` use to only clone plain\n * objects.\n *\n * @private\n * @param {*} value The value to inspect.\n * @param {string} key The key of the property to inspect.\n * @returns {*} Returns the uncloned value or `undefined` to defer cloning to `_.cloneDeep`.\n */\nfunction customOmitClone(value) {\n  return isPlainObject(value) ? undefined : value;\n}\n\nmodule.exports = customOmitClone;\n", "var arrayMap = require('./_arrayMap'),\n    baseClone = require('./_baseClone'),\n    baseUnset = require('./_baseUnset'),\n    castPath = require('./_castPath'),\n    copyObject = require('./_copyObject'),\n    customOmitClone = require('./_customOmitClone'),\n    flatRest = require('./_flatRest'),\n    getAllKeysIn = require('./_getAllKeysIn');\n\n/** Used to compose bitmasks for cloning. */\nvar CLONE_DEEP_FLAG = 1,\n    CLONE_FLAT_FLAG = 2,\n    CLONE_SYMBOLS_FLAG = 4;\n\n/**\n * The opposite of `_.pick`; this method creates an object composed of the\n * own and inherited enumerable property paths of `object` that are not omitted.\n *\n * **Note:** This method is considerably slower than `_.pick`.\n *\n * @static\n * @since 0.1.0\n * @memberOf _\n * @category Object\n * @param {Object} object The source object.\n * @param {...(string|string[])} [paths] The property paths to omit.\n * @returns {Object} Returns the new object.\n * @example\n *\n * var object = { 'a': 1, 'b': '2', 'c': 3 };\n *\n * _.omit(object, ['a', 'c']);\n * // => { 'b': '2' }\n */\nvar omit = flatRest(function(object, paths) {\n  var result = {};\n  if (object == null) {\n    return result;\n  }\n  var isDeep = false;\n  paths = arrayMap(paths, function(path) {\n    path = castPath(path, object);\n    isDeep || (isDeep = path.length > 1);\n    return path;\n  });\n  copyObject(object, getAllKeysIn(object), result);\n  if (isDeep) {\n    result = baseClone(result, CLONE_DEEP_FLAG | CLONE_FLAT_FLAG | CLONE_SYMBOLS_FLAG, customOmitClone);\n  }\n  var length = paths.length;\n  while (length--) {\n    baseUnset(result, paths[length]);\n  }\n  return result;\n});\n\nmodule.exports = omit;\n", "var baseGetTag = require('./_baseGetTag'),\n    isObjectLike = require('./isObjectLike');\n\n/** `Object#toString` result references. */\nvar numberTag = '[object Number]';\n\n/**\n * Checks if `value` is classified as a `Number` primitive or object.\n *\n * **Note:** To exclude `Infinity`, `-Infinity`, and `NaN`, which are\n * classified as numbers, use the `_.isFinite` method.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a number, else `false`.\n * @example\n *\n * _.isNumber(3);\n * // => true\n *\n * _.isNumber(Number.MIN_VALUE);\n * // => true\n *\n * _.isNumber(Infinity);\n * // => true\n *\n * _.isNumber('3');\n * // => false\n */\nfunction isNumber(value) {\n  return typeof value == 'number' ||\n    (isObjectLike(value) && baseGetTag(value) == numberTag);\n}\n\nmodule.exports = isNumber;\n", "var baseEach = require('./_baseEach');\n\n/**\n * The base implementation of `_.filter` without support for iteratee shorthands.\n *\n * @private\n * @param {Array|Object} collection The collection to iterate over.\n * @param {Function} predicate The function invoked per iteration.\n * @returns {Array} Returns the new filtered array.\n */\nfunction baseFilter(collection, predicate) {\n  var result = [];\n  baseEach(collection, function(value, index, collection) {\n    if (predicate(value, index, collection)) {\n      result.push(value);\n    }\n  });\n  return result;\n}\n\nmodule.exports = baseFilter;\n", "var arrayFilter = require('./_arrayFilter'),\n    baseFilter = require('./_baseFilter'),\n    baseIteratee = require('./_baseIteratee'),\n    isArray = require('./isArray');\n\n/**\n * Iterates over elements of `collection`, returning an array of all elements\n * `predicate` returns truthy for. The predicate is invoked with three\n * arguments: (value, index|key, collection).\n *\n * **Note:** Unlike `_.remove`, this method returns a new array.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Collection\n * @param {Array|Object} collection The collection to iterate over.\n * @param {Function} [predicate=_.identity] The function invoked per iteration.\n * @returns {Array} Returns the new filtered array.\n * @see _.reject\n * @example\n *\n * var users = [\n *   { 'user': 'barney', 'age': 36, 'active': true },\n *   { 'user': 'fred',   'age': 40, 'active': false }\n * ];\n *\n * _.filter(users, function(o) { return !o.active; });\n * // => objects for ['fred']\n *\n * // The `_.matches` iteratee shorthand.\n * _.filter(users, { 'age': 36, 'active': true });\n * // => objects for ['barney']\n *\n * // The `_.matchesProperty` iteratee shorthand.\n * _.filter(users, ['active', false]);\n * // => objects for ['fred']\n *\n * // The `_.property` iteratee shorthand.\n * _.filter(users, 'active');\n * // => objects for ['barney']\n *\n * // Combining several predicates using `_.overEvery` or `_.overSome`.\n * _.filter(users, _.overSome([{ 'age': 36 }, ['age', 40]]));\n * // => objects for ['fred', 'barney']\n */\nfunction filter(collection, predicate) {\n  var func = isArray(collection) ? arrayFilter : baseFilter;\n  return func(collection, baseIteratee(predicate, 3));\n}\n\nmodule.exports = filter;\n", "export const defaultProps = {\n    dotSize: 4,\n    noteWidth: 120,\n    noteTextOffset: 8,\n    animate: true,\n    motionStiffness: 90,\n    motionDamping: 13,\n}\n", "import {\n    AnnotationSpec,\n    CircleAnnotationSpec,\n    DotAnnotationSpec,\n    Note,\n    NoteCanvas,\n    NoteSvg,\n    RectAnnotationSpec,\n} from './types'\nimport { isValidElement } from 'react'\n\nexport const isSvgNote = <Datum>(note: Note<Datum>): note is NoteSvg<Datum> => {\n    const noteType = typeof note\n\n    return (\n        isValidElement(note) ||\n        noteType === 'string' ||\n        noteType === 'function' ||\n        noteType === 'object'\n    )\n}\n\nexport const isCanvasNote = <Datum>(note: Note<Datum>): note is NoteCanvas<Datum> => {\n    const noteType = typeof note\n\n    return noteType === 'string' || noteType === 'function'\n}\n\nexport const isCircleAnnotation = <Datum>(\n    annotationSpec: AnnotationSpec<Datum>\n): annotationSpec is CircleAnnotationSpec<Datum> => annotationSpec.type === 'circle'\n\nexport const isDotAnnotation = <Datum>(\n    annotationSpec: AnnotationSpec<Datum>\n): annotationSpec is DotAnnotationSpec<Datum> => annotationSpec.type === 'dot'\n\nexport const isRectAnnotation = <Datum>(\n    annotationSpec: AnnotationSpec<Datum>\n): annotationSpec is RectAnnotationSpec<Datum> => annotationSpec.type === 'rect'\n", "import { filter, isNumber, omit } from 'lodash'\nimport {\n    radiansToDegrees,\n    absoluteAngleDegrees,\n    degreesToRadians,\n    positionFromAngle,\n} from '@nivo/core'\nimport { defaultProps } from './props'\nimport {\n    AnnotationPositionGetter,\n    AnnotationDimensionsGetter,\n    BoundAnnotation,\n    AnnotationMatcher,\n    AnnotationInstructions,\n} from './types'\nimport { isCircleAnnotation, isRectAnnotation } from './utils'\n\nexport const bindAnnotations = <\n    Datum = {\n        x: number\n        y: number\n    }\n>({\n    data,\n    annotations,\n    getPosition,\n    getDimensions,\n}: {\n    data: Datum[]\n    annotations: AnnotationMatcher<Datum>[]\n    getPosition: AnnotationPositionGetter<Datum>\n    getDimensions: AnnotationDimensionsGetter<Datum>\n}): BoundAnnotation<Datum>[] =>\n    annotations.reduce((acc: BoundAnnotation<Datum>[], annotation) => {\n        const offset = annotation.offset || 0\n\n        return [\n            ...acc,\n            ...filter<Datum>(data, annotation.match).map(datum => {\n                const position = getPosition(datum)\n                const dimensions = getDimensions(datum)\n\n                if (isCircleAnnotation(annotation) || isRectAnnotation(annotation)) {\n                    dimensions.size = dimensions.size + offset * 2\n                    dimensions.width = dimensions.width + offset * 2\n                    dimensions.height = dimensions.height + offset * 2\n                }\n\n                // acc.push({\n                //     ...omit(annotation, ['match', 'offset']),\n                //     ...position,\n                //     ...dimensions,\n                //     size: annotation.size || dimensions.size,\n                //     datum,\n                // } as any)\n                // return [\n                //     ...acc,\n                //     {\n                //         ...omit(annotation, ['match', 'offset']),\n                //         ...position,\n                //         ...dimensions,\n                //         size: annotation.size || dimensions.size,\n                //         datum,\n                //     },\n                // ]\n                return {\n                    ...omit(annotation, ['match', 'offset']),\n                    ...position,\n                    ...dimensions,\n                    size: annotation.size || dimensions.size,\n                    datum,\n                } as Required<BoundAnnotation<Datum>>\n            }),\n        ]\n\n        // return acc\n    }, [])\n\nexport const getLinkAngle = (\n    sourceX: number,\n    sourceY: number,\n    targetX: number,\n    targetY: number\n) => {\n    const angle = Math.atan2(targetY - sourceY, targetX - sourceX)\n\n    return absoluteAngleDegrees(radiansToDegrees(angle))\n}\n\nexport const computeAnnotation = <Datum>(\n    annotation: BoundAnnotation<Datum>\n): AnnotationInstructions => {\n    const {\n        x,\n        y,\n        noteX,\n        noteY,\n        noteWidth = defaultProps.noteWidth,\n        noteTextOffset = defaultProps.noteTextOffset,\n    } = annotation\n\n    let computedNoteX: number\n    let computedNoteY: number\n\n    if (isNumber(noteX)) {\n        computedNoteX = x + noteX\n    } else if (noteX.abs !== undefined) {\n        computedNoteX = noteX.abs\n    } else {\n        throw new Error(`noteX should be either a number or an object containing an 'abs' property`)\n    }\n\n    if (isNumber(noteY)) {\n        computedNoteY = y + noteY\n    } else if (noteY.abs !== undefined) {\n        computedNoteY = noteY.abs\n    } else {\n        throw new Error(`noteY should be either a number or an object containing an 'abs' property`)\n    }\n\n    let computedX = x\n    let computedY = y\n\n    const angle = getLinkAngle(x, y, computedNoteX, computedNoteY)\n\n    if (isCircleAnnotation<Datum>(annotation)) {\n        const position = positionFromAngle(degreesToRadians(angle), annotation.size / 2)\n        computedX += position.x\n        computedY += position.y\n    }\n\n    if (isRectAnnotation<Datum>(annotation)) {\n        const eighth = Math.round((angle + 90) / 45) % 8\n        if (eighth === 0) {\n            computedY -= annotation.height / 2\n        }\n        if (eighth === 1) {\n            computedX += annotation.width / 2\n            computedY -= annotation.height / 2\n        }\n        if (eighth === 2) {\n            computedX += annotation.width / 2\n        }\n        if (eighth === 3) {\n            computedX += annotation.width / 2\n            computedY += annotation.height / 2\n        }\n        if (eighth === 4) {\n            computedY += annotation.height / 2\n        }\n        if (eighth === 5) {\n            computedX -= annotation.width / 2\n            computedY += annotation.height / 2\n        }\n        if (eighth === 6) {\n            computedX -= annotation.width / 2\n        }\n        if (eighth === 7) {\n            computedX -= annotation.width / 2\n            computedY -= annotation.height / 2\n        }\n    }\n\n    let textX = computedNoteX\n    const textY = computedNoteY - noteTextOffset\n\n    let noteLineX = computedNoteX\n    const noteLineY = computedNoteY\n\n    if ((angle + 90) % 360 > 180) {\n        textX -= noteWidth\n        noteLineX -= noteWidth\n    } else {\n        noteLineX += noteWidth\n    }\n\n    return {\n        points: [\n            [computedX, computedY],\n            [computedNoteX, computedNoteY],\n            [noteLineX, noteLineY],\n        ] as [number, number][],\n        text: [textX, textY],\n        angle: angle + 90,\n    }\n}\n", "import { useMemo } from 'react'\nimport { bindAnnotations, computeAnnotation } from './compute'\nimport {\n    AnnotationDimensionsGetter,\n    AnnotationMatcher,\n    AnnotationPositionGetter,\n    BoundAnnotation,\n} from './types'\n\n/**\n * Bind annotations to a dataset.\n */\nexport const useAnnotations = <Datum>({\n    data,\n    annotations,\n    getPosition,\n    getDimensions,\n}: {\n    data: Datum[]\n    annotations: AnnotationMatcher<Datum>[]\n    getPosition: AnnotationPositionGetter<Datum>\n    getDimensions: AnnotationDimensionsGetter<Datum>\n}) =>\n    useMemo(\n        () =>\n            bindAnnotations<Datum>({\n                data,\n                annotations,\n                getPosition,\n                getDimensions,\n            }),\n        [data, annotations, getPosition, getDimensions]\n    )\n\nexport const useComputedAnnotations = <Datum>({\n    annotations,\n}: {\n    annotations: BoundAnnotation<Datum>[]\n}) =>\n    useMemo(\n        () =>\n            annotations.map(annotation => ({\n                ...annotation,\n                computed: computeAnnotation<Datum>({\n                    ...annotation,\n                }),\n            })),\n        [annotations]\n    )\n\nexport const useComputedAnnotation = <Datum>(annotation: BoundAnnotation<Datum>) =>\n    useMemo(() => computeAnnotation<Datum>(annotation), [annotation])\n", "import { createElement } from 'react'\nimport omit from 'lodash/omit'\nimport { useSpring, animated } from '@react-spring/web'\nimport { useTheme, useMotionConfig } from '@nivo/core'\nimport { NoteSvg } from './types'\n\nexport const AnnotationNote = <Datum,>({\n    datum,\n    x,\n    y,\n    note,\n}: {\n    datum: Datum\n    x: number\n    y: number\n    note: NoteSvg<Datum>\n}) => {\n    const theme = useTheme()\n    const { animate, config: springConfig } = useMotionConfig()\n\n    const animatedProps = useSpring({\n        x,\n        y,\n        config: springConfig,\n        immediate: !animate,\n    })\n\n    if (typeof note === 'function') {\n        return createElement(note, { x, y, datum })\n    }\n\n    return (\n        <>\n            {theme.annotations.text.outlineWidth > 0 && (\n                <animated.text\n                    x={animatedProps.x}\n                    y={animatedProps.y}\n                    style={{\n                        ...theme.annotations.text,\n                        strokeLinejoin: 'round',\n                        strokeWidth: theme.annotations.text.outlineWidth * 2,\n                        stroke: theme.annotations.text.outlineColor,\n                    }}\n                >\n                    {note}\n                </animated.text>\n            )}\n            <animated.text\n                x={animatedProps.x}\n                y={animatedProps.y}\n                style={omit(theme.annotations.text, ['outlineWidth', 'outlineColor'])}\n            >\n                {note}\n            </animated.text>\n        </>\n    )\n}\n", "import { useMemo } from 'react'\nimport { animated } from '@react-spring/web'\nimport { useAnimatedPath, useTheme } from '@nivo/core'\n\nexport const AnnotationLink = ({\n    points,\n    isOutline = false,\n}: {\n    points: [number, number][]\n    isOutline?: boolean\n}) => {\n    const theme = useTheme()\n\n    const path = useMemo(() => {\n        const [firstPoint, ...otherPoints] = points\n\n        return otherPoints.reduce(\n            (acc, [x, y]) => `${acc} L${x},${y}`,\n            `M${firstPoint[0]},${firstPoint[1]}`\n        )\n    }, [points])\n\n    const animatedPath = useAnimatedPath(path)\n\n    if (isOutline && theme.annotations.link.outlineWidth <= 0) {\n        return null\n    }\n\n    const style = { ...theme.annotations.link }\n    if (isOutline) {\n        style.strokeLinecap = 'square'\n        style.strokeWidth =\n            theme.annotations.link.strokeWidth + theme.annotations.link.outlineWidth * 2\n        style.stroke = theme.annotations.link.outlineColor\n        style.opacity = theme.annotations.link.outlineOpacity\n    }\n\n    return <animated.path fill=\"none\" d={animatedPath} style={style} />\n}\n", "import { useSpring, animated } from '@react-spring/web'\nimport { useMotionConfig, useTheme } from '@nivo/core'\n\nexport const CircleAnnotationOutline = ({ x, y, size }: { x: number; y: number; size: number }) => {\n    const theme = useTheme()\n    const { animate, config: springConfig } = useMotionConfig()\n\n    const animatedProps = useSpring({\n        x,\n        y,\n        radius: size / 2,\n        config: springConfig,\n        immediate: !animate,\n    })\n\n    return (\n        <>\n            {theme.annotations.outline.outlineWidth > 0 && (\n                <animated.circle\n                    cx={animatedProps.x}\n                    cy={animatedProps.y}\n                    r={animatedProps.radius}\n                    style={{\n                        ...theme.annotations.outline,\n                        fill: 'none',\n                        strokeWidth:\n                            theme.annotations.outline.strokeWidth +\n                            theme.annotations.outline.outlineWidth * 2,\n                        stroke: theme.annotations.outline.outlineColor,\n                        opacity: theme.annotations.outline.outlineOpacity,\n                    }}\n                />\n            )}\n            <animated.circle\n                cx={animatedProps.x}\n                cy={animatedProps.y}\n                r={animatedProps.radius}\n                style={theme.annotations.outline}\n            />\n        </>\n    )\n}\n", "import { useSpring, animated } from '@react-spring/web'\nimport { useMotionConfig, useTheme } from '@nivo/core'\nimport { defaultProps } from './props'\n\nexport const DotAnnotationOutline = ({\n    x,\n    y,\n    size = defaultProps.dotSize,\n}: {\n    x: number\n    y: number\n    size?: number\n}) => {\n    const theme = useTheme()\n    const { animate, config: springConfig } = useMotionConfig()\n\n    const animatedProps = useSpring({\n        x,\n        y,\n        radius: size / 2,\n        config: springConfig,\n        immediate: !animate,\n    })\n\n    return (\n        <>\n            {theme.annotations.outline.outlineWidth > 0 && (\n                <animated.circle\n                    cx={animatedProps.x}\n                    cy={animatedProps.y}\n                    r={animatedProps.radius}\n                    style={{\n                        ...theme.annotations.outline,\n                        fill: 'none',\n                        strokeWidth: theme.annotations.outline.outlineWidth * 2,\n                        stroke: theme.annotations.outline.outlineColor,\n                        opacity: theme.annotations.outline.outlineOpacity,\n                    }}\n                />\n            )}\n            <animated.circle\n                cx={animatedProps.x}\n                cy={animatedProps.y}\n                r={animatedProps.radius}\n                style={theme.annotations.symbol}\n            />\n        </>\n    )\n}\n", "import { useSpring, animated } from '@react-spring/web'\nimport { useMotionConfig, useTheme } from '@nivo/core'\n\nexport const RectAnnotationOutline = ({\n    x,\n    y,\n    width,\n    height,\n    borderRadius = 6,\n}: {\n    x: number\n    y: number\n    width: number\n    height: number\n    borderRadius?: number\n}) => {\n    const theme = useTheme()\n    const { animate, config: springConfig } = useMotionConfig()\n\n    const animatedProps = useSpring({\n        x: x - width / 2,\n        y: y - height / 2,\n        width,\n        height,\n        config: springConfig,\n        immediate: !animate,\n    })\n\n    return (\n        <>\n            {theme.annotations.outline.outlineWidth > 0 && (\n                <animated.rect\n                    x={animatedProps.x}\n                    y={animatedProps.y}\n                    rx={borderRadius}\n                    ry={borderRadius}\n                    width={animatedProps.width}\n                    height={animatedProps.height}\n                    style={{\n                        ...theme.annotations.outline,\n                        fill: 'none',\n                        strokeWidth:\n                            theme.annotations.outline.strokeWidth +\n                            theme.annotations.outline.outlineWidth * 2,\n                        stroke: theme.annotations.outline.outlineColor,\n                        opacity: theme.annotations.outline.outlineOpacity,\n                    }}\n                />\n            )}\n            <animated.rect\n                x={animatedProps.x}\n                y={animatedProps.y}\n                rx={borderRadius}\n                ry={borderRadius}\n                width={animatedProps.width}\n                height={animatedProps.height}\n                style={theme.annotations.outline}\n            />\n        </>\n    )\n}\n", "import { useComputedAnnotation } from './hooks'\nimport { AnnotationNote } from './AnnotationNote'\nimport { AnnotationLink } from './AnnotationLink'\nimport { CircleAnnotationOutline } from './CircleAnnotationOutline'\nimport { DotAnnotationOutline } from './DotAnnotationOutline'\nimport { RectAnnotationOutline } from './RectAnnotationOutline'\nimport { BoundAnnotation } from './types'\nimport { isCircleAnnotation, isDotAnnotation, isRectAnnotation, isSvgNote } from './utils'\n\nexport const Annotation = <Datum,>(annotation: BoundAnnotation<Datum>) => {\n    const { datum, x, y, note } = annotation\n    const computed = useComputedAnnotation(annotation)\n\n    if (!isSvgNote(note)) {\n        throw new Error('note should be a valid react element')\n    }\n\n    return (\n        <>\n            <AnnotationLink points={computed.points} isOutline={true} />\n            {isCircleAnnotation(annotation) && (\n                <CircleAnnotationOutline x={x} y={y} size={annotation.size} />\n            )}\n            {isDotAnnotation(annotation) && (\n                <DotAnnotationOutline x={x} y={y} size={annotation.size} />\n            )}\n            {isRectAnnotation(annotation) && (\n                <RectAnnotationOutline\n                    x={x}\n                    y={y}\n                    width={annotation.width}\n                    height={annotation.height}\n                    borderRadius={annotation.borderRadius}\n                />\n            )}\n            <AnnotationLink points={computed.points} />\n            <AnnotationNote datum={datum} x={computed.text[0]} y={computed.text[1]} note={note} />\n        </>\n    )\n}\n", "import { CompleteTheme } from '@nivo/core'\nimport { ComputedAnnotation } from './types'\nimport { isCanvasNote, isCircleAnnotation, isDotAnnotation, isRectAnnotation } from './utils'\n\nconst drawPoints = (ctx: CanvasRenderingContext2D, points: [number, number][]) => {\n    points.forEach(([x, y], index) => {\n        if (index === 0) {\n            ctx.moveTo(x, y)\n        } else {\n            ctx.lineTo(x, y)\n        }\n    })\n}\n\nexport const renderAnnotationsToCanvas = <Datum>(\n    ctx: CanvasRenderingContext2D,\n    {\n        annotations,\n        theme,\n    }: {\n        annotations: ComputedAnnotation<Datum>[]\n        theme: CompleteTheme\n    }\n) => {\n    if (annotations.length === 0) return\n\n    ctx.save()\n    annotations.forEach(annotation => {\n        if (!isCanvasNote(annotation.note)) {\n            throw new Error('note is invalid for canvas implementation')\n        }\n\n        if (theme.annotations.link.outlineWidth > 0) {\n            ctx.lineCap = 'square'\n            ctx.strokeStyle = theme.annotations.link.outlineColor\n            ctx.lineWidth =\n                theme.annotations.link.strokeWidth + theme.annotations.link.outlineWidth * 2\n            ctx.beginPath()\n            drawPoints(ctx, annotation.computed.points)\n            ctx.stroke()\n            ctx.lineCap = 'butt'\n        }\n\n        if (isCircleAnnotation(annotation) && theme.annotations.outline.outlineWidth > 0) {\n            ctx.strokeStyle = theme.annotations.outline.outlineColor\n            ctx.lineWidth =\n                theme.annotations.outline.strokeWidth + theme.annotations.outline.outlineWidth * 2\n            ctx.beginPath()\n            ctx.arc(annotation.x, annotation.y, annotation.size / 2, 0, 2 * Math.PI)\n            ctx.stroke()\n        }\n\n        if (isDotAnnotation(annotation) && theme.annotations.symbol.outlineWidth > 0) {\n            ctx.strokeStyle = theme.annotations.symbol.outlineColor\n            ctx.lineWidth = theme.annotations.symbol.outlineWidth * 2\n            ctx.beginPath()\n            ctx.arc(annotation.x, annotation.y, annotation.size / 2, 0, 2 * Math.PI)\n            ctx.stroke()\n        }\n\n        if (isRectAnnotation(annotation) && theme.annotations.outline.outlineWidth > 0) {\n            ctx.strokeStyle = theme.annotations.outline.outlineColor\n            ctx.lineWidth =\n                theme.annotations.outline.strokeWidth + theme.annotations.outline.outlineWidth * 2\n            ctx.beginPath()\n            ctx.rect(\n                annotation.x - annotation.width / 2,\n                annotation.y - annotation.height / 2,\n                annotation.width,\n                annotation.height\n            )\n            ctx.stroke()\n        }\n\n        ctx.strokeStyle = theme.annotations.link.stroke\n        ctx.lineWidth = theme.annotations.link.strokeWidth\n        ctx.beginPath()\n        drawPoints(ctx, annotation.computed.points)\n        ctx.stroke()\n\n        if (isCircleAnnotation(annotation)) {\n            ctx.strokeStyle = theme.annotations.outline.stroke\n            ctx.lineWidth = theme.annotations.outline.strokeWidth\n            ctx.beginPath()\n            ctx.arc(annotation.x, annotation.y, annotation.size / 2, 0, 2 * Math.PI)\n            ctx.stroke()\n        }\n\n        if (isDotAnnotation(annotation)) {\n            ctx.fillStyle = theme.annotations.symbol.fill\n            ctx.beginPath()\n            ctx.arc(annotation.x, annotation.y, annotation.size / 2, 0, 2 * Math.PI)\n            ctx.fill()\n        }\n\n        if (isRectAnnotation(annotation)) {\n            ctx.strokeStyle = theme.annotations.outline.stroke\n            ctx.lineWidth = theme.annotations.outline.strokeWidth\n            ctx.beginPath()\n            ctx.rect(\n                annotation.x - annotation.width / 2,\n                annotation.y - annotation.height / 2,\n                annotation.width,\n                annotation.height\n            )\n            ctx.stroke()\n        }\n\n        if (typeof annotation.note === 'function') {\n            annotation.note(ctx, {\n                datum: annotation.datum,\n                x: annotation.computed.text[0],\n                y: annotation.computed.text[1],\n                theme,\n            })\n        } else {\n            ctx.font = `${theme.annotations.text.fontSize}px ${theme.annotations.text.fontFamily}`\n            ctx.textAlign = 'left'\n            ctx.textBaseline = 'alphabetic'\n\n            ctx.fillStyle = theme.annotations.text.fill\n            ctx.strokeStyle = theme.annotations.text.outlineColor\n            ctx.lineWidth = theme.annotations.text.outlineWidth * 2\n\n            if (theme.annotations.text.outlineWidth > 0) {\n                ctx.lineJoin = 'round'\n                ctx.strokeText(\n                    annotation.note,\n                    annotation.computed.text[0],\n                    annotation.computed.text[1]\n                )\n                ctx.lineJoin = 'miter'\n            }\n            ctx.fillText(annotation.note, annotation.computed.text[0], annotation.computed.text[1])\n        }\n    })\n    ctx.restore()\n}\n", "import { Annotation, useAnnotations } from '@nivo/annotations'\nimport { BarAnnotationsProps } from './types'\n\nexport const BarAnnotations = <RawDatum,>({ bars, annotations }: BarAnnotationsProps<RawDatum>) => {\n    const boundAnnotations = useAnnotations({\n        data: bars,\n        annotations,\n        getPosition: bar => ({\n            x: bar.x + bar.width / 2,\n            y: bar.y + bar.height / 2,\n        }),\n        getDimensions: ({ height, width }) => ({\n            width,\n            height,\n            size: Math.max(width, height),\n        }),\n    })\n\n    return (\n        <>\n            {boundAnnotations.map((annotation, i) => (\n                <Annotation key={i} {...annotation} />\n            ))}\n        </>\n    )\n}\n", "import { BoxLegendSvg } from '@nivo/legends'\nimport { BarLegendProps, LegendData } from './types'\n\ninterface BarLegendsProps {\n    width: number\n    height: number\n    legends: [BarLegendProps, LegendData[]][]\n    toggleSerie: (id: string | number) => void\n}\n\nexport const BarLegends = ({ width, height, legends, toggleSerie }: BarLegendsProps) => (\n    <>\n        {legends.map(([legend, data], i) => (\n            <BoxLegendSvg\n                key={i}\n                {...legend}\n                containerWidth={width}\n                containerHeight={height}\n                data={legend.data ?? data}\n                toggleSerie={\n                    legend.toggleSerie && legend.dataFrom === 'keys' ? toggleSerie : undefined\n                }\n            />\n        ))}\n    </>\n)\n", "import { createElement, MouseEvent, useCallback, useMemo } from 'react'\nimport { animated, to } from '@react-spring/web'\nimport { useTheme } from '@nivo/core'\nimport { useTooltip } from '@nivo/tooltip'\nimport { BarDatum, BarItemProps } from './types'\n\nexport const BarItem = <RawDatum extends BarDatum>({\n    bar: { data, ...bar },\n\n    style: {\n        borderColor,\n        color,\n        height,\n        labelColor,\n        labelOpacity,\n        labelX,\n        labelY,\n        transform,\n        width,\n    },\n\n    borderRadius,\n    borderWidth,\n\n    label,\n    shouldRenderLabel,\n\n    isInteractive,\n    onClick,\n    onMouseEnter,\n    onMouseLeave,\n\n    tooltip,\n\n    isFocusable,\n    ariaLabel,\n    ariaLabelledBy,\n    ariaDescribedBy,\n}: BarItemProps<RawDatum>) => {\n    const theme = useTheme()\n    const { showTooltipFromEvent, showTooltipAt, hideTooltip } = useTooltip()\n\n    const renderTooltip = useMemo(\n        () => () => createElement(tooltip, { ...bar, ...data }),\n        [tooltip, bar, data]\n    )\n\n    const handleClick = useCallback(\n        (event: MouseEvent<SVGRectElement>) => {\n            onClick?.({ color: bar.color, ...data }, event)\n        },\n        [bar, data, onClick]\n    )\n    const handleTooltip = useCallback(\n        (event: MouseEvent<SVGRectElement>) => showTooltipFromEvent(renderTooltip(), event),\n        [showTooltipFromEvent, renderTooltip]\n    )\n    const handleMouseEnter = useCallback(\n        (event: MouseEvent<SVGRectElement>) => {\n            onMouseEnter?.(data, event)\n            showTooltipFromEvent(renderTooltip(), event)\n        },\n        [data, onMouseEnter, showTooltipFromEvent, renderTooltip]\n    )\n    const handleMouseLeave = useCallback(\n        (event: MouseEvent<SVGRectElement>) => {\n            onMouseLeave?.(data, event)\n            hideTooltip()\n        },\n        [data, hideTooltip, onMouseLeave]\n    )\n\n    // extra handlers to allow keyboard navigation\n    const handleFocus = useCallback(() => {\n        showTooltipAt(renderTooltip(), [bar.absX + bar.width / 2, bar.absY])\n    }, [showTooltipAt, renderTooltip, bar])\n    const handleBlur = useCallback(() => {\n        hideTooltip()\n    }, [hideTooltip])\n\n    return (\n        <animated.g transform={transform}>\n            <animated.rect\n                width={to(width, value => Math.max(value, 0))}\n                height={to(height, value => Math.max(value, 0))}\n                rx={borderRadius}\n                ry={borderRadius}\n                fill={data.fill ?? color}\n                strokeWidth={borderWidth}\n                stroke={borderColor}\n                focusable={isFocusable}\n                tabIndex={isFocusable ? 0 : undefined}\n                aria-label={ariaLabel ? ariaLabel(data) : undefined}\n                aria-labelledby={ariaLabelledBy ? ariaLabelledBy(data) : undefined}\n                aria-describedby={ariaDescribedBy ? ariaDescribedBy(data) : undefined}\n                onMouseEnter={isInteractive ? handleMouseEnter : undefined}\n                onMouseMove={isInteractive ? handleTooltip : undefined}\n                onMouseLeave={isInteractive ? handleMouseLeave : undefined}\n                onClick={isInteractive ? handleClick : undefined}\n                onFocus={isInteractive && isFocusable ? handleFocus : undefined}\n                onBlur={isInteractive && isFocusable ? handleBlur : undefined}\n            />\n            {shouldRenderLabel && (\n                <animated.text\n                    x={labelX}\n                    y={labelY}\n                    textAnchor=\"middle\"\n                    dominantBaseline=\"central\"\n                    fillOpacity={labelOpacity}\n                    style={{\n                        ...theme.labels.text,\n                        pointerEvents: 'none',\n                        fill: labelColor,\n                    }}\n                >\n                    {label}\n                </animated.text>\n            )}\n        </animated.g>\n    )\n}\n", "import { BarItem } from './BarItem'\nimport { BarTooltip } from './BarTooltip'\nimport { ComputedDatum } from './types'\nimport { InheritedColorConfig, OrdinalColorScaleConfig } from '@nivo/colors'\nimport { ScaleBandSpec, ScaleSpec } from '@nivo/scales'\n\nexport const defaultProps = {\n    indexBy: 'id',\n    keys: ['value'],\n\n    groupMode: 'stacked' as const,\n    layout: 'vertical' as const,\n    reverse: false,\n\n    minValue: 'auto' as const,\n    maxValue: 'auto' as const,\n\n    valueScale: { type: 'linear' } as ScaleSpec,\n    indexScale: { type: 'band', round: true } as ScaleBandSpec,\n\n    padding: 0.1,\n    innerPadding: 0,\n\n    axisBottom: {},\n    axisLeft: {},\n    enableGridX: false,\n    enableGridY: true,\n\n    enableLabel: true,\n    label: 'formattedValue',\n    labelSkipWidth: 0,\n    labelSkipHeight: 0,\n    labelTextColor: { from: 'theme', theme: 'labels.text.fill' },\n\n    colorBy: 'id' as const,\n    colors: { scheme: 'nivo' } as OrdinalColorScaleConfig,\n\n    borderRadius: 0,\n    borderWidth: 0,\n    borderColor: { from: 'color' } as InheritedColorConfig<any>,\n\n    isInteractive: true,\n    tooltip: BarTooltip,\n    tooltipLabel: <RawDatum>(datum: ComputedDatum<RawDatum>) => `${datum.id} - ${datum.indexValue}`,\n\n    legends: [],\n    initialHiddenIds: [],\n    annotations: [],\n    markers: [],\n}\n\nexport const svgDefaultProps = {\n    ...defaultProps,\n    layers: ['grid', 'axes', 'bars', 'markers', 'legends', 'annotations'],\n    barComponent: BarItem,\n\n    defs: [],\n    fill: [],\n\n    animate: true,\n    motionConfig: 'default',\n\n    role: 'img',\n    isFocusable: false,\n}\n\nexport const canvasDefaultProps = {\n    ...defaultProps,\n    layers: ['grid', 'axes', 'bars', 'legends', 'annotations'],\n\n    pixelRatio: typeof window !== 'undefined' ? window.devicePixelRatio ?? 1 : 1,\n}\n", "import { BarTooltipProps } from './types'\nimport { BasicTooltip } from '@nivo/tooltip'\n\nexport const BarTooltip = <RawDatum,>({ color, label, ...data }: BarTooltipProps<RawDatum>) => {\n    return <BasicTooltip id={label} value={data.formattedValue} enableChip={true} color={color} />\n}\n", "import { ScaleBandSpec, ScaleBand, computeScale } from '@nivo/scales'\n\n/**\n * Generates indexed scale.\n */\nexport const getIndexScale = <RawDatum>(\n    data: RawDatum[],\n    getIndex: (datum: RawDatum) => string,\n    padding: number,\n    indexScale: ScaleBandSpec,\n    size: number,\n    axis: 'x' | 'y'\n) => {\n    return (\n        computeScale(\n            indexScale,\n            { all: data.map(getIndex), min: 0, max: 0 },\n            size,\n            axis\n        ) as ScaleBand<string>\n    ).padding(padding)\n}\n\n/**\n * This method ensures all the provided keys exist in the entire series.\n */\nexport const normalizeData = <RawDatum>(data: RawDatum[], keys: string[]) =>\n    data.map(\n        item =>\n            ({\n                ...keys.reduce<Record<string, unknown>>((acc, key) => {\n                    acc[key] = null\n                    return acc\n                }, {}),\n                ...item,\n            } as RawDatum)\n    )\n\nexport const filterNullValues = <RawDatum extends Record<string, unknown>>(data: RawDatum) =>\n    Object.keys(data).reduce<Record<string, unknown>>((acc, key) => {\n        if (data[key]) {\n            acc[key] = data[key]\n        }\n        return acc\n    }, {}) as Exclude<RawDatum, null | undefined | false | '' | 0>\n\nexport const coerceValue = <T>(value: T) => [value, Number(value)] as const\n", "import { Margin } from '@nivo/core'\nimport { OrdinalColorScale } from '@nivo/colors'\nimport { Scale, ScaleBand, computeScale } from '@nivo/scales'\nimport { BarDatum, BarSvgProps, ComputedBarDatum, ComputedDatum } from '../types'\nimport { coerceValue, filterNullValues, getIndexScale, normalizeData } from './common'\n\ntype Params<RawDatum, XScaleInput, YScaleInput> = {\n    data: RawDatum[]\n    formatValue: (value: number) => string\n    getColor: OrdinalColorScale<ComputedDatum<RawDatum>>\n    getIndex: (datum: RawDatum) => string\n    getTooltipLabel: (datum: ComputedDatum<RawDatum>) => string\n    innerPadding: number\n    keys: string[]\n    xScale: XScaleInput extends string ? ScaleBand<XScaleInput> : Scale<XScaleInput, number>\n    yScale: YScaleInput extends string ? ScaleBand<YScaleInput> : Scale<YScaleInput, number>\n    margin: Margin\n}\n\nconst gt = (value: number, other: number) => value > other\nconst lt = (value: number, other: number) => value < other\n\nconst range = (start: number, end: number) =>\n    Array.from(' '.repeat(end - start), (_, index) => start + index)\n\nconst clampToZero = (value: number) => (gt(value, 0) ? 0 : value)\nconst zeroIfNotFinite = (value: number) => (isFinite(value) ? value : 0)\n\n/**\n * Generates x/y scales & bars for vertical grouped bar chart.\n */\nconst generateVerticalGroupedBars = <RawDatum extends Record<string, unknown>>(\n    {\n        data,\n        formatValue,\n        getColor,\n        getIndex,\n        getTooltipLabel,\n        innerPadding = 0,\n        keys,\n        xScale,\n        yScale,\n        margin,\n    }: Params<RawDatum, string, number>,\n    barWidth: number,\n    reverse: boolean,\n    yRef: number\n): ComputedBarDatum<RawDatum>[] => {\n    const compare = reverse ? lt : gt\n    const getY = (d: number) => (compare(d, 0) ? yScale(d) ?? 0 : yRef)\n    const getHeight = (d: number, y: number) => (compare(d, 0) ? yRef - y : (yScale(d) ?? 0) - yRef)\n    const cleanedData = data.map(filterNullValues)\n\n    const bars: ComputedBarDatum<RawDatum>[] = []\n    keys.forEach((key, i) =>\n        range(0, xScale.domain().length).forEach(index => {\n            const [rawValue, value] = coerceValue(data[index][key])\n            const indexValue = getIndex(data[index])\n            const x = (xScale(indexValue) ?? 0) + barWidth * i + innerPadding * i\n            const y = getY(value)\n            const barHeight = getHeight(value, y)\n            const barData: ComputedDatum<RawDatum> = {\n                id: key,\n                value: rawValue === null ? rawValue : value,\n                formattedValue: formatValue(value),\n                hidden: false,\n                index,\n                indexValue,\n                data: cleanedData[index],\n            }\n\n            bars.push({\n                key: `${key}.${barData.indexValue}`,\n                index: bars.length,\n                data: barData,\n                x,\n                y,\n                absX: margin.left + x,\n                absY: margin.top + y,\n                width: barWidth,\n                height: barHeight,\n                color: getColor(barData),\n                label: getTooltipLabel(barData),\n            })\n        })\n    )\n\n    return bars\n}\n\n/**\n * Generates x/y scales & bars for horizontal grouped bar chart.\n */\nconst generateHorizontalGroupedBars = <RawDatum extends Record<string, unknown>>(\n    {\n        data,\n        formatValue,\n        getIndex,\n        getColor,\n        getTooltipLabel,\n        keys,\n        innerPadding = 0,\n        xScale,\n        yScale,\n        margin,\n    }: Params<RawDatum, number, string>,\n    barHeight: number,\n    reverse: boolean,\n    xRef: number\n): ComputedBarDatum<RawDatum>[] => {\n    const compare = reverse ? lt : gt\n    const getX = (d: number) => (compare(d, 0) ? xRef : xScale(d) ?? 0)\n    const getWidth = (d: number, x: number) => (compare(d, 0) ? (xScale(d) ?? 0) - xRef : xRef - x)\n    const cleanedData = data.map(filterNullValues)\n\n    const bars: ComputedBarDatum<RawDatum>[] = []\n    keys.forEach((key, i) =>\n        range(0, yScale.domain().length).forEach(index => {\n            const [rawValue, value] = coerceValue(data[index][key])\n            const indexValue = getIndex(data[index])\n            const x = getX(value)\n            const y = (yScale(indexValue) ?? 0) + barHeight * i + innerPadding * i\n            const barWidth = getWidth(value, x)\n            const barData: ComputedDatum<RawDatum> = {\n                id: key,\n                value: rawValue === null ? rawValue : value,\n                formattedValue: formatValue(value),\n                hidden: false,\n                index,\n                indexValue,\n                data: cleanedData[index],\n            }\n\n            bars.push({\n                key: `${key}.${barData.indexValue}`,\n                index: bars.length,\n                data: barData,\n                x,\n                y,\n                absX: margin.left + x,\n                absY: margin.top + y,\n                width: barWidth,\n                height: barHeight,\n                color: getColor(barData),\n                label: getTooltipLabel(barData),\n            })\n        })\n    )\n\n    return bars\n}\n\n/**\n * Generates x/y scales & bars for grouped bar chart.\n */\nexport const generateGroupedBars = <RawDatum extends BarDatum>({\n    layout,\n    minValue,\n    maxValue,\n    reverse,\n    width,\n    height,\n    padding = 0,\n    innerPadding = 0,\n    valueScale,\n    indexScale: indexScaleConfig,\n    hiddenIds = [],\n    ...props\n}: Pick<\n    Required<BarSvgProps<RawDatum>>,\n    | 'data'\n    | 'height'\n    | 'indexScale'\n    | 'innerPadding'\n    | 'keys'\n    | 'layout'\n    | 'maxValue'\n    | 'minValue'\n    | 'padding'\n    | 'reverse'\n    | 'valueScale'\n    | 'width'\n> & {\n    formatValue: (value: number) => string\n    getColor: OrdinalColorScale<ComputedDatum<RawDatum>>\n    getIndex: (datum: RawDatum) => string\n    getTooltipLabel: (datum: ComputedDatum<RawDatum>) => string\n    margin: Margin\n    hiddenIds?: string[]\n}) => {\n    const keys = props.keys.filter(key => !hiddenIds.includes(key))\n    const data = normalizeData(props.data, keys)\n    const [axis, otherAxis, size] =\n        layout === 'vertical' ? (['y', 'x', width] as const) : (['x', 'y', height] as const)\n    const indexScale = getIndexScale(\n        data,\n        props.getIndex,\n        padding,\n        indexScaleConfig,\n        size,\n        otherAxis\n    )\n\n    const scaleSpec = {\n        max: maxValue,\n        min: minValue,\n        reverse,\n        ...valueScale,\n    }\n\n    const clampMin = scaleSpec.min === 'auto' ? clampToZero : (value: number) => value\n\n    const values = data\n        .reduce<number[]>((acc, entry) => [...acc, ...keys.map(k => entry[k] as number)], [])\n        .filter(Boolean)\n    const min = clampMin(Math.min(...values))\n    const max = zeroIfNotFinite(Math.max(...values))\n\n    const scale = computeScale(\n        scaleSpec as any,\n        { all: values, min, max },\n        axis === 'x' ? width : height,\n        axis\n    )\n\n    const [xScale, yScale] = layout === 'vertical' ? [indexScale, scale] : [scale, indexScale]\n\n    const bandwidth = (indexScale.bandwidth() - innerPadding * (keys.length - 1)) / keys.length\n    const params = [\n        { ...props, data, keys, innerPadding, xScale, yScale } as Params<RawDatum, any, any>,\n        bandwidth,\n        scaleSpec.reverse,\n        scale(0) ?? 0,\n    ] as const\n\n    const bars: ComputedBarDatum<RawDatum>[] =\n        bandwidth > 0\n            ? layout === 'vertical'\n                ? generateVerticalGroupedBars(...params)\n                : generateHorizontalGroupedBars(...params)\n            : []\n\n    return { xScale, yScale, bars }\n}\n", "import { Margin } from '@nivo/core'\nimport { OrdinalColorScale } from '@nivo/colors'\nimport { Scale, ScaleBand, computeScale } from '@nivo/scales'\nimport { Series, SeriesPoint, stack, stackOffsetDiverging } from 'd3-shape'\nimport { BarDatum, BarSvgProps, ComputedBarDatum, ComputedDatum } from '../types'\nimport { coerceValue, filterNullValues, getIndexScale, normalizeData } from './common'\n\ntype StackDatum<RawDatum> = SeriesPoint<RawDatum>\n\ntype Params<RawDatum, XScaleInput, YScaleInput> = {\n    formatValue: (value: number) => string\n    getColor: OrdinalColorScale<ComputedDatum<RawDatum>>\n    getIndex: (datum: RawDatum) => string\n    getTooltipLabel: (datum: ComputedDatum<RawDatum>) => string\n    innerPadding: number\n    stackedData: Series<RawDatum, string>[]\n    xScale: XScaleInput extends string ? ScaleBand<XScaleInput> : Scale<XScaleInput, number>\n    yScale: YScaleInput extends string ? ScaleBand<YScaleInput> : Scale<YScaleInput, number>\n    margin: Margin\n}\n\nconst flattenDeep = <T>(arr: T[]): T =>\n    arr.some(Array.isArray) ? flattenDeep(([] as T[]).concat(...arr)) : (arr as unknown as T)\n\nconst filterZerosIfLog = (array: number[], type: string) =>\n    type === 'log' ? array.filter(num => num !== 0) : array\n\n/**\n * Generates x/y scales & bars for vertical stacked bar chart.\n */\nconst generateVerticalStackedBars = <RawDatum extends Record<string, unknown>>(\n    {\n        formatValue,\n        getColor,\n        getIndex,\n        getTooltipLabel,\n        innerPadding,\n        stackedData,\n        xScale,\n        yScale,\n        margin,\n    }: Params<RawDatum, string, number>,\n    barWidth: number,\n    reverse: boolean\n): ComputedBarDatum<RawDatum>[] => {\n    const getY = (d: StackDatum<RawDatum>) => yScale(d[reverse ? 0 : 1])\n    const getHeight = (d: StackDatum<RawDatum>, y: number) => (yScale(d[reverse ? 1 : 0]) ?? 0) - y\n\n    const bars: ComputedBarDatum<RawDatum>[] = []\n    stackedData.forEach(stackedDataItem =>\n        xScale.domain().forEach((index, i) => {\n            const d = stackedDataItem[i]\n            const x = xScale(getIndex(d.data)) ?? 0\n            const y = (getY(d) ?? 0) + innerPadding * 0.5\n            const barHeight = getHeight(d, y) - innerPadding\n            const [rawValue, value] = coerceValue(d.data[stackedDataItem.key])\n\n            const barData: ComputedDatum<RawDatum> = {\n                id: stackedDataItem.key,\n                value: rawValue === null ? rawValue : value,\n                formattedValue: formatValue(value),\n                hidden: false,\n                index: i,\n                indexValue: index,\n                data: filterNullValues(d.data),\n            }\n\n            bars.push({\n                key: `${stackedDataItem.key}.${index}`,\n                index: bars.length,\n                data: barData,\n                x,\n                y,\n                absX: margin.left + x,\n                absY: margin.top + y,\n                width: barWidth,\n                height: barHeight,\n                color: getColor(barData),\n                label: getTooltipLabel(barData),\n            })\n        })\n    )\n\n    return bars\n}\n\n/**\n * Generates x/y scales & bars for horizontal stacked bar chart.\n */\nconst generateHorizontalStackedBars = <RawDatum extends Record<string, unknown>>(\n    {\n        formatValue,\n        getColor,\n        getIndex,\n        getTooltipLabel,\n        innerPadding,\n        stackedData,\n        xScale,\n        yScale,\n        margin,\n    }: Params<RawDatum, number, string>,\n    barHeight: number,\n    reverse: boolean\n): ComputedBarDatum<RawDatum>[] => {\n    const getX = (d: StackDatum<RawDatum>) => xScale(d[reverse ? 1 : 0])\n    const getWidth = (d: StackDatum<RawDatum>, x: number) => (xScale(d[reverse ? 0 : 1]) ?? 0) - x\n\n    const bars: ComputedBarDatum<RawDatum>[] = []\n    stackedData.forEach(stackedDataItem =>\n        yScale.domain().forEach((index, i) => {\n            const d = stackedDataItem[i]\n            const y = yScale(getIndex(d.data)) ?? 0\n            const x = (getX(d) ?? 0) + innerPadding * 0.5\n            const barWidth = getWidth(d, x) - innerPadding\n            const [rawValue, value] = coerceValue(d.data[stackedDataItem.key])\n\n            const barData: ComputedDatum<RawDatum> = {\n                id: stackedDataItem.key,\n                value: rawValue === null ? rawValue : value,\n                formattedValue: formatValue(value),\n                hidden: false,\n                index: i,\n                indexValue: index,\n                data: filterNullValues(d.data),\n            }\n\n            bars.push({\n                key: `${stackedDataItem.key}.${index}`,\n                index: bars.length,\n                data: barData,\n                x,\n                y,\n                absX: margin.left + x,\n                absY: margin.top + y,\n                width: barWidth,\n                height: barHeight,\n                color: getColor(barData),\n                label: getTooltipLabel(barData),\n            })\n        })\n    )\n\n    return bars\n}\n\n/**\n * Generates x/y scales & bars for stacked bar chart.\n */\nexport const generateStackedBars = <RawDatum extends BarDatum>({\n    data,\n    layout,\n    minValue,\n    maxValue,\n    reverse,\n    width,\n    height,\n    padding = 0,\n    valueScale,\n    indexScale: indexScaleConfig,\n    hiddenIds = [],\n    ...props\n}: Pick<\n    Required<BarSvgProps<RawDatum>>,\n    | 'data'\n    | 'height'\n    | 'indexScale'\n    | 'innerPadding'\n    | 'keys'\n    | 'layout'\n    | 'maxValue'\n    | 'minValue'\n    | 'padding'\n    | 'reverse'\n    | 'valueScale'\n    | 'width'\n> & {\n    formatValue: (value: number) => string\n    getColor: OrdinalColorScale<ComputedDatum<RawDatum>>\n    getIndex: (datum: RawDatum) => string\n    getTooltipLabel: (datum: ComputedDatum<RawDatum>) => string\n    margin: Margin\n    hiddenIds?: string[]\n}) => {\n    const keys = props.keys.filter(key => !hiddenIds.includes(key))\n    const stackedData = stack<RawDatum, string>().keys(keys).offset(stackOffsetDiverging)(\n        normalizeData(data, keys)\n    )\n\n    const [axis, otherAxis, size] =\n        layout === 'vertical' ? (['y', 'x', width] as const) : (['x', 'y', height] as const)\n    const indexScale = getIndexScale(\n        data,\n        props.getIndex,\n        padding,\n        indexScaleConfig,\n        size,\n        otherAxis\n    )\n\n    const scaleSpec = {\n        max: maxValue,\n        min: minValue,\n        reverse,\n        ...valueScale,\n    }\n\n    const values = filterZerosIfLog(\n        flattenDeep(stackedData as unknown as number[][]),\n        valueScale.type\n    )\n    const min = Math.min(...values)\n    const max = Math.max(...values)\n\n    const scale = computeScale(\n        scaleSpec as any,\n        { all: values, min, max },\n        axis === 'x' ? width : height,\n        axis\n    )\n\n    const [xScale, yScale] = layout === 'vertical' ? [indexScale, scale] : [scale, indexScale]\n\n    const innerPadding = props.innerPadding > 0 ? props.innerPadding : 0\n    const bandwidth = indexScale.bandwidth()\n    const params = [\n        { ...props, innerPadding, stackedData, xScale, yScale } as Params<RawDatum, any, any>,\n        bandwidth,\n        scaleSpec.reverse,\n    ] as const\n\n    const bars: ComputedBarDatum<RawDatum>[] =\n        bandwidth > 0\n            ? layout === 'vertical'\n                ? generateVerticalStackedBars(...params)\n                : generateHorizontalStackedBars(...params)\n            : []\n\n    return { xScale, yScale, bars }\n}\n", "import {\n    BarDatum,\n    BarLegendProps,\n    BarSvgProps,\n    BarsWithHidden,\n    LegendData,\n    LegendLabelDatum,\n} from '../types'\nimport { getPropertyAccessor } from '@nivo/core'\nimport { uniqBy } from 'lodash'\n\nexport const getLegendDataForKeys = <RawDatum extends BarDatum>(\n    bars: BarsWithHidden<RawDatum>,\n    layout: NonNullable<BarSvgProps<RawDatum>['layout']>,\n    direction: BarLegendProps['direction'],\n    groupMode: NonNullable<BarSvgProps<RawDatum>['groupMode']>,\n    reverse: boolean,\n    getLegendLabel: (datum: LegendLabelDatum<RawDatum>) => string\n): LegendData[] => {\n    const data = uniqBy(\n        bars.map(bar => ({\n            id: bar.data.id,\n            label: getLegendLabel(bar.data),\n            hidden: bar.data.hidden,\n            color: bar.color ?? '#000',\n        })),\n        ({ id }) => id\n    )\n\n    if (\n        (layout === 'vertical' &&\n            groupMode === 'stacked' &&\n            direction === 'column' &&\n            reverse !== true) ||\n        (layout === 'horizontal' && groupMode === 'stacked' && reverse === true)\n    ) {\n        data.reverse()\n    }\n\n    return data\n}\n\nexport const getLegendDataForIndexes = <RawDatum extends BarDatum>(\n    bars: BarsWithHidden<RawDatum>,\n    layout: NonNullable<BarSvgProps<RawDatum>['layout']>,\n    getLegendLabel: (datum: LegendLabelDatum<RawDatum>) => string\n): LegendData[] => {\n    const data = uniqBy(\n        bars.map(bar => ({\n            id: bar.data.indexValue ?? '',\n            label: getLegendLabel(bar.data),\n            hidden: bar.data.hidden,\n            color: bar.color ?? '#000',\n        })),\n        ({ id }) => id\n    )\n\n    if (layout === 'horizontal') {\n        data.reverse()\n    }\n\n    return data\n}\n\nexport const getLegendData = <RawDatum extends BarDatum>({\n    bars,\n    direction,\n    from,\n    groupMode,\n    layout,\n    legendLabel,\n    reverse,\n}: Pick<Required<BarSvgProps<RawDatum>>, 'layout' | 'groupMode' | 'reverse'> & {\n    bars: BarsWithHidden<RawDatum>\n    direction: BarLegendProps['direction']\n    from: BarLegendProps['dataFrom']\n    legendLabel: BarSvgProps<RawDatum>['legendLabel']\n}) => {\n    const getLegendLabel = getPropertyAccessor(\n        legendLabel ?? (from === 'indexes' ? 'indexValue' : 'id')\n    )\n\n    if (from === 'indexes') {\n        return getLegendDataForIndexes(bars, layout, getLegendLabel)\n    }\n\n    return getLegendDataForKeys(bars, layout, direction, groupMode, reverse, getLegendLabel)\n}\n", "import { useCallback, useMemo, useState } from 'react'\nimport { useInheritedColor, useOrdinalColorScale } from '@nivo/colors'\nimport { usePropertyAccessor, useTheme, useValueFormatter, Margin } from '@nivo/core'\nimport {\n    DataProps,\n    BarCommonProps,\n    BarDatum,\n    ComputedBarDatumWithValue,\n    LegendData,\n    BarLegendProps,\n} from './types'\nimport { defaultProps } from './props'\nimport { generateGroupedBars, generateStackedBars, getLegendData } from './compute'\n\nexport const useBar = <RawDatum extends BarDatum>({\n    indexBy = defaultProps.indexBy,\n    keys = defaultProps.keys,\n    label = defaultProps.label,\n    tooltipLabel = defaultProps.tooltipLabel,\n    valueFormat,\n    colors = defaultProps.colors,\n    colorBy = defaultProps.colorBy,\n    borderColor = defaultProps.borderColor,\n    labelTextColor = defaultProps.labelTextColor,\n    groupMode = defaultProps.groupMode,\n    layout = defaultProps.layout,\n    reverse = defaultProps.reverse,\n    data,\n    minValue = defaultProps.minValue,\n    maxValue = defaultProps.maxValue,\n    margin,\n    width,\n    height,\n    padding = defaultProps.padding,\n    innerPadding = defaultProps.innerPadding,\n    valueScale = defaultProps.valueScale,\n    indexScale = defaultProps.indexScale,\n    initialHiddenIds = defaultProps.initialHiddenIds,\n    enableLabel = defaultProps.enableLabel,\n    labelSkipWidth = defaultProps.labelSkipWidth,\n    labelSkipHeight = defaultProps.labelSkipHeight,\n    legends = defaultProps.legends,\n    legendLabel,\n}: {\n    indexBy?: BarCommonProps<RawDatum>['indexBy']\n    label?: BarCommonProps<RawDatum>['label']\n    tooltipLabel?: BarCommonProps<RawDatum>['tooltipLabel']\n    valueFormat?: BarCommonProps<RawDatum>['valueFormat']\n    colors?: BarCommonProps<RawDatum>['colors']\n    colorBy?: BarCommonProps<RawDatum>['colorBy']\n    borderColor?: BarCommonProps<RawDatum>['borderColor']\n    labelTextColor?: BarCommonProps<RawDatum>['labelTextColor']\n    groupMode?: BarCommonProps<RawDatum>['groupMode']\n    layout?: BarCommonProps<RawDatum>['layout']\n    reverse?: BarCommonProps<RawDatum>['reverse']\n    data: DataProps<RawDatum>['data']\n    keys?: BarCommonProps<RawDatum>['keys']\n    minValue?: BarCommonProps<RawDatum>['minValue']\n    maxValue?: BarCommonProps<RawDatum>['maxValue']\n    margin: Margin\n    width: number\n    height: number\n    padding?: BarCommonProps<RawDatum>['padding']\n    innerPadding?: BarCommonProps<RawDatum>['innerPadding']\n    valueScale?: BarCommonProps<RawDatum>['valueScale']\n    indexScale?: BarCommonProps<RawDatum>['indexScale']\n    initialHiddenIds?: BarCommonProps<RawDatum>['initialHiddenIds']\n    enableLabel?: BarCommonProps<RawDatum>['enableLabel']\n    labelSkipWidth?: BarCommonProps<RawDatum>['labelSkipWidth']\n    labelSkipHeight?: BarCommonProps<RawDatum>['labelSkipHeight']\n    legends?: BarCommonProps<RawDatum>['legends']\n    legendLabel?: BarCommonProps<RawDatum>['legendLabel']\n}) => {\n    const [hiddenIds, setHiddenIds] = useState(initialHiddenIds ?? [])\n    const toggleSerie = useCallback(id => {\n        setHiddenIds(state =>\n            state.indexOf(id) > -1 ? state.filter(item => item !== id) : [...state, id]\n        )\n    }, [])\n\n    const getIndex = usePropertyAccessor(indexBy)\n    const getLabel = usePropertyAccessor(label)\n    const getTooltipLabel = usePropertyAccessor(tooltipLabel)\n    const formatValue = useValueFormatter(valueFormat)\n\n    const theme = useTheme()\n    const getColor = useOrdinalColorScale(colors, colorBy)\n    const getBorderColor = useInheritedColor<ComputedBarDatumWithValue<RawDatum>>(\n        borderColor,\n        theme\n    )\n    const getLabelColor = useInheritedColor<ComputedBarDatumWithValue<RawDatum>>(\n        labelTextColor,\n        theme\n    )\n\n    const generateBars = groupMode === 'grouped' ? generateGroupedBars : generateStackedBars\n    const { bars, xScale, yScale } = generateBars({\n        layout,\n        reverse,\n        data,\n        getIndex,\n        keys,\n        minValue,\n        maxValue,\n        width,\n        height,\n        getColor,\n        padding,\n        innerPadding,\n        valueScale,\n        indexScale,\n        hiddenIds,\n        formatValue,\n        getTooltipLabel,\n        margin,\n    })\n\n    const barsWithValue = useMemo(\n        () =>\n            bars\n                .filter(\n                    (bar): bar is ComputedBarDatumWithValue<RawDatum> => bar.data.value !== null\n                )\n                .map((bar, index) => ({\n                    ...bar,\n                    index,\n                })),\n        [bars]\n    )\n\n    const shouldRenderBarLabel = useCallback(\n        ({ width, height }: { height: number; width: number }) => {\n            if (!enableLabel) return false\n            if (labelSkipWidth > 0 && width < labelSkipWidth) return false\n            if (labelSkipHeight > 0 && height < labelSkipHeight) return false\n            return true\n        },\n        [enableLabel, labelSkipWidth, labelSkipHeight]\n    )\n\n    const legendData = useMemo(\n        () =>\n            keys.map(key => {\n                const bar = bars.find(bar => bar.data.id === key)\n\n                return { ...bar, data: { id: key, ...bar?.data, hidden: hiddenIds.includes(key) } }\n            }),\n        [hiddenIds, keys, bars]\n    )\n\n    const legendsWithData: [BarLegendProps, LegendData[]][] = useMemo(\n        () =>\n            legends.map(legend => {\n                const data = getLegendData({\n                    bars: legend.dataFrom === 'keys' ? legendData : bars,\n                    direction: legend.direction,\n                    from: legend.dataFrom,\n                    groupMode,\n                    layout,\n                    legendLabel,\n                    reverse,\n                })\n\n                return [legend, data]\n            }),\n        [legends, legendData, bars, groupMode, layout, legendLabel, reverse]\n    )\n\n    return {\n        bars,\n        barsWithValue,\n        xScale,\n        yScale,\n        getIndex,\n        getLabel,\n        getTooltipLabel,\n        formatValue,\n        getColor,\n        getBorderColor,\n        getLabelColor,\n        shouldRenderBarLabel,\n        hiddenIds,\n        toggleSerie,\n        legendsWithData,\n    }\n}\n", "import { Axes, Grid } from '@nivo/axes'\nimport { BarAnnotations } from './BarAnnotations'\nimport {\n    BarCustomLayerProps,\n    BarDatum,\n    BarLayer,\n    BarLayerId,\n    BarSvgProps,\n    ComputedBarDatumWithValue,\n} from './types'\nimport { BarLegends } from './BarLegends'\nimport {\n    CartesianMarkers,\n    Container,\n    SvgWrapper,\n    // @ts-ignore\n    bindDefs,\n    useDimensions,\n    useMotionConfig,\n} from '@nivo/core'\nimport { Fragment, ReactNode, createElement, useMemo } from 'react'\nimport { svgDefaultProps } from './props'\nimport { useTransition } from '@react-spring/web'\nimport { useBar } from './hooks'\n\ntype InnerBarProps<RawDatum extends BarDatum> = Omit<\n    BarSvgProps<RawDatum>,\n    'animate' | 'motionConfig' | 'renderWrapper' | 'theme'\n>\n\nconst InnerBar = <RawDatum extends BarDatum>({\n    data,\n    indexBy,\n    keys,\n\n    margin: partialMargin,\n    width,\n    height,\n\n    groupMode,\n    layout,\n    reverse,\n    minValue,\n    maxValue,\n\n    valueScale,\n    indexScale,\n\n    padding,\n    innerPadding,\n\n    axisTop,\n    axisRight,\n    axisBottom = svgDefaultProps.axisBottom,\n    axisLeft = svgDefaultProps.axisLeft,\n    enableGridX = svgDefaultProps.enableGridX,\n    enableGridY = svgDefaultProps.enableGridY,\n    gridXValues,\n    gridYValues,\n\n    layers = svgDefaultProps.layers as BarLayer<RawDatum>[],\n    barComponent = svgDefaultProps.barComponent,\n\n    enableLabel = svgDefaultProps.enableLabel,\n    label,\n    labelSkipWidth = svgDefaultProps.labelSkipWidth,\n    labelSkipHeight = svgDefaultProps.labelSkipHeight,\n    labelTextColor,\n\n    markers = svgDefaultProps.markers,\n\n    colorBy,\n    colors,\n    defs = svgDefaultProps.defs,\n    fill = svgDefaultProps.fill,\n    borderRadius = svgDefaultProps.borderRadius,\n    borderWidth = svgDefaultProps.borderWidth,\n    borderColor,\n\n    annotations = svgDefaultProps.annotations,\n\n    legendLabel,\n    tooltipLabel,\n\n    valueFormat,\n\n    isInteractive = svgDefaultProps.isInteractive,\n    tooltip = svgDefaultProps.tooltip,\n    onClick,\n    onMouseEnter,\n    onMouseLeave,\n\n    legends,\n\n    role = svgDefaultProps.role,\n    ariaLabel,\n    ariaLabelledBy,\n    ariaDescribedBy,\n    isFocusable = svgDefaultProps.isFocusable,\n    barAriaLabel,\n    barAriaLabelledBy,\n    barAriaDescribedBy,\n\n    initialHiddenIds,\n}: InnerBarProps<RawDatum>) => {\n    const { animate, config: springConfig } = useMotionConfig()\n    const { outerWidth, outerHeight, margin, innerWidth, innerHeight } = useDimensions(\n        width,\n        height,\n        partialMargin\n    )\n\n    const {\n        bars,\n        barsWithValue,\n        xScale,\n        yScale,\n        getLabel,\n        getTooltipLabel,\n        getBorderColor,\n        getLabelColor,\n        shouldRenderBarLabel,\n        toggleSerie,\n        legendsWithData,\n    } = useBar<RawDatum>({\n        indexBy,\n        label,\n        tooltipLabel,\n        valueFormat,\n        colors,\n        colorBy,\n        borderColor,\n        labelTextColor,\n        groupMode,\n        layout,\n        reverse,\n        data,\n        keys,\n        minValue,\n        maxValue,\n        margin,\n        width: innerWidth,\n        height: innerHeight,\n        padding,\n        innerPadding,\n        valueScale,\n        indexScale,\n        enableLabel,\n        labelSkipWidth,\n        labelSkipHeight,\n        legends,\n        legendLabel,\n        initialHiddenIds,\n    })\n\n    const transition = useTransition<\n        ComputedBarDatumWithValue<RawDatum>,\n        {\n            borderColor: string\n            color: string\n            height: number\n            labelColor: string\n            labelOpacity: number\n            labelX: number\n            labelY: number\n            opacity: number\n            transform: string\n            width: number\n        }\n    >(barsWithValue, {\n        keys: bar => bar.key,\n        from: bar => ({\n            borderColor: getBorderColor(bar) as string,\n            color: bar.color,\n            height: 0,\n            labelColor: getLabelColor(bar) as string,\n            labelOpacity: 0,\n            labelX: bar.width / 2,\n            labelY: bar.height / 2,\n            transform: `translate(${bar.x}, ${bar.y + bar.height})`,\n            width: bar.width,\n            ...(layout === 'vertical'\n                ? {}\n                : {\n                      height: bar.height,\n                      transform: `translate(${bar.x}, ${bar.y})`,\n                      width: 0,\n                  }),\n        }),\n        enter: bar => ({\n            borderColor: getBorderColor(bar) as string,\n            color: bar.color,\n            height: bar.height,\n            labelColor: getLabelColor(bar) as string,\n            labelOpacity: 1,\n            labelX: bar.width / 2,\n            labelY: bar.height / 2,\n            transform: `translate(${bar.x}, ${bar.y})`,\n            width: bar.width,\n        }),\n        update: bar => ({\n            borderColor: getBorderColor(bar) as string,\n            color: bar.color,\n            height: bar.height,\n            labelColor: getLabelColor(bar) as string,\n            labelOpacity: 1,\n            labelX: bar.width / 2,\n            labelY: bar.height / 2,\n            transform: `translate(${bar.x}, ${bar.y})`,\n            width: bar.width,\n        }),\n        leave: bar => ({\n            borderColor: getBorderColor(bar) as string,\n            color: bar.color,\n            height: 0,\n            labelColor: getLabelColor(bar) as string,\n            labelOpacity: 0,\n            labelX: bar.width / 2,\n            labelY: 0,\n            transform: `translate(${bar.x}, ${bar.y + bar.height})`,\n            width: bar.width,\n            ...(layout === 'vertical'\n                ? {}\n                : {\n                      labelX: 0,\n                      labelY: bar.height / 2,\n                      height: bar.height,\n                      transform: `translate(${bar.x}, ${bar.y})`,\n                      width: 0,\n                  }),\n        }),\n        config: springConfig,\n        immediate: !animate,\n    })\n\n    const commonProps = useMemo(\n        () => ({\n            borderRadius,\n            borderWidth,\n            enableLabel,\n            isInteractive,\n            labelSkipWidth,\n            labelSkipHeight,\n            onClick,\n            onMouseEnter,\n            onMouseLeave,\n            getTooltipLabel,\n            tooltip,\n            isFocusable,\n            ariaLabel: barAriaLabel,\n            ariaLabelledBy: barAriaLabelledBy,\n            ariaDescribedBy: barAriaDescribedBy,\n        }),\n        [\n            borderRadius,\n            borderWidth,\n            enableLabel,\n            getTooltipLabel,\n            isInteractive,\n            labelSkipHeight,\n            labelSkipWidth,\n            onClick,\n            onMouseEnter,\n            onMouseLeave,\n            tooltip,\n            isFocusable,\n            barAriaLabel,\n            barAriaLabelledBy,\n            barAriaDescribedBy,\n        ]\n    )\n\n    const boundDefs = bindDefs(defs, bars, fill, {\n        dataKey: 'data',\n        targetKey: 'data.fill',\n    })\n\n    const layerById: Record<BarLayerId, ReactNode> = {\n        annotations: null,\n        axes: null,\n        bars: null,\n        grid: null,\n        legends: null,\n        markers: null,\n    }\n\n    if (layers.includes('annotations')) {\n        layerById.annotations = (\n            <BarAnnotations key=\"annotations\" bars={bars} annotations={annotations} />\n        )\n    }\n\n    if (layers.includes('axes')) {\n        layerById.axes = (\n            <Axes\n                key=\"axes\"\n                xScale={xScale}\n                yScale={yScale}\n                width={innerWidth}\n                height={innerHeight}\n                top={axisTop}\n                right={axisRight}\n                bottom={axisBottom}\n                left={axisLeft}\n            />\n        )\n    }\n\n    if (layers.includes('bars')) {\n        layerById.bars = (\n            <Fragment key=\"bars\">\n                {transition((style, bar) =>\n                    createElement(barComponent, {\n                        ...commonProps,\n                        bar,\n                        style,\n                        shouldRenderLabel: shouldRenderBarLabel(bar),\n                        label: getLabel(bar.data),\n                    })\n                )}\n            </Fragment>\n        )\n    }\n\n    if (layers.includes('grid')) {\n        layerById.grid = (\n            <Grid\n                key=\"grid\"\n                width={innerWidth}\n                height={innerHeight}\n                xScale={enableGridX ? xScale : null}\n                yScale={enableGridY ? yScale : null}\n                xValues={gridXValues}\n                yValues={gridYValues}\n            />\n        )\n    }\n\n    if (layers.includes('legends')) {\n        layerById.legends = (\n            <BarLegends\n                key=\"legends\"\n                width={innerWidth}\n                height={innerHeight}\n                legends={legendsWithData}\n                toggleSerie={toggleSerie}\n            />\n        )\n    }\n\n    if (layers.includes('markers')) {\n        layerById.markers = (\n            <CartesianMarkers<number | string, number>\n                key=\"markers\"\n                markers={markers as any[]}\n                width={innerWidth}\n                height={innerHeight}\n                xScale={xScale as (v: number | string) => number}\n                yScale={yScale as (v: number) => number}\n            />\n        )\n    }\n\n    const layerContext: BarCustomLayerProps<RawDatum> = useMemo(\n        () => ({\n            ...commonProps,\n            margin,\n            width,\n            height,\n            innerWidth,\n            innerHeight,\n            bars,\n            legendData: legendsWithData,\n            enableLabel,\n            xScale,\n            yScale,\n            tooltip,\n            getTooltipLabel,\n            onClick,\n            onMouseEnter,\n            onMouseLeave,\n        }),\n        [\n            commonProps,\n            margin,\n            width,\n            height,\n            innerWidth,\n            innerHeight,\n            bars,\n            legendsWithData,\n            enableLabel,\n            xScale,\n            yScale,\n            tooltip,\n            getTooltipLabel,\n            onClick,\n            onMouseEnter,\n            onMouseLeave,\n        ]\n    )\n\n    return (\n        <SvgWrapper\n            width={outerWidth}\n            height={outerHeight}\n            margin={margin}\n            defs={boundDefs}\n            role={role}\n            ariaLabel={ariaLabel}\n            ariaLabelledBy={ariaLabelledBy}\n            ariaDescribedBy={ariaDescribedBy}\n            isFocusable={isFocusable}\n        >\n            {layers.map((layer, i) => {\n                if (typeof layer === 'function') {\n                    return <Fragment key={i}>{createElement(layer, layerContext)}</Fragment>\n                }\n\n                return layerById?.[layer] ?? null\n            })}\n        </SvgWrapper>\n    )\n}\n\nexport const Bar = <RawDatum extends BarDatum>({\n    isInteractive = svgDefaultProps.isInteractive,\n    animate = svgDefaultProps.animate,\n    motionConfig = svgDefaultProps.motionConfig,\n    theme,\n    renderWrapper,\n    ...otherProps\n}: BarSvgProps<RawDatum>) => (\n    <Container\n        {...{\n            animate,\n            isInteractive,\n            motionConfig,\n            renderWrapper,\n            theme,\n        }}\n    >\n        <InnerBar<RawDatum> isInteractive={isInteractive} {...otherProps} />\n    </Container>\n)\n", "import {\n    BarCanvasCustomLayerProps,\n    BarCanvasLayer,\n    BarCanvasProps,\n    BarDatum,\n    ComputedBarDatum,\n} from './types'\nimport {\n    Container,\n    Margin,\n    getRelativeCursor,\n    isCursorInRect,\n    useDimensions,\n    useTheme,\n} from '@nivo/core'\nimport {\n    ForwardedRef,\n    createElement,\n    forwardRef,\n    useCallback,\n    useEffect,\n    useMemo,\n    useRef,\n} from 'react'\nimport { canvasDefaultProps } from './props'\nimport {\n    renderAnnotationsToCanvas,\n    useAnnotations,\n    useComputedAnnotations,\n} from '@nivo/annotations'\nimport { renderAxesToCanvas, renderGridLinesToCanvas } from '@nivo/axes'\nimport { renderLegendToCanvas } from '@nivo/legends'\nimport { useTooltip } from '@nivo/tooltip'\nimport { useBar } from './hooks'\n\ntype InnerBarCanvasProps<RawDatum extends BarDatum> = Omit<\n    BarCanvasProps<RawDatum>,\n    'renderWrapper' | 'theme'\n> & {\n    canvasRef: ForwardedRef<HTMLCanvasElement>\n}\n\nconst findBarUnderCursor = <RawDatum,>(\n    nodes: ComputedBarDatum<RawDatum>[],\n    margin: Margin,\n    x: number,\n    y: number\n) =>\n    nodes.find(node =>\n        isCursorInRect(node.x + margin.left, node.y + margin.top, node.width, node.height, x, y)\n    )\n\nconst isNumber = (value: unknown): value is number => typeof value === 'number'\n\nconst InnerBarCanvas = <RawDatum extends BarDatum>({\n    data,\n    indexBy,\n    keys,\n\n    margin: partialMargin,\n    width,\n    height,\n\n    groupMode,\n    layout,\n    reverse,\n    minValue,\n    maxValue,\n\n    valueScale,\n    indexScale,\n\n    padding,\n    innerPadding,\n\n    axisTop,\n    axisRight,\n    axisBottom = canvasDefaultProps.axisBottom,\n    axisLeft = canvasDefaultProps.axisLeft,\n    enableGridX = canvasDefaultProps.enableGridX,\n    enableGridY = canvasDefaultProps.enableGridY,\n    gridXValues,\n    gridYValues,\n\n    layers = canvasDefaultProps.layers as BarCanvasLayer<RawDatum>[],\n    renderBar = (\n        ctx,\n        {\n            bar: { color, height, width, x, y },\n\n            borderColor,\n            borderRadius,\n            borderWidth,\n            label,\n            labelColor,\n            shouldRenderLabel,\n        }\n    ) => {\n        ctx.fillStyle = color\n\n        if (borderWidth > 0) {\n            ctx.strokeStyle = borderColor\n            ctx.lineWidth = borderWidth\n        }\n\n        ctx.beginPath()\n\n        if (borderRadius > 0) {\n            const radius = Math.min(borderRadius, height)\n\n            ctx.moveTo(x + radius, y)\n            ctx.lineTo(x + width - radius, y)\n            ctx.quadraticCurveTo(x + width, y, x + width, y + radius)\n            ctx.lineTo(x + width, y + height - radius)\n            ctx.quadraticCurveTo(x + width, y + height, x + width - radius, y + height)\n            ctx.lineTo(x + radius, y + height)\n            ctx.quadraticCurveTo(x, y + height, x, y + height - radius)\n            ctx.lineTo(x, y + radius)\n            ctx.quadraticCurveTo(x, y, x + radius, y)\n            ctx.closePath()\n        } else {\n            ctx.rect(x, y, width, height)\n        }\n\n        ctx.fill()\n\n        if (borderWidth > 0) {\n            ctx.stroke()\n        }\n\n        if (shouldRenderLabel) {\n            ctx.textBaseline = 'middle'\n            ctx.textAlign = 'center'\n            ctx.fillStyle = labelColor\n            ctx.fillText(label, x + width / 2, y + height / 2)\n        }\n    },\n\n    enableLabel = canvasDefaultProps.enableLabel,\n    label,\n    labelSkipWidth = canvasDefaultProps.labelSkipWidth,\n    labelSkipHeight = canvasDefaultProps.labelSkipHeight,\n    labelTextColor,\n\n    colorBy,\n    colors,\n    borderRadius = canvasDefaultProps.borderRadius,\n    borderWidth = canvasDefaultProps.borderWidth,\n    borderColor,\n\n    annotations = canvasDefaultProps.annotations,\n\n    legendLabel,\n    tooltipLabel,\n\n    valueFormat,\n\n    isInteractive = canvasDefaultProps.isInteractive,\n    tooltip = canvasDefaultProps.tooltip,\n    onClick,\n    onMouseEnter,\n    onMouseLeave,\n\n    legends,\n\n    pixelRatio = canvasDefaultProps.pixelRatio,\n\n    canvasRef,\n}: InnerBarCanvasProps<RawDatum>) => {\n    const canvasEl = useRef<HTMLCanvasElement | null>(null)\n\n    const theme = useTheme()\n    const { margin, innerWidth, innerHeight, outerWidth, outerHeight } = useDimensions(\n        width,\n        height,\n        partialMargin\n    )\n\n    const {\n        bars,\n        barsWithValue,\n        xScale,\n        yScale,\n        getLabel,\n        getTooltipLabel,\n        getBorderColor,\n        getLabelColor,\n        shouldRenderBarLabel,\n        legendsWithData,\n    } = useBar<RawDatum>({\n        indexBy,\n        label,\n        tooltipLabel,\n        valueFormat,\n        colors,\n        colorBy,\n        borderColor,\n        labelTextColor,\n        groupMode,\n        layout,\n        reverse,\n        data,\n        keys,\n        minValue,\n        maxValue,\n        margin,\n        width: innerWidth,\n        height: innerHeight,\n        padding,\n        innerPadding,\n        valueScale,\n        indexScale,\n        enableLabel,\n        labelSkipWidth,\n        labelSkipHeight,\n        legends,\n        legendLabel,\n    })\n\n    const { showTooltipFromEvent, hideTooltip } = useTooltip()\n\n    // Using any because return type isn't correct\n    const boundAnnotations: any = useComputedAnnotations({\n        annotations: useAnnotations({\n            data: bars,\n            annotations,\n            getPosition: node => ({\n                x: node.x,\n                y: node.y,\n            }),\n            getDimensions: ({ width, height }) => ({\n                width,\n                height,\n                size: Math.max(width, height),\n            }),\n        }),\n    })\n\n    // We use `any` here until we can figure out the best way to type xScale/yScale\n    const layerContext: BarCanvasCustomLayerProps<RawDatum> = useMemo(\n        () => ({\n            borderRadius,\n            borderWidth,\n            isInteractive,\n            isFocusable: false,\n            labelSkipWidth,\n            labelSkipHeight,\n            margin,\n            width,\n            height,\n            innerWidth,\n            innerHeight,\n            bars,\n            legendData: legendsWithData,\n            enableLabel,\n            xScale,\n            yScale,\n            tooltip,\n            getTooltipLabel,\n            onClick,\n            onMouseEnter,\n            onMouseLeave,\n        }),\n        [\n            borderRadius,\n            borderWidth,\n            isInteractive,\n            labelSkipWidth,\n            labelSkipHeight,\n            margin,\n            width,\n            height,\n            innerWidth,\n            innerHeight,\n            bars,\n            legendsWithData,\n            enableLabel,\n            xScale,\n            yScale,\n            tooltip,\n            getTooltipLabel,\n            onClick,\n            onMouseEnter,\n            onMouseLeave,\n        ]\n    )\n\n    useEffect(() => {\n        const ctx = canvasEl.current?.getContext('2d')\n\n        if (!canvasEl.current) return\n        if (!ctx) return\n\n        canvasEl.current.width = outerWidth * pixelRatio\n        canvasEl.current.height = outerHeight * pixelRatio\n\n        ctx.scale(pixelRatio, pixelRatio)\n\n        ctx.fillStyle = theme.background\n        ctx.fillRect(0, 0, outerWidth, outerHeight)\n        ctx.translate(margin.left, margin.top)\n\n        layers.forEach(layer => {\n            if (layer === 'grid') {\n                if (isNumber(theme.grid.line.strokeWidth) && theme.grid.line.strokeWidth > 0) {\n                    ctx.lineWidth = theme.grid.line.strokeWidth\n                    ctx.strokeStyle = theme.grid.line.stroke as string\n\n                    if (enableGridX) {\n                        renderGridLinesToCanvas<string | number>(ctx, {\n                            width,\n                            height,\n                            scale: xScale,\n                            axis: 'x',\n                            values: gridXValues,\n                        })\n                    }\n\n                    if (enableGridY) {\n                        renderGridLinesToCanvas<string | number>(ctx, {\n                            width,\n                            height,\n                            scale: yScale,\n                            axis: 'y',\n                            values: gridYValues,\n                        })\n                    }\n                }\n            } else if (layer === 'axes') {\n                renderAxesToCanvas(ctx, {\n                    xScale: xScale,\n                    yScale: yScale,\n                    width: innerWidth,\n                    height: innerHeight,\n                    top: axisTop,\n                    right: axisRight,\n                    bottom: axisBottom,\n                    left: axisLeft,\n                    theme,\n                })\n            } else if (layer === 'bars') {\n                barsWithValue.forEach(bar => {\n                    renderBar(ctx, {\n                        bar,\n                        borderColor: getBorderColor(bar) as string,\n                        borderRadius,\n                        borderWidth,\n                        label: getLabel(bar.data),\n                        labelColor: getLabelColor(bar) as string,\n                        shouldRenderLabel: shouldRenderBarLabel(bar),\n                    })\n                })\n            } else if (layer === 'legends') {\n                legendsWithData.forEach(([legend, data]) => {\n                    renderLegendToCanvas(ctx, {\n                        ...legend,\n                        data,\n                        containerWidth: innerWidth,\n                        containerHeight: innerHeight,\n                        theme,\n                    })\n                })\n            } else if (layer === 'annotations') {\n                renderAnnotationsToCanvas(ctx, { annotations: boundAnnotations, theme })\n            } else if (typeof layer === 'function') {\n                layer(ctx, layerContext)\n            }\n        })\n\n        ctx.save()\n    }, [\n        axisBottom,\n        axisLeft,\n        axisRight,\n        axisTop,\n        barsWithValue,\n        borderRadius,\n        borderWidth,\n        boundAnnotations,\n        enableGridX,\n        enableGridY,\n        getBorderColor,\n        getLabel,\n        getLabelColor,\n        gridXValues,\n        gridYValues,\n        groupMode,\n        height,\n        innerHeight,\n        innerWidth,\n        layerContext,\n        layers,\n        layout,\n        legendsWithData,\n        margin.left,\n        margin.top,\n        outerHeight,\n        outerWidth,\n        pixelRatio,\n        renderBar,\n        xScale,\n        yScale,\n        reverse,\n        shouldRenderBarLabel,\n        theme,\n        width,\n    ])\n\n    const handleMouseHover = useCallback(\n        (event: React.MouseEvent<HTMLCanvasElement>) => {\n            if (!bars) return\n            if (!canvasEl.current) return\n\n            const [x, y] = getRelativeCursor(canvasEl.current, event)\n            const bar = findBarUnderCursor(bars, margin, x, y)\n\n            if (bar !== undefined) {\n                showTooltipFromEvent(\n                    createElement(tooltip, {\n                        ...bar.data,\n                        color: bar.color,\n                        label: bar.label,\n                        value: Number(bar.data.value),\n                    }),\n                    event\n                )\n\n                if (event.type === 'mouseenter') {\n                    onMouseEnter?.(bar.data, event)\n                }\n            } else {\n                hideTooltip()\n            }\n        },\n        [hideTooltip, margin, onMouseEnter, bars, showTooltipFromEvent, tooltip]\n    )\n\n    const handleMouseLeave = useCallback(\n        (event: React.MouseEvent<HTMLCanvasElement>) => {\n            if (!bars) return\n            if (!canvasEl.current) return\n\n            hideTooltip()\n\n            const [x, y] = getRelativeCursor(canvasEl.current, event)\n            const bar = findBarUnderCursor(bars, margin, x, y)\n\n            if (bar) {\n                onMouseLeave?.(bar.data, event)\n            }\n        },\n        [hideTooltip, margin, onMouseLeave, bars]\n    )\n\n    const handleClick = useCallback(\n        (event: React.MouseEvent<HTMLCanvasElement>) => {\n            if (!bars) return\n            if (!canvasEl.current) return\n\n            const [x, y] = getRelativeCursor(canvasEl.current, event)\n            const bar = findBarUnderCursor(bars, margin, x, y)\n\n            if (bar !== undefined) {\n                onClick?.({ ...bar.data, color: bar.color }, event)\n            }\n        },\n        [margin, onClick, bars]\n    )\n\n    return (\n        <canvas\n            ref={canvas => {\n                canvasEl.current = canvas\n                if (canvasRef && 'current' in canvasRef) canvasRef.current = canvas\n            }}\n            width={outerWidth * pixelRatio}\n            height={outerHeight * pixelRatio}\n            style={{\n                width: outerWidth,\n                height: outerHeight,\n                cursor: isInteractive ? 'auto' : 'normal',\n            }}\n            onMouseEnter={isInteractive ? handleMouseHover : undefined}\n            onMouseMove={isInteractive ? handleMouseHover : undefined}\n            onMouseLeave={isInteractive ? handleMouseLeave : undefined}\n            onClick={isInteractive ? handleClick : undefined}\n        />\n    )\n}\n\nexport const BarCanvas = forwardRef(\n    <RawDatum extends BarDatum>(\n        { isInteractive, renderWrapper, theme, ...props }: BarCanvasProps<RawDatum>,\n        ref: ForwardedRef<HTMLCanvasElement>\n    ) => (\n        <Container {...{ isInteractive, renderWrapper, theme }} animate={false}>\n            <InnerBarCanvas<RawDatum> {...props} canvasRef={ref} />\n        </Container>\n    )\n)\n", "import { Bar } from './Bar'\nimport { BarDatum, BarSvgProps } from './types'\nimport { ResponsiveWrapper } from '@nivo/core'\n\nexport const ResponsiveBar = <RawDatum extends BarDatum>(\n    props: Omit<BarSvgProps<RawDatum>, 'height' | 'width'>\n) => (\n    <ResponsiveWrapper>\n        {({ width, height }) => <Bar<RawDatum> width={width} height={height} {...props} />}\n    </ResponsiveWrapper>\n)\n", "import { BarDatum, BarCanvasProps } from './types'\nimport { BarCanvas } from './BarCanvas'\nimport { ForwardedRef, forwardRef } from 'react'\nimport { ResponsiveWrapper } from '@nivo/core'\n\nexport const ResponsiveBarCanvas = forwardRef(function ResponsiveBarCanvas<\n    RawDatum extends BarDatum\n>(props: Omit<BarCanvasProps<RawDatum>, 'height' | 'width'>, ref: ForwardedRef<HTMLCanvasElement>) {\n    return (\n        <ResponsiveWrapper>\n            {({ width, height }) => (\n                <BarCanvas\n                    width={width}\n                    height={height}\n                    {...(props as Omit<BarCanvasProps<BarDatum>, 'height' | 'width'>)}\n                    ref={ref}\n                />\n            )}\n        </ResponsiveWrapper>\n    )\n})\n"],
  "mappings": "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",
  "names": ["key", "collection", "defaultProps", "dotSize", "noteWidth", "noteTextOffset", "animate", "motionStiffness", "motionDamping", "isSvgNote", "note", "noteType", "isValidElement", "isCanvasNote", "isCircleAnnotation", "annotationSpec", "type", "isDotAnnotation", "isRectAnnotation", "bindAnnotations", "t", "data", "annotations", "getPosition", "getDimensions", "reduce", "acc", "annotation", "offset", "_filter", "match", "map", "datum", "position", "dimensions", "size", "width", "height", "_omit", "getLinkAngle", "sourceX", "sourceY", "targetX", "targetY", "angle", "Math", "atan2", "absoluteAngleDegrees", "radiansToDegrees", "computeAnnotation", "computedNoteX", "computedNoteY", "x", "y", "noteX", "noteY", "_isNumber", "abs", "Error", "computedX", "computedY", "positionFromAngle", "degreesToRadians", "eighth", "round", "textX", "noteLineX", "points", "text", "useAnnotations", "useMemo", "useComputedAnnotations", "computed", "useComputedAnnotation", "AnnotationNote", "theme", "useTheme", "useMotionConfig", "springConfig", "config", "animatedProps", "useSpring", "immediate", "createElement", "_jsxs", "outlineWidth", "_jsx", "animated", "style", "strokeLinejoin", "strokeWidth", "stroke", "outlineColor", "omit", "AnnotationLink", "isOutline", "path", "firstPoint", "animatedPath", "useAnimatedPath", "link", "strokeLinecap", "opacity", "outlineOpacity", "fill", "d", "CircleAnnotationOutline", "radius", "outline", "circle", "cx", "cy", "r", "DotAnnotationOutline", "symbol", "RectAnnotationOutline", "borderRadius", "a", "rect", "rx", "ry", "Annotation", "drawPoints", "ctx", "forEach", "n", "index", "moveTo", "lineTo", "renderAnnotationsToCanvas", "length", "save", "lineCap", "strokeStyle", "lineWidth", "beginPath", "arc", "PI", "fillStyle", "font", "fontSize", "fontFamily", "textAlign", "textBaseline", "lineJoin", "strokeText", "fillText", "restore", "BarAnnotations", "e", "bars", "annotations", "boundAnnotations", "useAnnotations", "data", "getPosition", "bar", "x", "width", "y", "height", "getDimensions", "size", "Math", "max", "_jsx", "map", "annotation", "i", "Annotation", "BarLegends", "legends", "toggleSerie", "legend", "BoxLegendSvg", "containerWidth", "containerHeight", "dataFrom", "undefined", "BarItem", "a", "style", "borderColor", "color", "labelColor", "labelOpacity", "labelX", "labelY", "transform", "borderRadius", "borderWidth", "label", "shouldRenderLabel", "isInteractive", "onClick", "onMouseEnter", "onMouseLeave", "tooltip", "isFocusable", "ariaLabel", "ariaLabelledBy", "ariaDescribedBy", "theme", "useTheme", "useTooltip", "showTooltipFromEvent", "showTooltipAt", "hideTooltip", "renderTooltip", "useMemo", "createElement", "handleClick", "useCallback", "event", "handleTooltip", "handleMouseEnter", "handleMouseLeave", "handleFocus", "absX", "absY", "handleBlur", "_jsxs", "animated", "g", "rect", "to", "value", "rx", "ry", "fill", "strokeWidth", "stroke", "focusable", "tabIndex", "onMouseMove", "onFocus", "onBlur", "text", "textAnchor", "dominantBaseline", "fillOpacity", "labels", "pointerEvents", "defaultProps", "indexBy", "keys", "groupMode", "layout", "reverse", "minValue", "maxValue", "valueScale", "type", "indexScale", "round", "padding", "innerPadding", "axisBottom", "axisLeft", "enableGridX", "enableGridY", "enableLabel", "labelSkipWidth", "labelSkipHeight", "labelTextColor", "from", "colorBy", "colors", "scheme", "BasicTooltip", "id", "formattedValue", "enableChip", "tooltipLabel", "datum", "indexValue", "initialHiddenIds", "markers", "svgDefaultProps", "layers", "barComponent", "defs", "animate", "motionConfig", "role", "canvasDefaultProps", "pixelRatio", "window", "devicePixelRatio", "getIndexScale", "getIndex", "axis", "computeScale", "all", "min", "normalizeData", "item", "reduce", "acc", "key", "filterNullValues", "Object", "coerceValue", "Number", "gt", "other", "lt", "range", "start", "end", "Array", "repeat", "_", "index", "clampToZero", "generateVerticalGroupedBars", "barWidth", "yRef", "formatValue", "getColor", "getTooltipLabel", "u", "xScale", "yScale", "margin", "compare", "cleanedData", "forEach", "domain", "length", "d", "rawValue", "barHeight", "barData", "hidden", "push", "left", "top", "generateHorizontalGroupedBars", "xRef", "c", "generateGroupedBars", "indexScaleConfig", "hiddenIds", "v", "props", "filter", "includes", "otherAxis", "scaleSpec", "clampMin", "values", "entry", "k", "Boolean", "isFinite", "scale", "bandwidth", "params", "z", "flattenDeep", "arr", "some", "isArray", "concat", "generateVerticalStackedBars", "stackedData", "stackedDataItem", "t", "generateHorizontalStackedBars", "generateStackedBars", "array", "b", "stack", "offset", "stackOffsetDiverging", "num", "getLegendData", "direction", "legendLabel", "getLegendLabel", "getPropertyAccessor", "_uniqBy", "useBar", "valueFormat", "useState", "setHiddenIds", "state", "indexOf", "usePropertyAccessor", "getLabel", "useValueFormatter", "useOrdinalColorScale", "getBorderColor", "useInheritedColor", "getLabelColor", "barsWithValue", "shouldRenderBarLabel", "legendData", "find", "legendsWithData", "InnerBar", "partialMargin", "axisTop", "axisRight", "gridXValues", "gridYValues", "barAriaLabel", "barAriaLabelledBy", "barAriaDescribedBy", "useMotionConfig", "springConfig", "config", "useDimensions", "outerWidth", "outerHeight", "innerWidth", "innerHeight", "transition", "useTransition", "enter", "update", "leave", "immediate", "commonProps", "boundDefs", "bindDefs", "dataKey", "targetKey", "layerById", "axes", "grid", "Axes", "right", "bottom", "Fragment", "Grid", "xValues", "yValues", "CartesianMarkers", "layerContext", "SvgWrapper", "layer", "Bar", "renderWrapper", "otherProps", "Container", "findBarUnderCursor", "nodes", "node", "isCursorInRect", "InnerBarCanvas", "renderBar", "ctx", "fillStyle", "strokeStyle", "lineWidth", "beginPath", "radius", "moveTo", "lineTo", "quadraticCurveTo", "closePath", "textBaseline", "textAlign", "fillText", "N", "Q", "canvasRef", "canvasEl", "useRef", "useComputedAnnotations", "useEffect", "current", "_canvasEl$current", "getContext", "background", "fillRect", "translate", "line", "renderGridLinesToCanvas", "renderAxesToCanvas", "renderLegendToCanvas", "renderAnnotationsToCanvas", "save", "handleMouseHover", "getRelativeCursor", "ref", "canvas", "cursor", "BarCanvas", "forwardRef", "ResponsiveBar", "ResponsiveWrapper", "ResponsiveBarCanvas"]
}
